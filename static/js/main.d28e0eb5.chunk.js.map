{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeySequence.ts","../../common/src/KeyEvents.ts","../../common/src/KeySequences.ts","../../common/src/KeyBindings.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/Util.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/pgs-parser/segment.ts","services/pgs-parser/buffer.ts","services/pgs-parser/parser.ts","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","KeySequenceTransitionResult","KeyEvents","event","ctrlKey","shiftKey","key","toLowerCase","detectDecreaseOffset","detectIncreaseOffset","detectIncreaseOffsetToPreviousSubtitle","detectDecreaseOffsetToNextSubtitle","detectCopy","KeySequence","up","holding","canceledBy","map","currentlyHolding","canceled","this","result","REJECTED","extra","type","includes","ADVANCED","CANCELED","_holdingAll","COMPLETE","KeySequences","Number","KeyBindings","onCopy","disabledGetter","subtitleGetter","useCapture","_bindDown","subtitle","onAnkiExport","detectAnkiExport","onUpdateLastCard","detectUpdateLastCard","onSeekToSubtitle","timeGetter","subtitlesGetter","subtitles","length","forward","detectPreviousSubtitle","detectNextSubtitle","_adjacentSubtitle","start","end","onSeekToBeginningOfCurrentSubtitle","detectCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","detectSeekBackward","detectSeekForward","onOffsetChange","subtitleStart","originalStart","adjacentSubtitleIndex","Math","max","increase","currentOffset","onToggleSubtitles","onSequenceAdvanced","sequence","toggleSubtitles","handler","reset","transition","accept","unbindDown","unbindUp","_bindUp","onToggleSubtitleTrack","toggleSubtitleTrack","onToggleSubtitleTrackInList","toggleSubtitleTrackInList","onPlay","detectPlay","onAutoPause","detectAutoPause","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","audioBuffer","channels","numberOfChannels","push","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","PostMineAction","AutoPausePreference","PlayMode","AUDIO_TYPES","Object","keys","filter","MediaRecorder","isTypeSupported","t","recorderMimeType","recorderExtension","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","floor","_blob","audio","Audio","src","URL","createObjectURL","preload","load","play","setTimeout","pause","revokeObjectURL","fetch","FileAudioData","file","trackId","name","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","getVideoTracks","stop","recorder","mimeType","chunks","ondataavailable","onstop","source","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","Mp3AudioData","encode","slice","isSliceable","AudioClip","url","document","createElement","body","appendChild","style","display","href","download","click","remove","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","min","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","timestamp","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","fileNameSpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","text","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","sanitized","action","version","humanReadableTime","seconds","nearestTenth","totalSeconds","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","originalEnd","track","beforeTimestamp","unshift","initialIndex","sign","next","abs","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","interval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","timestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","subtitleEnd","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleTimestampIntervalChange","handleApplyTimestampIntervalToText","newText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","disableApplyTextSelection","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","IconButton","edge","onClick","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","SegmentType","Uint8ArrayBuffer","subarray","CompositeBuffer","buffers","previousBuffersLength","bufferIndex","at","startBufferIndex","endBufferIndex","CompositeBufferReader","bytes","accumulated","shift","required","c","BufferGenerator","accumulatedBuffer","requestedBytes","getReader","read","done","add","BufferReader","_index","limit","number","digit","from","CompositionState","segmentTypeValues","values","segmentTypeFromByte","byte","LastInSequenceFlag","compositionStateValues","lastInSequenceFlagValues","RunLengthEncodedBuffer","encodedBuffer","callback","encodedIndex","decodedLineIndex","currentLine","encodedLength","firstByte","runLength","increment","secondByte","thirdByte","x","DisplaySet","presentationCompositionSegment","windowDefinitionSegments","paletteDefinitionSegments","objectDefinitionSegments","endDefinitionSegment","previousDisplaySet","find","ods","lastInSequenceFlag","firstInSequence","firstAndLastInSequence","paletteId","pds","compositionState","normal","paletteDefinitionSegment","firstOds","imageDataArray","Uint8ClampedArray","rgbaPalette","paletteEntries","ycrcbToRgba","objectData","decode","y","paletteIndex","imageDataOffset","r","g","b","ImageData","luminance","cb","colorDifferenceBlue","cr","colorDifferenceRed","clamp","transparency","parseDisplaySets","bufferGenerator","header","segmentType","pcs","wds","parsePcsSegment","parseWdsSegment","parsePdsSegment","parseOdsSegment","lastDisplaySet","magicNumber","readHex","presentationTimestamp","decodingTimestamp","segmentSize","compositionNumber","state","compositionStateFromByte","paletteUpdateFlag","paletteUpdateFlagFromByte","compositionObjectCount","objectId","windowId","objectCroppedFlag","objectCroppedFlagFromByte","objectHorizontalPosition","objectVerticalPosition","objectCroppingHorizontalPosition","objectCroppingVerticalPosition","objectCroppingWidth","objectCroppingHeightPosition","windowCount","windowDefinitions","windowHorizontalPosition","windowVerticalPosition","paletteVersionNumber","paletteEntryId","objectVersionNumber","flag","lastInSequenceFlagFromByte","objectDataLength","readBuffer","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","parsePgsDisplaySets","displaySet","currentImageDisplaySet","screenWidth","screenHeight","imageData","putImageData","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","leftButton","marginRight","appBar","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","AppBar","clsx","drawerOpen","hidden","onFileSelector","component","rel","onOpenCopyHistory","ChromeExtension","tabs","onMessageCallbacks","onTabsCallbacks","versionPromise","versionResolve","heartbeatStarted","uuidv4","sender","tabId","_sendHeartbeat","setInterval","receivedTabs","tab","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","parseInt","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","padEnd","n","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","anchorEl","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","navigator","clipboard","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","Popover","anchorOrigin","vertical","horizontal","transformOrigin","ListItem","button","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","handleMenu","currentTarget","handleMenuClosed","items","lastSeenItemName","itemNameCounters","ListSubheader","disableSticky","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","startedShowingSubtitle","willStopShowingSubtitle","smallestIndex","fallbackIndex","startedShowing","willStopShowing","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","unbind","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","bindCopy","none","subtitleIndexes","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","updateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","postMineAction","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","subtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onVideoPopOut","onAutoPauseModeChangedViaBind","rewindSubtitle","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setPlayMode","playModeRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","onOffset","fromVideo","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlayMode","handleToggleSubtitleTrack","bindPlay","bindAutoPause","newPlayMode","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","subtitlePreviewStyles","requestPermission","refreshFieldNames","modelFieldNames","handleClose","theaterMode","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","defaultAutoPausePreference","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","volumeKey","theaterModeKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","SettingsProvider","_tags","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitlesMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","playbackRate","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onbeforeunload","equals","arrayEquals","s1","s2","copy","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogProceed","export","newCopiedSubtitle","last","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","subtitleSettingsMessage","ankiSettingsMessage","miscSettingsMessage","publishMessage","handleDeleteCopyHistoryItem","previous","clip","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","startHeartbeat","syncMessage","File","handleAutoPauseModeChangedViaBind","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","handleDragOver","handleDragEnter","handleDragLeave","nativeEvent","handleSourcesLoaded","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.d28e0eb5.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nexport function useWindowSize(enabled: boolean) {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            if (enabled) {\r\n                setSize([window.innerWidth, window.innerHeight]);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, [enabled]);\r\n\r\n    return size;\r\n}\r\n","export enum KeySequenceTransitionResult {\r\n    REJECTED = 0,\r\n    CANCELED = 1,\r\n    ADVANCED = 2,\r\n    COMPLETE = 3,\r\n}\r\n\r\nexport interface KeySequenceOptions {\r\n    up?: string[];\r\n    holding?: string[];\r\n    canceledBy?: string[];\r\n    map?: (event: KeyboardEvent) => any;\r\n}\r\n\r\nexport interface KeySequenceTransition {\r\n    result: KeySequenceTransitionResult;\r\n    extra?: any;\r\n}\r\n\r\nexport default class KeySequence {\r\n    private up: string[];\r\n    private holding: string[];\r\n    private canceledBy: string[];\r\n    private map: (event: KeyboardEvent) => any;\r\n    private currentlyHolding: { [key: string]: boolean };\r\n    private canceled: boolean;\r\n\r\n    constructor({ up, holding, canceledBy, map }: KeySequenceOptions) {\r\n        this.up = up || [];\r\n        this.holding = holding || [];\r\n        this.canceledBy = canceledBy || [];\r\n        this.map = map || ((event: KeyboardEvent) => true);\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    reset() {\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    accept(event: KeyboardEvent): KeySequenceTransition {\r\n        let result = KeySequenceTransitionResult.REJECTED;\r\n        let extra = null;\r\n\r\n        if (event.type === 'keydown') {\r\n            const key = event.key.toLowerCase();\r\n\r\n            if (this.holding.includes(key)) {\r\n                this.currentlyHolding[key] = true;\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n\r\n            if (this.canceledBy.includes(key)) {\r\n                this.canceled = true;\r\n                result = KeySequenceTransitionResult.CANCELED;\r\n            }\r\n\r\n            if (this.up.includes(key)) {\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n        }\r\n\r\n        if (event.type === 'keyup') {\r\n            const key = event.key.toLowerCase();\r\n            delete this.currentlyHolding[key];\r\n\r\n            if (this.up.includes(key) && this._holdingAll() && !this.canceled) {\r\n                extra = this.map(event);\r\n                result = KeySequenceTransitionResult.COMPLETE;\r\n            }\r\n        }\r\n\r\n        return { result: result, extra: extra };\r\n    }\r\n\r\n    _holdingAll() {\r\n        for (const key of this.holding) {\r\n            if (!(key in this.currentlyHolding)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","export default class KeyEvents {\r\n    static detectCopy(event: KeyboardEvent) {\r\n        // Ctrl + Shift + A\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a';\r\n    }\r\n\r\n    static detectDecreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Right\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowRight';\r\n    }\r\n\r\n    static detectAnkiExport(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Q\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'q';\r\n    }\r\n\r\n    static detectUpdateLastCard(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Y\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'y';\r\n    }\r\n\r\n    static detectIncreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Left\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectDecreaseOffsetToNextSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectIncreaseOffsetToPreviousSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Left\r\n        return !KeyEvents.detectIncreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectPreviousSubtitle(event: KeyboardEvent) {\r\n        // Left\r\n        return (\r\n            !KeyEvents.detectIncreaseOffset(event) &&\r\n            !KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event) &&\r\n            event.key === 'ArrowLeft'\r\n        );\r\n    }\r\n\r\n    static detectNextSubtitle(event: KeyboardEvent) {\r\n        // Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) &&\r\n            !KeyEvents.detectDecreaseOffsetToNextSubtitle(event) &&\r\n            event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectCurrentSubtitle(event: KeyboardEvent) {\r\n        // Down\r\n        return event.key === 'ArrowDown';\r\n    }\r\n\r\n    static detectSeekBackward(event: KeyboardEvent) {\r\n        // A\r\n        return !KeyEvents.detectCopy(event) && event.key.toLowerCase() === 'a';\r\n    }\r\n\r\n    static detectSeekForward(event: KeyboardEvent) {\r\n        // D\r\n        return event.key.toLowerCase() === 'd';\r\n    }\r\n\r\n    static detectPlay(event: KeyboardEvent) {\r\n        // Space\r\n        return event.key === ' ';\r\n    }\r\n\r\n    static detectAutoPause(event: KeyboardEvent) {\r\n        // Shift + P\r\n        return event.shiftKey && event.key.toLowerCase() === 'p';\r\n    }\r\n}\r\n","import KeySequence from './KeySequence';\r\n\r\nexport default class KeySequences {\r\n    static toggleSubtitles() {\r\n        // Up S, canceled by 1...9\r\n        return new KeySequence({ up: ['s'], canceledBy: ['1', '2', '3', '4', '5', '6', '7', '8', '9'] });\r\n    }\r\n\r\n    static toggleSubtitleTrack() {\r\n        // Holding S, up 1...9\r\n        return new KeySequence({\r\n            holding: ['s'],\r\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\r\n            map: (event) => Number(event.key) - 1,\r\n        });\r\n    }\r\n\r\n    static toggleSubtitleTrackInList() {\r\n        // Holding W, up 1...9\r\n        return new KeySequence({\r\n            holding: ['w'],\r\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\r\n            map: (event) => Number(event.key) - 1,\r\n        });\r\n    }\r\n\r\n    static togglePlay() {\r\n        // Space\r\n        return new KeySequence({\r\n            up: [' '],\r\n            canceledBy: ['a', 'd'],\r\n        });\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\nimport KeyEvents from './KeyEvents';\r\nimport { KeySequenceTransitionResult } from './KeySequence';\r\nimport KeySequences from './KeySequences';\r\n\r\nexport default class KeyBindings {\r\n    static bindCopy<T extends SubtitleModel = SubtitleModel>(\r\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitleGetter: () => T | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCopy(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = subtitleGetter();\r\n\r\n            if (!subtitle) {\r\n                return;\r\n            }\r\n\r\n            onCopy(event, subtitle);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAnkiExport(\r\n        onAnkiExport: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAnkiExport(event)) {\r\n                return;\r\n            }\r\n\r\n            onAnkiExport(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindUpdateLastCard(\r\n        onUpdateLastCard: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectUpdateLastCard(event)) {\r\n                return;\r\n            }\r\n\r\n            onUpdateLastCard(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToSubtitle(\r\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, timeGetter(), subtitles);\r\n\r\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToBeginningOfCurrentSubtitle(\r\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCurrentSubtitle(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._currentSubtitle(timeGetter(), subtitles);\r\n\r\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let currentSubtitle: SubtitleModel | undefined;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n\r\n            if (s.start < 0 || s.end < 0) {\r\n                continue;\r\n            }\r\n\r\n            const diff = now - s.start;\r\n\r\n            if (now >= s.start && now < s.end) {\r\n                if (diff < minDiff) {\r\n                    currentSubtitle = s;\r\n                    minDiff = diff;\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentSubtitle;\r\n    }\r\n\r\n    static bindSeekBackwardOrForward(\r\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            let forward: boolean;\r\n\r\n            if (KeyEvents.detectSeekBackward(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectSeekForward(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            onSeekBackwardOrForward(event, forward);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindOffsetToSubtitle(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectDecreaseOffsetToNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const time = timeGetter();\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, time, subtitles);\r\n\r\n            if (subtitle !== null) {\r\n                const subtitleStart = subtitle.originalStart;\r\n                const newOffset = time - subtitleStart;\r\n                onOffsetChange(event, newOffset);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let adjacentSubtitleIndex = -1;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n            const diff = forward ? s.start - now : now - s.start;\r\n\r\n            if (minDiff <= diff) {\r\n                continue;\r\n            }\r\n\r\n            if (forward && now < s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = i;\r\n            } else if (!forward && now > s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\r\n            }\r\n        }\r\n\r\n        if (adjacentSubtitleIndex !== -1) {\r\n            return subtitles[adjacentSubtitleIndex];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static bindAdjustOffset(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let increase;\r\n\r\n            if (KeyEvents.detectDecreaseOffset(event)) {\r\n                increase = false;\r\n            } else if (KeyEvents.detectIncreaseOffset(event)) {\r\n                increase = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\r\n            const newOffset = currentOffset + (increase ? 100 : -100);\r\n            onOffsetChange(event, newOffset);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindToggleSubtitles(\r\n        onToggleSubtitles: (event: KeyboardEvent) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitles();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitles(event);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInVideo(\r\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrack();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrack(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInList(\r\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrackInList();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrackInList(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectPlay(event)) {\r\n                return;\r\n            }\r\n\r\n            onPlay(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAutoPause(\r\n        onAutoPause: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAutoPause(event)) {\r\n                return;\r\n            }\r\n\r\n            onAutoPause(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static _bindDown(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keydown', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keydown', handler, useCapture);\r\n    }\r\n\r\n    static _bindUp(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keyup', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keyup', handler, useCapture);\r\n    }\r\n}\r\n","export default class Mp3Encoder {\r\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const audioContext = new AudioContext();\r\n\r\n                    if (e.target === null) {\r\n                        reject(new Error(\"Could not obtain buffer to encode\"));\r\n                        return;\r\n                    }\r\n\r\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\r\n                    const channels = [];\r\n\r\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\r\n                        channels.push(audioBuffer.getChannelData(i));\r\n                    }\r\n\r\n                    const worker = workerFactory();\r\n                    worker.postMessage({\r\n                        command: 'encode',\r\n                        audioBuffer: {\r\n                            channels: channels,\r\n                            numberOfChannels: audioBuffer.numberOfChannels,\r\n                            length: audioBuffer.length,\r\n                            sampleRate: audioBuffer.sampleRate,\r\n                        },\r\n                    });\r\n                    worker.onmessage = (e) => {\r\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\r\n                        worker.terminate();\r\n                    };\r\n                    worker.onerror = (e) => {\r\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\r\n                        reject(error);\r\n                        worker.terminate();\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.bdda0d32.worker.js\");\n}\n","import Mp3Encoder from './Mp3Encoder';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport Worker from 'worker-loader!./mp3-encoder.js';\r\nconst AUDIO_TYPES: { [key: string]: string } = { 'audio/ogg;codecs=opus': 'ogg', 'audio/webm;codecs=opus': 'webm' };\r\nconst [recorderMimeType, recorderExtension] = Object.keys(AUDIO_TYPES)\r\n    .filter(MediaRecorder.isTypeSupported)\r\n    .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\r\nconst defaultMp3WorkerFactory = () => new Worker();\r\n\r\ninterface ExperimentalAudioElement extends HTMLAudioElement {\r\n    audioTracks: any;\r\n    captureStream?: () => MediaStream;\r\n    mozCaptureStream?: () => MediaStream;\r\n}\r\n\r\ninterface AudioData {\r\n    name: string;\r\n    extension: string;\r\n    play: () => Promise<void>;\r\n    blob: () => Promise<Blob>;\r\n    base64: () => Promise<string>;\r\n    slice: (start: number, end: number) => AudioData;\r\n    isSliceable: (start: number, end: number) => boolean;\r\n}\r\n\r\nclass Base64AudioData implements AudioData {\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\r\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\r\n        this.start = start;\r\n        this.end = end;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async play(): Promise<void> {\r\n        const blob = await this._blob();\r\n        const audio = new Audio();\r\n        audio.src = URL.createObjectURL(blob);\r\n        audio.preload = 'none';\r\n        audio.load();\r\n\r\n        await audio.play();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 1000);\r\n        });\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    slice(start: number, end: number): AudioData {\r\n        // Not supported\r\n        return this;\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass FileAudioData implements AudioData {\r\n    private readonly file: File;\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly trackId?: string;\r\n    private readonly _extension: string;\r\n\r\n    private _blob?: Blob;\r\n\r\n    constructor(file: File, start: number, end: number, trackId?: string) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + start + '_' + end;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.trackId = trackId;\r\n        this._extension = recorderExtension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(await this.blob());\r\n            reader.onloadend = () => {\r\n                const result = reader.result as string;\r\n                const base64 = result.substring(result.indexOf(',') + 1);\r\n                resolve(base64);\r\n            };\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n            return;\r\n        }\r\n\r\n        const audio = await this._audioElement(this._blob, false);\r\n        audio.currentTime = 0;\r\n        await audio.play();\r\n        await this._stopAudio(audio);\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    async _clipAudio(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const audio = await this._audioElement(this.file, true);\r\n\r\n            audio.oncanplay = async (e) => {\r\n                audio.play();\r\n                const stream = this._captureStream(audio);\r\n\r\n                for (const t of stream.getVideoTracks()) {\r\n                    t.stop();\r\n                }\r\n\r\n                const recorder = new MediaRecorder(stream, { mimeType: recorderMimeType });\r\n                const chunks: BlobPart[] = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                };\r\n\r\n                recorder.onstop = (e) => {\r\n                    resolve(new Blob(chunks));\r\n                };\r\n\r\n                recorder.start();\r\n                await this._stopAudio(audio);\r\n                recorder.stop();\r\n            };\r\n        });\r\n    }\r\n\r\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\r\n        const audio = new Audio() as ExperimentalAudioElement;\r\n        audio.src = URL.createObjectURL(source);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            audio.onloadedmetadata = (e) => {\r\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\r\n                    // @ts-ignore\r\n                    for (const t of audio.audioTracks) {\r\n                        t.enabled = this.trackId === t.id;\r\n                    }\r\n                }\r\n\r\n                audio.currentTime = this.start / 1000;\r\n                resolve(audio);\r\n            };\r\n        });\r\n    }\r\n\r\n    _captureStream(audio: ExperimentalAudioElement) {\r\n        if (typeof audio.captureStream === 'function') {\r\n            return audio.captureStream();\r\n        }\r\n\r\n        if (typeof audio.mozCaptureStream === 'function') {\r\n            return audio.mozCaptureStream();\r\n        }\r\n\r\n        throw new Error('Unable to capture stream from audio');\r\n    }\r\n\r\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 100);\r\n        });\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new FileAudioData(this.file, start, end, this.trackId);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass Mp3AudioData implements AudioData {\r\n    private readonly data: AudioData;\r\n    private readonly workerFactory: () => Worker;\r\n    private _blob?: Blob;\r\n\r\n    constructor(data: AudioData, workerFactory: () => Worker) {\r\n        this.data = data;\r\n        this.workerFactory = workerFactory;\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'mp3';\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            try {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(await this.blob());\r\n                reader.onloadend = () => {\r\n                    const result = reader.result as string;\r\n                    const base64 = result.substring(result.indexOf(',') + 1);\r\n                    resolve(base64);\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n\r\nexport default class AudioClip {\r\n    private readonly data: AudioData;\r\n\r\n    constructor(data: AudioData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\r\n        return new AudioClip(\r\n            new Base64AudioData(\r\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\r\n                start,\r\n                end,\r\n                base64,\r\n                extension\r\n            )\r\n        );\r\n    }\r\n\r\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\r\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name + '.' + this.data.extension;\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n\r\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\r\n        if (this.data instanceof Mp3AudioData) {\r\n            return this;\r\n        }\r\n        \r\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new AudioClip(this.data.slice(start, end));\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n","import { AnkiSettings } from './Settings';\r\n\r\nexport interface RectModel {\r\n    readonly left: number;\r\n    readonly top: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface DimensionsModel {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface SubtitleTextImage {\r\n    readonly dataUrl: string;\r\n    readonly screen: DimensionsModel;\r\n    readonly image: DimensionsModel;\r\n}\r\n\r\nexport interface SubtitleModel {\r\n    readonly text: string;\r\n    readonly textImage?: SubtitleTextImage;\r\n    readonly start: number;\r\n    readonly end: number;\r\n    readonly originalStart: number;\r\n    readonly originalEnd: number;\r\n    readonly track: number;\r\n}\r\n\r\nexport interface CopiedSubtitleModel extends SubtitleModel {\r\n    surroundingSubtitles: SubtitleModel[];\r\n    timestamp: number;\r\n    id: string;\r\n    name: string;\r\n    subtitleFile?: File;\r\n    audioFile?: File;\r\n    videoFile?: File;\r\n    audioTrack?: number;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n}\r\n\r\nexport interface ImageModel {\r\n    readonly base64: string;\r\n    readonly extension: 'jpeg';\r\n}\r\n\r\nexport interface AudioModel {\r\n    readonly base64: string;\r\n    readonly extension: 'webm' | 'mp3';\r\n    readonly paddingStart: number;\r\n    readonly paddingEnd: number;\r\n    readonly start?: number;\r\n    readonly end?: number;\r\n}\r\n\r\nexport interface AnkiDialogSliderContext {\r\n    subtitleStart: number;\r\n    subtitleEnd: number;\r\n    subtitles: SubtitleModel[];\r\n}\r\n\r\nexport interface AnkiUiState {\r\n    readonly type: 'initial' | 'resume';\r\n    readonly open: boolean;\r\n    readonly settingsProvider: AnkiSettings;\r\n    readonly subtitle: SubtitleModel;\r\n    readonly url: string;\r\n    readonly source: string;\r\n    readonly image?: ImageModel;\r\n    readonly audio?: AudioModel;\r\n    readonly themeType: string;\r\n    readonly dialogRequestedTimestamp: number;\r\n}\r\n\r\nexport interface AnkiUiInitialState extends AnkiUiState {\r\n    readonly type: 'initial';\r\n    readonly surroundingSubtitles: SubtitleModel[];\r\n}\r\n\r\nexport interface AnkiUiResumeState extends AnkiUiState {\r\n    readonly type: 'resume';\r\n\r\n    readonly text: string;\r\n    readonly initialTimestampInterval: number[];\r\n    readonly timestampInterval: number[];\r\n    readonly sliderContext: AnkiDialogSliderContext;\r\n    readonly definition: string;\r\n    readonly word: string;\r\n    readonly customFieldValues: { [key: string]: string };\r\n    readonly lastAppliedTimestampIntervalToText: number[];\r\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\r\n}\r\n\r\nexport interface AnkiUiSavedState {\r\n    subtitle: SubtitleModel;\r\n    text: string;\r\n    sliderContext: AnkiDialogSliderContext;\r\n    definition: string;\r\n    image?: ImageModel;\r\n    audio?: AudioModel;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    timestampInterval: number[];\r\n    initialTimestampInterval: number[];\r\n    lastAppliedTimestampIntervalToText: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    dialogRequestedTimestamp: number;\r\n}\r\n\r\nexport interface VideoDataSubtitleTrack {\r\n    label: string;\r\n    language: string;\r\n    url: string;\r\n}\r\n\r\nexport interface ConfirmedVideoDataSubtitleTrack {\r\n    name: string;\r\n    language: string;\r\n    subtitleUrl: string;\r\n}\r\n\r\nexport interface VideoData {\r\n    basename: string;\r\n    error?: string;\r\n    subtitles: VideoDataSubtitleTrack[];\r\n    extension: string;\r\n}\r\n\r\nexport interface VideoDataUiState {\r\n    open?: boolean;\r\n    isLoading?: boolean;\r\n    suggestedName?: string;\r\n    subtitles?: VideoDataSubtitleTrack[];\r\n    error?: string;\r\n    themeType?: string;\r\n    selectedSubtitle?: string;\r\n    showSubSelect?: boolean;\r\n}\r\n\r\nexport interface VideoTabModel {\r\n    id: number; // Actually the tab ID\r\n    title?: string;\r\n    src: string; // Video src\r\n}\r\n\r\nexport interface Rgb {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n}\r\n\r\nexport interface AudioTrackModel {\r\n    id: string;\r\n    label: string;\r\n    language: string;\r\n}\r\n\r\nexport enum PostMineAction {\r\n    none = 0,\r\n    showAnkiDialog = 1,\r\n    updateLastCard = 2,\r\n}\r\n\r\nexport enum AutoPausePreference {\r\n    atStart = 1,\r\n    atEnd = 2,\r\n}\r\n\r\nexport enum PlayMode {\r\n    normal = 1,\r\n    condensed = 2,\r\n    autoPause = 3,\r\n}\r\n","export default class CanvasResizer {\r\n    resize(\r\n        canvas: HTMLCanvasElement,\r\n        ctx: CanvasRenderingContext2D,\r\n        maxWidth: number,\r\n        maxHeight: number\r\n    ): Promise<HTMLCanvasElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\r\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\r\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\r\n\r\n            if (ratio < 1) {\r\n                const newWidth = canvas.width * ratio;\r\n                const newHeight = canvas.height * ratio;\r\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\r\n                    .then((sprite) => {\r\n                        canvas.width = newWidth;\r\n                        canvas.height = newHeight;\r\n                        ctx.drawImage(sprite, 0, 0);\r\n                        resolve(canvas);\r\n                    })\r\n                    .catch((e) => reject(e));\r\n            } else {\r\n                resolve(canvas);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import CanvasResizer from './CanvasResizer';\r\n\r\nclass Base64ImageData implements ImageData {\r\n    private readonly _name: string;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(name: string, base64: string, extension: string) {\r\n        this._name = name;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    async dataUrl() {\r\n        return this._dataUrl();\r\n    }\r\n\r\n    _dataUrl() {\r\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\r\n    }\r\n}\r\n\r\nclass FileImageData implements ImageData {\r\n    private readonly file: File;\r\n    private readonly timestamp: number;\r\n    private readonly maxWidth: number;\r\n    private readonly maxHeight: number;\r\n    private readonly _name: string;\r\n\r\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\r\n        this.timestamp = timestamp;\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    async base64(): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            const dataUrl = canvas.toDataURL('image/jpeg');\r\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\r\n        });\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            canvas.toBlob((blob) => {\r\n                if (blob === null) {\r\n                    reject(new Error('Could not obtain blob'));\r\n                } else {\r\n                    resolve(blob);\r\n                }\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    async dataUrl() {\r\n        const canvas = await this._canvas();\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    async _canvas(): Promise<HTMLCanvasElement> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const video = this._videoElement(this.file);\r\n\r\n            video.oncanplay = async (e) => {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.videoWidth;\r\n                canvas.height = video.videoHeight;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\r\n                    const resizer = new CanvasResizer();\r\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\r\n                    resolve(canvas);\r\n                } else {\r\n                    resolve(canvas);\r\n                }\r\n                URL.revokeObjectURL(video.src);\r\n            };\r\n        });\r\n    }\r\n\r\n    _videoElement(source: File) {\r\n        const video = document.createElement('video');\r\n        video.src = URL.createObjectURL(source);\r\n        video.preload = 'none';\r\n        video.currentTime = this.timestamp / 1000;\r\n        video.load();\r\n\r\n        return video;\r\n    }\r\n}\r\n\r\ninterface ImageData {\r\n    name: string;\r\n    base64: () => Promise<string>;\r\n    dataUrl: () => Promise<string>;\r\n    blob: () => Promise<Blob>;\r\n}\r\n\r\nexport default class Image {\r\n    private readonly data: ImageData;\r\n\r\n    constructor(data: ImageData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\r\n        const imageName =\r\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\r\n            '_' +\r\n            Math.floor(timestamp) +\r\n            '.' +\r\n            extension;\r\n        return new Image(new Base64ImageData(imageName, base64, extension));\r\n    }\r\n\r\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async dataUrl() {\r\n        return await this.data.dataUrl();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.data.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n}\r\n","export interface Fetcher {\r\n    fetch: (url: string, body: any) => Promise<any>;\r\n}\r\n\r\nexport class HttpFetcher implements Fetcher {\r\n    async fetch(url: string, body: any) {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n        });\r\n        return await response.json();\r\n    }\r\n}\r\n","import AudioClip from './AudioClip';\r\nimport Image from './Image';\r\nimport { HttpFetcher, Fetcher } from './Fetcher';\r\nimport { AnkiSettings } from './Settings';\r\n\r\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\r\nconst fileNameSpecialCharacters = [':', '/', '\\\\', '<', '>', '\"', '|', '?', '*', '^'];\r\n\r\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\r\n\r\nexport class Anki {\r\n    private readonly settingsProvider: AnkiSettings;\r\n    private readonly fetcher: Fetcher;\r\n\r\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\r\n        this.settingsProvider = settingsProvider;\r\n        this.fetcher = fetcher;\r\n    }\r\n\r\n    async deckNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'findNotes',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'guiBrowse',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    _escapeQuery(query: string) {\r\n        let escaped = '';\r\n\r\n        for (let i = 0; i < query.length; ++i) {\r\n            const char = query[i];\r\n            if (ankiQuerySpecialCharacters.includes(char)) {\r\n                escaped += `\\\\${char}`;\r\n            } else {\r\n                escaped += char;\r\n            }\r\n        }\r\n\r\n        return `\"${escaped}\"`;\r\n    }\r\n\r\n    async requestPermission(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async export(\r\n        text: string | undefined,\r\n        definition: string | undefined,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string | undefined,\r\n        source: string | undefined,\r\n        url: string | undefined,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode,\r\n        ankiConnectUrl?: string\r\n    ) {\r\n        const fields = {};\r\n\r\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\r\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\r\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\r\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\r\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\r\n\r\n        if (customFieldValues) {\r\n            for (const customFieldName of Object.keys(customFieldValues)) {\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.customAnkiFields[customFieldName],\r\n                    customFieldValues[customFieldName],\r\n                    true\r\n                );\r\n            }\r\n        }\r\n\r\n        const params: any = {\r\n            note: {\r\n                deckName: this.settingsProvider.deck,\r\n                modelName: this.settingsProvider.noteType,\r\n                tags: tags,\r\n                options: {\r\n                    allowDuplicate: false,\r\n                    duplicateScope: 'deck',\r\n                    duplicateScopeOptions: {\r\n                        deckName: this.settingsProvider.deck,\r\n                        checkChildren: false,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const gui = mode === 'gui';\r\n\r\n        if (this.settingsProvider.audioField && audioClip) {\r\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\r\n\r\n            if (gui) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\r\n            } else {\r\n                params.note['audio'] = {\r\n                    filename: sanitizedName,\r\n                    data: await audioClip.base64(),\r\n                    fields: [this.settingsProvider.audioField],\r\n                };\r\n            }\r\n        }\r\n\r\n        if (this.settingsProvider.imageField && image) {\r\n            const sanitizedName = this._sanitizeFileName(image.name);\r\n\r\n            if (gui) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.imageField,\r\n                    `<div><img src=\"${fileName}\"></div>`,\r\n                    false\r\n                );\r\n            } else {\r\n                params.note['picture'] = {\r\n                    filename: sanitizedName,\r\n                    data: await image.base64(),\r\n                    fields: [this.settingsProvider.imageField],\r\n                };\r\n            }\r\n        }\r\n\r\n        params.note['fields'] = fields;\r\n\r\n        switch (mode) {\r\n            case 'gui':\r\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\r\n            case 'updateLast':\r\n                const recentNotes = (\r\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\r\n                ).result.sort();\r\n\r\n                if (recentNotes.length === 0) {\r\n                    throw new Error('Could not find note to update');\r\n                }\r\n\r\n                const lastNoteId = recentNotes[recentNotes.length - 1];\r\n                params.note['id'] = lastNoteId;\r\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\r\n\r\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\r\n                    const info = infoResponse.result[0];\r\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\r\n\r\n                    if (!this.settingsProvider.wordField || !info.fields) {\r\n                        return info.noteId;\r\n                    }\r\n\r\n                    const wordField = info.fields[this.settingsProvider.wordField];\r\n\r\n                    if (!wordField || !wordField.value) {\r\n                        return info.noteId;\r\n                    }\r\n\r\n                    return wordField.value;\r\n                }\r\n\r\n                throw new Error('Could not update last card because the card info could not be fetched');\r\n            case 'default':\r\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\r\n            default:\r\n                throw new Error('Unknown export mode: ' + mode);\r\n        }\r\n    }\r\n\r\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\r\n        if (!fieldName || !value) {\r\n            return;\r\n        }\r\n\r\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\r\n        const existingValue = fields[fieldName];\r\n\r\n        if (existingValue) {\r\n            newValue = existingValue + '<br>' + newValue;\r\n        }\r\n\r\n        fields[fieldName] = newValue;\r\n    }\r\n\r\n    _sanitizeFileName(name: string) {\r\n        let sanitized = '';\r\n\r\n        for (let i = 0; i < name.length; ++i) {\r\n            const char = name[i];\r\n\r\n            if (fileNameSpecialCharacters.includes(char)) {\r\n                sanitized += '_';\r\n            } else {\r\n                sanitized += char;\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\r\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\r\n    }\r\n\r\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\r\n        const body: any = {\r\n            action: action,\r\n            version: 6,\r\n        };\r\n\r\n        if (params) {\r\n            body['params'] = params;\r\n        }\r\n\r\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\r\n\r\n        if (json.error) {\r\n            throw new Error(json.error);\r\n        }\r\n\r\n        return json;\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\n\r\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\r\n    const totalSeconds = Math.floor(timestamp / 1000);\r\n    let seconds;\r\n\r\n    if (nearestTenth) {\r\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\r\n    } else {\r\n        seconds = totalSeconds % 60;\r\n    }\r\n\r\n    const minutes = Math.floor(totalSeconds / 60) % 60;\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n\r\n    if (hours > 0) {\r\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\r\n    }\r\n\r\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\r\n}\r\n\r\nexport function surroundingSubtitles(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    countRadius: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    let startIndex = index;\r\n\r\n    for (let i = index; i >= 0; --i) {\r\n        startIndex = i;\r\n\r\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let endIndex = startIndex;\r\n\r\n    for (let i = index; i <= subtitles.length - 1; ++i) {\r\n        endIndex = i;\r\n\r\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return subtitles.slice(startIndex, endIndex + 1);\r\n}\r\n\r\nexport function mockSurroundingSubtitles(\r\n    middleSubtitle: SubtitleModel,\r\n    maxTimestamp: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    const subtitles = [middleSubtitle];\r\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\r\n\r\n    if (middleSubtitle.end < maxTimestamp) {\r\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\r\n        subtitles.push({\r\n            text: '',\r\n            start: middleSubtitle.end,\r\n            end: afterTimestamp,\r\n            originalStart: middleSubtitle.end - offset,\r\n            originalEnd: afterTimestamp - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    if (middleSubtitle.start > 0) {\r\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\r\n        subtitles.unshift({\r\n            text: '',\r\n            start: beforeTimestamp,\r\n            end: middleSubtitle.start,\r\n            originalStart: beforeTimestamp - offset,\r\n            originalEnd: middleSubtitle.start - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    return subtitles;\r\n}\r\n\r\nfunction atBoundary(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    initialIndex: number,\r\n    countRadius: number,\r\n    timeRadius: number,\r\n    sign: boolean\r\n): boolean {\r\n    let next;\r\n\r\n    if (sign) {\r\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\r\n    } else {\r\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\r\n    }\r\n\r\n    if (\r\n        Math.abs(initialIndex - index) >= countRadius &&\r\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nconst useAlertStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        top: 80,\r\n        width: '100%',\r\n        pointerEvents: 'none',\r\n        zIndex: 2000,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    autoHideDuration: number;\r\n    onClose: () => void;\r\n    severity: Color | undefined;\r\n    children: React.ReactNode\r\n}\r\n\r\nexport default function Alert(props: Props) {\r\n    const classes = useAlertStyles();\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [props.open, props.autoHideDuration, props.onClose]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grow in={props.open}>\r\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\r\n            </Grow>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\r\n\r\nfunction extractTagsFromString(value: string) {\r\n    const splitTags = value.split(' ').join('').split(',');\r\n    const tags = [];\r\n\r\n    for (const tag of splitTags) {\r\n        tags.push(tag.trim());\r\n    }\r\n\r\n    return tags;\r\n}\r\n\r\nexport interface Props {\r\n    tags: string[];\r\n    onTagsChange: (tags: string[]) => void;\r\n}\r\n\r\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        const tagsString = tags.join(', ');\r\n\r\n        if (tagsString !== value) {\r\n            setValue(tags.join(', '));\r\n        }\r\n    }, [value, tags]);\r\n\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        let currentValue = e.target.value;\r\n\r\n        if (\r\n            value.length > currentValue.length &&\r\n            value.includes(currentValue) &&\r\n            currentValue.endsWith(',')\r\n        ) {\r\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\r\n            currentValue = currentValue.substring(0, currentValue.length - 1);\r\n        }\r\n\r\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\r\n        const newTags = extractTagsFromString(currentValue);\r\n        setValue(newTags.join(', '));\r\n        onTagsChange(newTags);\r\n    }, [value, onTagsChange]);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={value}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Image as CommonImage } from '@project/common';\r\n\r\ninterface ImageDimensions {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    image: ({ width, height }: ImageDimensions) => ({\r\n        width: width,\r\n        height: height,\r\n        backgroundSize: 'contain',\r\n    }),\r\n}));\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n\r\n    return size;\r\n}\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    image?: CommonImage;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function ImageDialog({ open, image, onClose }: Props) {\r\n    const [dataUrl, setDataUrl] = useState<string>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const [windowWidth, windowHeight] = useWindowSize();\r\n\r\n    let resizeRatio;\r\n\r\n    if (width > 0 && height > 0) {\r\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\r\n    } else {\r\n        resizeRatio = 1;\r\n    }\r\n\r\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\r\n\r\n    useEffect(() => {\r\n        setDataUrl(undefined);\r\n        async function fetchImage() {\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            const dataUrl = await image.dataUrl();\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                setWidth(img.width);\r\n                setHeight(img.height);\r\n                setDataUrl(dataUrl);\r\n            };\r\n            img.src = dataUrl;\r\n        }\r\n\r\n        fetchImage();\r\n    }, [image]);\r\n\r\n    if (!image || !dataUrl) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\r\n            <Card>\r\n                <CardMedia\r\n                    className={classes.image}\r\n                    image={dataUrl}\r\n                    title={image.name}\r\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\r\n                />\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { SubtitleModel } from '../..';\r\n\r\ninterface Props {\r\n    subtitle: SubtitleModel;\r\n    availableWidth: number;\r\n    scale: number;\r\n}\r\n\r\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\r\n    if (subtitle.textImage === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\r\n    const width = imageScale * subtitle.textImage.image.width;\r\n\r\n    return (\r\n        <div style={{ maxWidth: width }}>\r\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Anki,\r\n    AnkiDialogSliderContext,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiSettings,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Slider, { Mark } from '@material-ui/core/Slider';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport SubtitleTextImage from './SubtitleTextImage';\r\nimport TagsTextField from './TagsTextField';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    mediaField: {\r\n        cursor: 'pointer',\r\n        '& input': {\r\n            cursor: 'pointer',\r\n        },\r\n    },\r\n    rangeSelectSlider: {\r\n        '& .MuiSlider-markLabel': {\r\n            transform: 'translateX(-3%)',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\r\n    let min = null;\r\n    let max = null;\r\n\r\n    for (const s of sliderContext.subtitles) {\r\n        if (min === null || s.start < min) {\r\n            min = s.start;\r\n        }\r\n\r\n        if (max === null || s.end > max) {\r\n            max = s.end;\r\n        }\r\n    }\r\n\r\n    return min !== null && max !== null && [min, max];\r\n}\r\n\r\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\r\n    const seenTimestamps: any = {};\r\n\r\n    return sliderContext.subtitles\r\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\r\n        .map((s) => {\r\n            if (s.start in seenTimestamps) {\r\n                return null;\r\n            }\r\n\r\n            seenTimestamps[s.start] = true;\r\n\r\n            return {\r\n                value: s.start,\r\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\r\n            };\r\n        })\r\n        .filter((mark: Mark | null) => mark !== null)\r\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\r\n}\r\n\r\nfunction sliderValueLabelFormat(ms: number) {\r\n    return humanReadableTime(ms, true);\r\n}\r\n\r\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\r\n    return (\r\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\r\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\r\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\r\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\r\n    );\r\n}\r\n\r\ninterface ValueLabelComponentProps {\r\n    children: React.ReactElement;\r\n    open: boolean;\r\n    value: number;\r\n}\r\n\r\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\r\n    return (\r\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\ninterface TextImageSetProps {\r\n    selectedSubtitles: SubtitleModel[];\r\n    width: number;\r\n}\r\n\r\nconst useTextImageSetStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: theme.spacing(1),\r\n        padding: theme.spacing(1),\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n    },\r\n}));\r\n\r\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\r\n    const classes = useTextImageSetStyles();\r\n\r\n    if (selectedSubtitles.length === 0 || width <= 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={0} className={classes.root}>\r\n            {selectedSubtitles.map((s, index) => {\r\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\r\n            })}\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst TextFieldEndAdornment = withStyles({\r\n    // Hack to recenter TextField end adornment\r\n    root: {\r\n        transform: 'translateY(-8px)',\r\n    },\r\n})(InputAdornment);\r\n\r\nexport interface AnkiDialogState {\r\n    text: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    definition: string;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    initialTimestampInterval?: number[];\r\n    timestampInterval?: number[];\r\n}\r\n\r\ninterface AnkiDialogProps {\r\n    open: boolean;\r\n    disabled: boolean;\r\n    text?: string;\r\n    onProceed: (\r\n        text: string,\r\n        definition: string,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string,\r\n        source: string,\r\n        url: string,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode\r\n    ) => void;\r\n    onRerecord?: () => void;\r\n    onRewind: () => void;\r\n    onCancel: () => void;\r\n    onViewImage: (image: Image) => void;\r\n    onOpenSettings?: () => void;\r\n    audioClip?: AudioClip;\r\n    image?: Image;\r\n    source?: string;\r\n    url?: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    settingsProvider: AnkiSettings;\r\n    anki: Anki;\r\n    definition?: string;\r\n    word?: string;\r\n    customFields: { [key: string]: string };\r\n    customFieldValues?: { [key: string]: string };\r\n    initialTimestampInterval?: number[];\r\n    timestampInterval?: number[];\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\r\n}\r\n\r\nexport function AnkiDialog({\r\n    open,\r\n    disabled,\r\n    text: initialText,\r\n    onProceed,\r\n    onRewind,\r\n    onCancel,\r\n    onViewImage,\r\n    onOpenSettings,\r\n    onRerecord,\r\n    audioClip: initialAudioClip,\r\n    image,\r\n    source: initialSource,\r\n    url: initialUrl,\r\n    sliderContext,\r\n    customFields,\r\n    settingsProvider,\r\n    anki,\r\n    definition: initialDefinition,\r\n    word: initialWord,\r\n    customFieldValues: initialCustomFieldValues,\r\n    timestampInterval: initialSelectedTimestampInterval,\r\n    initialTimestampInterval: forceInitialTimestampInterval,\r\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\r\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\r\n    stateRef,\r\n}: AnkiDialogProps) {\r\n    const classes = useStyles();\r\n    const [definition, setDefinition] = useState<string>('');\r\n    const [text, setText] = useState<string>('');\r\n    const [word, setWord] = useState<string>('');\r\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\r\n    const [source, setSource] = useState<string>(initialSource ?? '');\r\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\r\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\r\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\r\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\r\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\r\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\r\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\r\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\r\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\r\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [audioClip, setAudioClip] = useState<AudioClip>();\r\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\r\n        setWidth(element?.getBoundingClientRect().width ?? 0);\r\n    }, []);\r\n\r\n    if (stateRef) {\r\n        stateRef.current = {\r\n            text,\r\n            sliderContext,\r\n            definition,\r\n            word,\r\n            source,\r\n            url,\r\n            customFieldValues,\r\n            initialTimestampInterval,\r\n            lastAppliedTimestampIntervalToText,\r\n            lastAppliedTimestampIntervalToAudio,\r\n            timestampInterval,\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        setText(initialText ?? '');\r\n        setDefinition(initialDefinition ?? '');\r\n        setWord(initialWord ?? '');\r\n        setSource(initialSource ?? '');\r\n        setUrl(initialUrl ?? '');\r\n        setDuplicateNotes([]);\r\n        setCustomFieldValues(initialCustomFieldValues ?? {});\r\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\r\n\r\n    useEffect(() => {\r\n        setTags(settingsProvider.tags);\r\n    }, [settingsProvider.tags]);\r\n\r\n    useEffect(() => {\r\n        const timestampInterval =\r\n            initialSelectedTimestampInterval ||\r\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\r\n            undefined;\r\n        const timestampBoundaryInterval =\r\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\r\n        const timestampMarks =\r\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || timestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\r\n\r\n        setTimestampInterval(timestampInterval);\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\r\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\r\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\r\n        setTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setTimestampMarks(timestampMarks);\r\n    }, [\r\n        sliderContext,\r\n        forceInitialTimestampInterval,\r\n        initialSelectedTimestampInterval,\r\n        initialLastAppliedTimestampIntervalToText,\r\n        initialLastAppliedTimestampIntervalToAudio,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!initialAudioClip) {\r\n            setAudioClip(undefined);\r\n            return;\r\n        }\r\n\r\n        let newAudioClip = initialAudioClip;\r\n\r\n        if (settingsProvider.preferMp3) {\r\n            newAudioClip = newAudioClip.toMp3();\r\n        }\r\n\r\n        if (lastAppliedTimestampIntervalToAudio) {\r\n            newAudioClip = newAudioClip.slice(\r\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\r\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\r\n            );\r\n        }\r\n\r\n        setAudioClip(newAudioClip);\r\n    }, [\r\n        initialAudioClip,\r\n        settingsProvider.preferMp3,\r\n        lastAppliedTimestampIntervalToAudio,\r\n        settingsProvider.audioPaddingStart,\r\n        settingsProvider.audioPaddingEnd,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setWordTimestamp(Date.now());\r\n    }, [word]);\r\n\r\n    useEffect(() => {\r\n        if (!word || !settingsProvider.wordField) {\r\n            return;\r\n        }\r\n\r\n        const trimmedWord = word.trim();\r\n\r\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\r\n            return;\r\n        }\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\r\n                setLastSearchedWord(trimmedWord);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\r\n\r\n    const handlePlayAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            audioClip!.play();\r\n        },\r\n        [audioClip]\r\n    );\r\n\r\n    const handleCustomFieldChange = useCallback(\r\n        (customFieldName: string, value: string) => {\r\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\r\n            Object.assign(newCustomFieldValues, customFieldValues);\r\n            newCustomFieldValues[customFieldName] = value;\r\n            setCustomFieldValues(newCustomFieldValues);\r\n        },\r\n        [customFieldValues]\r\n    );\r\n\r\n    let wordHelperText;\r\n\r\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\r\n        wordHelperText =\r\n            duplicateNotes.length > 0\r\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\r\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\r\n    } else {\r\n        wordHelperText = '';\r\n    }\r\n\r\n    const handleViewImage = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            onViewImage(image!);\r\n        },\r\n        [image, onViewImage]\r\n    );\r\n\r\n    const handleTimestampIntervalChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\r\n            const timestampInterval = newValue as number[];\r\n            setTimestampInterval(timestampInterval);\r\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\r\n                subtitleIntersectsTimeInterval(s, timestampInterval)\r\n            );\r\n            setSelectedSubtitles(selectedSubtitles);\r\n        },\r\n        [sliderContext]\r\n    );\r\n\r\n    const handleApplyTimestampIntervalToText = useCallback(() => {\r\n        const interval = timestampInterval!;\r\n        const newText = sliderContext!.subtitles\r\n            .filter((s) => subtitleIntersectsTimeInterval(s, interval))\r\n            .map((s) => s.text)\r\n            .join('\\n');\r\n\r\n        setText(newText);\r\n        setLastAppliedTimestampIntervalToText(timestampInterval);\r\n    }, [timestampInterval, sliderContext]);\r\n\r\n    const handleApplyTimestampIntervalToAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            if (onRerecord) {\r\n                e.stopPropagation();\r\n                onRerecord();\r\n            } else {\r\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n            }\r\n        },\r\n        [onRerecord, timestampInterval]\r\n    );\r\n\r\n    const handleResetTimestampInterval = useCallback(() => {\r\n        if (!initialTimestampBoundaryInterval) {\r\n            return;\r\n        }\r\n\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || initialTimestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setTimestampInterval(initialTimestampInterval);\r\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\r\n        setTimestampMarks(\r\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\r\n        );\r\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\r\n\r\n    const handleZoomInTimestampInterval = useCallback(() => {\r\n        if (!timestampBoundaryInterval || !timestampInterval) {\r\n            return;\r\n        }\r\n\r\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\r\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\r\n        const newTimestampBoundaryInterval = [newMin, newMax];\r\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\r\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\r\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\r\n\r\n    const disableApplyTextSelection =\r\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\r\n\r\n    return (\r\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Anki Export\r\n                </Typography>\r\n                {onOpenSettings && (\r\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                )}\r\n            </Toolbar>\r\n            <DialogContent ref={dialogRefCallback}>\r\n                <form className={classes.root}>\r\n                    {sliderContext && timestampInterval && (\r\n                        <TextImageSet\r\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\r\n                            width={width}\r\n                        />\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        maxRows={8}\r\n                        label=\"Sentence\"\r\n                        value={text}\r\n                        onChange={(e) => setText(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: timestampInterval && (\r\n                                <TextFieldEndAdornment position=\"end\">\r\n                                    <Tooltip title=\"Apply Selection\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    !timestampInterval ||\r\n                                                    !lastAppliedTimestampIntervalToText ||\r\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\r\n                                                        timestampInterval[1] ===\r\n                                                            lastAppliedTimestampIntervalToText[1]) ||\r\n                                                    disableApplyTextSelection\r\n                                                }\r\n                                                onClick={handleApplyTimestampIntervalToText}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <DoneIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </TextFieldEndAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        rows={8}\r\n                        label=\"Definition\"\r\n                        value={definition}\r\n                        onChange={(e) => setDefinition(e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Word\"\r\n                        value={word}\r\n                        onChange={(e) => setWord(e.target.value)}\r\n                        helperText={wordHelperText}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Tooltip title=\"Search in Anki\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    disabled ||\r\n                                                    !settingsProvider.wordField ||\r\n                                                    !word ||\r\n                                                    word.trim() === ''\r\n                                                }\r\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <SearchIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {Object.keys(customFields).map((customFieldName) => (\r\n                        <TextField\r\n                            key={customFieldName}\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            multiline\r\n                            maxRows={8}\r\n                            label={customFieldName}\r\n                            value={customFieldValues[customFieldName] || ''}\r\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                        />\r\n                    ))}\r\n                    {audioClip && (\r\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={audioClip.name}\r\n                                label=\"Audio\"\r\n                                InputProps={{\r\n                                    endAdornment: timestampInterval && (\r\n                                        <InputAdornment position=\"end\">\r\n                                            {onRerecord ? (\r\n                                                <Tooltip title=\"Apply Selection (rerecord)\">\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !timestampInterval ||\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1])\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            ) : (\r\n                                                <Tooltip title={'Apply Selection'}>\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1]) ||\r\n                                                                !audioClip.isSliceable(\r\n                                                                    timestampInterval[0],\r\n                                                                    timestampInterval[1]\r\n                                                                )\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {image && (\r\n                        <div className={classes.mediaField} onClick={handleViewImage}>\r\n                            <TextField variant=\"filled\" color=\"secondary\" fullWidth value={image.name} label=\"Image\" />\r\n                        </div>\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Source\"\r\n                        value={source}\r\n                        onChange={(e) => setSource(e.target.value)}\r\n                    />\r\n                    {initialUrl && (\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            label=\"URL\"\r\n                            value={url}\r\n                            onChange={(e) => setUrl(e.target.value)}\r\n                        />\r\n                    )}\r\n                    {settingsProvider.tags.length > 0 && (\r\n                        <TagsTextField\r\n                            variant=\"filled\"\r\n                            label=\"Tags\"\r\n                            helperText=\"Comma-separated list of strings\"\r\n                            fullWidth\r\n                            color=\"secondary\"\r\n                            tags={tags}\r\n                            onTagsChange={(newTags) => setTags(newTags)}\r\n                        />\r\n                    )}\r\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                                <Slider\r\n                                    ValueLabelComponent={ValueLabelComponent}\r\n                                    value={timestampInterval}\r\n                                    valueLabelFormat={sliderValueLabelFormat}\r\n                                    onChange={handleTimestampIntervalChange}\r\n                                    min={timestampBoundaryInterval[0]}\r\n                                    max={timestampBoundaryInterval[1]}\r\n                                    marks={timestampMarks}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    className={classes.rangeSelectSlider}\r\n                                    color=\"secondary\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Reset\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleResetTimestampInterval}\r\n                                        >\r\n                                            <RestoreIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Zoom In\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleZoomInTimestampInterval}\r\n                                        >\r\n                                            <ZoomInIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button disabled={disabled} onClick={() => onCancel()}>\r\n                    Cancel\r\n                </Button>\r\n                {sliderContext && (\r\n                    <Button disabled={disabled} onClick={() => onRewind()}>\r\n                        Rewind\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'gui'\r\n                        )\r\n                    }\r\n                >\r\n                    Open in Anki\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'updateLast'\r\n                        )\r\n                    }\r\n                >\r\n                    Update Last Card\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'default'\r\n                        )\r\n                    }\r\n                >\r\n                    Export\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport coloredBackground from './background-colored.png';\r\nimport { Theme } from '@material-ui/core';\r\n\r\ninterface StylesProps {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n}\r\n\r\ninterface Props {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    root: ({ dragging, appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\r\n        width: '100%',\r\n        zIndex: 101,\r\n        pointerEvents: dragging ? 'auto' : 'none',\r\n    }),\r\n    transparentBackground: ({ appBarHidden }) => ({\r\n        '&::before': {\r\n            content: \"' '\",\r\n            position: 'absolute',\r\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            backgroundSize: '300px 300px',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(${coloredBackground})`,\r\n            backgroundBlendMode: 'overlay',\r\n            background: 'rgba(0, 0, 0, .3)',\r\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\r\n        },\r\n        width: '100%',\r\n        height: '100%',\r\n    }),\r\n}));\r\n\r\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\r\n    const classes = useStyles({ dragging, appBarHidden });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fade in={dragging || loading}>\r\n                <div className={classes.transparentBackground} />\r\n            </Fade>\r\n        </div>\r\n    );\r\n}\r\n","import { BufferAdapter } from \"./buffer\";\r\n\r\nexport enum SegmentType {\r\n    pds = 20,\r\n    ods = 21,\r\n    pcs = 22,\r\n    wds = 23,\r\n    end = 128,\r\n}\r\n\r\nconst segmentTypeValues = Object.values(SegmentType);\r\n\r\nexport function segmentTypeFromByte(byte: number) {\r\n    for (const type of segmentTypeValues) {\r\n        if (byte === type) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid segment type byte: ${byte}`);\r\n}\r\n\r\nexport enum CompositionState {\r\n    normal = 0,\r\n    acquisitionState = 64,\r\n    epochStart = 128,\r\n}\r\n\r\nconst compositionStateValues = Object.values(CompositionState);\r\n\r\nexport function compositionStateFromByte(byte: number) {\r\n    for (const state of compositionStateValues) {\r\n        if (byte === state) {\r\n            return state;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid composition state byte: ${byte}`);\r\n}\r\n\r\nexport function paletteUpdateFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 128:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid palette update flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport function objectCroppedFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 64:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid object cropped flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport enum LastInSequenceFlag {\r\n    lastInSequence = 64,\r\n    firstInSequence = 128,\r\n    firstAndLastInSequence = 192,\r\n}\r\n\r\nconst lastInSequenceFlagValues = Object.values(LastInSequenceFlag);\r\n\r\nexport function lastInSequenceFlagFromByte(byte: number) {\r\n    for (const flag of lastInSequenceFlagValues) {\r\n        if (byte === flag) {\r\n            return flag;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid last in sequence flag byte: ${byte}`);\r\n}\r\n\r\nexport interface SegmentHeader {\r\n    presentationTimestamp: number;\r\n    decodingTimestamp: number;\r\n    segmentType: SegmentType;\r\n    segmentSize: number;\r\n}\r\n\r\nexport interface Segment {\r\n    readonly header: SegmentHeader;\r\n}\r\n\r\nexport interface PresentationCompositionSegment extends Segment {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly compositionNumber: number;\r\n    readonly compositionState: CompositionState;\r\n    readonly paletteUpdateFlag: boolean;\r\n    readonly paletteId: number;\r\n    readonly compositionObjectCount: number;\r\n    readonly objectId: number;\r\n    readonly windowId: number;\r\n    readonly objectCroppedFlag: boolean;\r\n    readonly objectHorizontalPosition: number;\r\n    readonly objectVerticalPosition: number;\r\n    readonly objectCroppingHorizontalPosition: number;\r\n    readonly objectCroppingVerticalPosition: number;\r\n    readonly objectCroppingWidth: number;\r\n    readonly objectCroppingHeightPosition: number;\r\n}\r\n\r\nexport interface WindowDefinition {\r\n    readonly windowId: number;\r\n    readonly windowHorizontalPosition: number;\r\n    readonly windowVerticalPosition: number;\r\n    readonly windowWidth: number;\r\n    readonly windowHeight: number;\r\n}\r\n\r\nexport interface WindowDefinitionSegment extends Segment {\r\n    readonly windowCount: number;\r\n    readonly windowDefinitions: WindowDefinition[];\r\n}\r\n\r\nexport interface PaletteEntry {\r\n    readonly paletteEntryId: number;\r\n    readonly luminance: number;\r\n    readonly colorDifferenceRed: number;\r\n    readonly colorDifferenceBlue: number;\r\n    readonly transparency: number;\r\n}\r\n\r\nexport interface PaletteDefinitionSegment extends Segment {\r\n    readonly paletteId: number;\r\n    readonly paletteVersionNumber: number;\r\n    readonly paletteEntries: PaletteEntry[];\r\n}\r\n\r\nexport interface ObjectDefinitionSegment extends Segment {\r\n    readonly objectId: number;\r\n    readonly objectVersionNumber: number;\r\n    readonly lastInSequenceFlag: LastInSequenceFlag;\r\n    readonly objectDataLength: number;\r\n    readonly width?: number;\r\n    readonly height?: number;\r\n    readonly objectData: BufferAdapter;\r\n}\r\n","export interface BufferAdapter {\r\n    length: number;\r\n    at(index: number): number;\r\n    subarray(start: number, end: number): BufferAdapter;\r\n}\r\n\r\nexport class Uint8ArrayBuffer implements BufferAdapter {\r\n    private readonly buffer: Uint8Array;\r\n\r\n    constructor(buffer: Uint8Array) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    get length() {\r\n        return this.buffer.length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        return this.buffer[index];\r\n    }\r\n\r\n    subarray(start: number, end: number) {\r\n        return new Uint8ArrayBuffer(this.buffer.subarray(start, end));\r\n    }\r\n}\r\n\r\nexport class CompositeBuffer implements BufferAdapter {\r\n    private readonly buffers: BufferAdapter[] = [];\r\n\r\n    constructor(buffers: BufferAdapter[]) {\r\n        this.buffers = buffers;\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n        for (const b of this.buffers) {\r\n            length += b.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const bufferIndex = index - previousBuffersLength;\r\n\r\n            if (bufferIndex < buffer.length) {\r\n                return buffer.at(bufferIndex);\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        throw new Error('Out of bounds');\r\n    }\r\n\r\n    subarray(start: number, end: number): BufferAdapter {\r\n        const chunks: BufferAdapter[] = [];\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const startBufferIndex = Math.max(0, start - previousBuffersLength);\r\n            const endBufferIndex = Math.min(buffer.length, end - previousBuffersLength);\r\n\r\n            if (endBufferIndex > 0 && startBufferIndex < endBufferIndex) {\r\n                chunks.push(buffer.subarray(startBufferIndex, endBufferIndex));\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        return new CompositeBuffer(chunks);\r\n    }\r\n}\r\n\r\nexport class CompositeBufferReader {\r\n    private buffers: Uint8Array[] = [];\r\n\r\n    add(buffer: Uint8Array) {\r\n        this.buffers.push(buffer);\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            length += buffer.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    read(bytes: number): BufferAdapter {\r\n        if (bytes === 0) {\r\n            return new CompositeBuffer([]);\r\n        }\r\n\r\n        const chunks: Uint8Array[] = [];\r\n        let accumulated = 0;\r\n\r\n        while (true) {\r\n            if (this.buffers.length === 0) {\r\n                throw new Error('Trying to read more bytes than available');\r\n            }\r\n\r\n            const buffer = this.buffers.shift()!;\r\n            const required = bytes - accumulated;\r\n\r\n            if (buffer.length === required) {\r\n                chunks.push(buffer);\r\n                break;\r\n            } else if (buffer.length > required) {\r\n                chunks.push(buffer.subarray(0, required));\r\n                this.buffers.unshift(buffer.subarray(required, buffer.length));\r\n                break;\r\n            }\r\n\r\n            accumulated += buffer.length;\r\n            chunks.push(buffer);\r\n        }\r\n\r\n        return new CompositeBuffer(chunks.map(c => new Uint8ArrayBuffer(c)));\r\n    }\r\n}\r\n\r\nexport class BufferGenerator {\r\n    private stream: ReadableStream;\r\n    private accumulatedBuffer: CompositeBufferReader = new CompositeBufferReader();\r\n\r\n    requestedBytes: number = 0;\r\n\r\n    constructor(stream: ReadableStream) {\r\n        this.stream = stream;\r\n    }\r\n\r\n    async *buffers() {\r\n        const reader = this.stream.getReader();\r\n\r\n        while (true) {\r\n            if (this.accumulatedBuffer.length >= this.requestedBytes) {\r\n                yield this.accumulatedBuffer.read(this.requestedBytes);\r\n            } else {\r\n                const result = await reader.read();\r\n\r\n                if (result.done) {\r\n                    break;\r\n                }\r\n\r\n                this.accumulatedBuffer.add(result.value as Uint8Array);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class BufferReader {\r\n    private buffer: BufferAdapter;\r\n    private _index: number = 0;\r\n\r\n    constructor(bytes: BufferAdapter) {\r\n        this.buffer = bytes;\r\n    }\r\n\r\n    get index() {\r\n        return this._index;\r\n    }\r\n\r\n    get hasNext() {\r\n        return this._index < this.buffer.length;\r\n    }\r\n\r\n    readHex(bytes: number, limit?: number) {\r\n        if (limit !== undefined && this._index + bytes > limit) {\r\n            return 0;\r\n        }\r\n\r\n        let number = 0;\r\n        let digit = 0;\r\n        const from = this._index;\r\n        const to = this._index + bytes - 1;\r\n\r\n        for (let i = to; i >= from; --i) {\r\n            number += this.buffer.at(i) << (8 * digit);\r\n            ++digit;\r\n        }\r\n\r\n        this._index += bytes;\r\n        return number;\r\n    }\r\n\r\n    readBuffer(bytes: number) {\r\n        const buffer = this.buffer.subarray(this.index, this.index + bytes);\r\n        this._index += bytes;\r\n        return buffer;\r\n    }\r\n}\r\n","import { BufferAdapter, BufferGenerator, BufferReader, CompositeBuffer } from './buffer';\r\nimport {\r\n    CompositionState,\r\n    compositionStateFromByte,\r\n    LastInSequenceFlag,\r\n    lastInSequenceFlagFromByte,\r\n    objectCroppedFlagFromByte,\r\n    ObjectDefinitionSegment,\r\n    PaletteDefinitionSegment,\r\n    PaletteEntry,\r\n    paletteUpdateFlagFromByte,\r\n    PresentationCompositionSegment,\r\n    Segment,\r\n    SegmentHeader,\r\n    SegmentType,\r\n    segmentTypeFromByte,\r\n    WindowDefinitionSegment,\r\n} from './segment';\r\n\r\nconst pgMagicNumber = 20551; // 0x5047\r\n\r\nexport class RunLengthEncodedBuffer {\r\n    private readonly encodedBuffer: BufferAdapter;\r\n\r\n    constructor(encodedBuffer: BufferAdapter) {\r\n        this.encodedBuffer = encodedBuffer;\r\n    }\r\n\r\n    decode(callback: (x: number, y: number, color: number) => void) {\r\n        let encodedIndex = 0;\r\n        let decodedLineIndex = 0;\r\n        let currentLine = 0;\r\n        const encodedLength = this.encodedBuffer.length;\r\n\r\n        while (encodedIndex < encodedLength) {\r\n            const firstByte = this.encodedBuffer.at(encodedIndex);\r\n            let runLength;\r\n            let color;\r\n            let increment;\r\n\r\n            // Deal with each possible code\r\n            if (firstByte > 0) {\r\n                // CCCCCCCC\t- One pixel in color C\r\n                color = firstByte;\r\n                runLength = 1;\r\n                increment = 1;\r\n            } else {\r\n                const secondByte = this.encodedBuffer.at(encodedIndex + 1);\r\n\r\n                if (secondByte === 0) {\r\n                    // 00000000 00000000 - End of line\r\n                    color = 0;\r\n                    runLength = 0;\r\n                    increment = 2;\r\n                    decodedLineIndex = 0;\r\n                    ++currentLine;\r\n                } else if (secondByte < 64) {\r\n                    // 00000000 00LLLLLL - L pixels in color 0 (L between 1 and 63)\r\n                    color = 0;\r\n                    runLength = secondByte;\r\n                    increment = 2;\r\n                } else if (secondByte < 128) {\r\n                    // 00000000 01LLLLLL LLLLLLLL - L pixels in color 0 (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = 0;\r\n                    runLength = ((secondByte - 64) << 8) + thirdByte;\r\n                    increment = 3;\r\n                } else if (secondByte < 192) {\r\n                    // 00000000 10LLLLLL CCCCCCCC - L pixels in color C (L between 3 and 63)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = thirdByte;\r\n                    runLength = secondByte - 128;\r\n                    increment = 3;\r\n                } else {\r\n                    // 00000000 11LLLLLL LLLLLLLL CCCCCCCC - L pixels in color C (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    const fourthByte = this.encodedBuffer.at(encodedIndex + 3);\r\n                    color = fourthByte;\r\n                    runLength = ((secondByte - 192) << 8) + thirdByte;\r\n                    increment = 4;\r\n                }\r\n            }\r\n\r\n            if (runLength > 0) {\r\n                for (let x = decodedLineIndex; x < decodedLineIndex + runLength; ++x) {\r\n                    callback(x, currentLine, color);\r\n                }\r\n                // decodedLine.fill(color, decodedLineIndex, decodedLineIndex + runLength);\r\n                decodedLineIndex += runLength;\r\n            }\r\n\r\n            encodedIndex += increment;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DisplaySet {\r\n    readonly presentationCompositionSegment: PresentationCompositionSegment;\r\n    readonly windowDefinitionSegments: WindowDefinitionSegment[];\r\n    readonly paletteDefinitionSegments: PaletteDefinitionSegment[];\r\n    readonly objectDefinitionSegments: ObjectDefinitionSegment[];\r\n    readonly endDefinitionSegment: Segment;\r\n\r\n    private readonly previousDisplaySet?: DisplaySet;\r\n\r\n    constructor(\r\n        presentationCompositionSegment: PresentationCompositionSegment,\r\n        windowDefinitionSegments: WindowDefinitionSegment[],\r\n        paletteDefinitionSegments: PaletteDefinitionSegment[],\r\n        objectDefinitionSegments: ObjectDefinitionSegment[],\r\n        endDefinitionSegment: Segment,\r\n        previousDisplaySet?: DisplaySet\r\n    ) {\r\n        this.presentationCompositionSegment = presentationCompositionSegment;\r\n        this.windowDefinitionSegments = windowDefinitionSegments;\r\n        this.paletteDefinitionSegments = paletteDefinitionSegments;\r\n        this.objectDefinitionSegments = objectDefinitionSegments;\r\n        this.endDefinitionSegment = endDefinitionSegment;\r\n        this.previousDisplaySet = previousDisplaySet;\r\n    }\r\n\r\n    get firstOds() {\r\n        return this.objectDefinitionSegments.find(\r\n            (ods) =>\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n        );\r\n    }\r\n\r\n    protected paletteDefinitionSegment(paletteId: number): PaletteDefinitionSegment | undefined {\r\n        const pds = this.paletteDefinitionSegments.find((s) => s.paletteId === paletteId);\r\n\r\n        if (pds === undefined) {\r\n            if (this.presentationCompositionSegment.compositionState !== CompositionState.normal) {\r\n                throw new Error(`PCS references invalid PDS and composition state is not 'normal'`);\r\n            }\r\n\r\n            if (this.previousDisplaySet === undefined) {\r\n                throw new Error(`PCS references invalid PDS and no previous display set to fallback to`);\r\n            }\r\n\r\n            return this.previousDisplaySet.paletteDefinitionSegment(paletteId);\r\n        }\r\n\r\n        return pds;\r\n    }\r\n\r\n    imageData(buffer?: Uint8ClampedArray) {\r\n        const pds = this.paletteDefinitionSegment(this.presentationCompositionSegment.paletteId);\r\n\r\n        if (pds === undefined) {\r\n            throw new Error(`PCS references invalid PDS`);\r\n        }\r\n\r\n        const firstOds = this.firstOds;\r\n\r\n        if (firstOds === undefined || firstOds.width === undefined || firstOds.height === undefined) {\r\n            throw new Error(`Missing first ODS with defined width and height`);\r\n        }\r\n\r\n        const imageDataArray = buffer ?? new Uint8ClampedArray(firstOds.width * firstOds.height * 4);\r\n        const rgbaPalette = pds.paletteEntries.map((palette) => this.ycrcbToRgba(palette));\r\n        const width = firstOds.width;\r\n\r\n        new RunLengthEncodedBuffer(\r\n            new CompositeBuffer(this.objectDefinitionSegments.map((ods) => ods.objectData))\r\n        ).decode((x, y, paletteIndex) => {\r\n            const pixelIndex = y * width + x;\r\n            const imageDataOffset = pixelIndex * 4;\r\n\r\n            if (paletteIndex >= rgbaPalette.length) {\r\n                imageDataArray[imageDataOffset] = 0;\r\n                imageDataArray[imageDataOffset + 1] = 0;\r\n                imageDataArray[imageDataOffset + 2] = 0;\r\n                imageDataArray[imageDataOffset + 3] = 0;\r\n            } else {\r\n                const color = rgbaPalette[paletteIndex];\r\n                imageDataArray[imageDataOffset] = color.r;\r\n                imageDataArray[imageDataOffset + 1] = color.g;\r\n                imageDataArray[imageDataOffset + 2] = color.b;\r\n                imageDataArray[imageDataOffset + 3] = color.a;\r\n            }\r\n        });\r\n\r\n        return new ImageData(\r\n            imageDataArray.subarray(0, 4 * firstOds.width * firstOds.height),\r\n            firstOds.width,\r\n            firstOds.height\r\n        );\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/21264648/javascript-convert-yuv-to-rgb\r\n    private ycrcbToRgba(palette: PaletteEntry) {\r\n        const y = palette.luminance;\r\n        const cb = palette.colorDifferenceBlue;\r\n        const cr = palette.colorDifferenceRed;\r\n\r\n        const r = this.clamp(Math.floor(y + 1.4075 * (cr - 128)), 0, 255);\r\n        const g = this.clamp(Math.floor(y - 0.3455 * (cb - 128) - 0.7169 * (cr - 128)), 0, 255);\r\n        const b = this.clamp(Math.floor(y + 1.779 * (cb - 128)), 0, 255);\r\n        return { r, g, b, a: palette.transparency };\r\n    }\r\n\r\n    private clamp(number: number, min: number, max: number) {\r\n        return Math.max(min, Math.min(max, number));\r\n    }\r\n}\r\n\r\nexport async function* parseDisplaySets(s: ReadableStream) {\r\n    const bufferGenerator = new BufferGenerator(s);\r\n    bufferGenerator.requestedBytes = 13;\r\n\r\n    let header: SegmentHeader | undefined;\r\n    let lastDisplaySet: DisplaySet | undefined;\r\n    let presentationCompositionSegment: PresentationCompositionSegment | undefined;\r\n    let windowDefinitionSegments: WindowDefinitionSegment[] = [];\r\n    let paletteDefinitionSegments: PaletteDefinitionSegment[] = [];\r\n    let objectDefinitionSegments: ObjectDefinitionSegment[] = [];\r\n\r\n    for await (const buffer of bufferGenerator.buffers()) {\r\n        const reader = new BufferReader(buffer);\r\n\r\n        if (header) {\r\n            switch (header.segmentType) {\r\n                case SegmentType.pcs:\r\n                    if (presentationCompositionSegment !== undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    presentationCompositionSegment = parsePcsSegment(reader, header);\r\n                    break;\r\n                case SegmentType.wds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected WDS`);\r\n                    }\r\n\r\n                    windowDefinitionSegments.push(parseWdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.pds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    paletteDefinitionSegments.push(parsePdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.ods:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected ODS`);\r\n                    }\r\n\r\n                    const ods = parseOdsSegment(reader, header);\r\n                    objectDefinitionSegments.push(ods);\r\n                    break;\r\n                case SegmentType.end:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected end segment`);\r\n                    }\r\n\r\n                    const endDefinitionSegment = { header };\r\n                    lastDisplaySet = new DisplaySet(\r\n                        presentationCompositionSegment,\r\n                        windowDefinitionSegments,\r\n                        paletteDefinitionSegments,\r\n                        objectDefinitionSegments,\r\n                        endDefinitionSegment,\r\n                        lastDisplaySet\r\n                    );\r\n\r\n                    yield lastDisplaySet;\r\n\r\n                    presentationCompositionSegment = undefined;\r\n                    windowDefinitionSegments = [];\r\n                    paletteDefinitionSegments = [];\r\n                    objectDefinitionSegments = [];\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown segment type: ${header.segmentType}`);\r\n            }\r\n\r\n            header = undefined;\r\n            bufferGenerator.requestedBytes = 13;\r\n        } else {\r\n            const magicNumber = reader.readHex(2);\r\n\r\n            if (magicNumber !== pgMagicNumber) {\r\n                throw new Error(`Invalid magic number: ${magicNumber}`);\r\n            }\r\n\r\n            const presentationTimestamp = reader.readHex(4);\r\n            const decodingTimestamp = reader.readHex(4);\r\n            const segmentType = segmentTypeFromByte(reader.readHex(1));\r\n            const segmentSize = reader.readHex(2);\r\n            header = { presentationTimestamp, decodingTimestamp, segmentType, segmentSize };\r\n            bufferGenerator.requestedBytes = segmentSize;\r\n        }\r\n    }\r\n}\r\n\r\nfunction parsePcsSegment(reader: BufferReader, header: SegmentHeader): PresentationCompositionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const width = reader.readHex(2, limit);\r\n    const height = reader.readHex(2, limit);\r\n    reader.readHex(1); // ignore frame rate\r\n    const compositionNumber = reader.readHex(2, limit);\r\n    const compositionState = compositionStateFromByte(reader.readHex(1, limit));\r\n    const paletteUpdateFlag = paletteUpdateFlagFromByte(reader.readHex(1, limit));\r\n    const paletteId = reader.readHex(1, limit);\r\n    const compositionObjectCount = reader.readHex(1, limit);\r\n    const objectId = reader.readHex(2, limit);\r\n    const windowId = reader.readHex(1, limit);\r\n    const objectCroppedFlag = objectCroppedFlagFromByte(reader.readHex(1, limit));\r\n    const objectHorizontalPosition = reader.readHex(2, limit);\r\n    const objectVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingHorizontalPosition = reader.readHex(2, limit);\r\n    const objectCroppingVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingWidth = reader.readHex(2, limit);\r\n    const objectCroppingHeightPosition = reader.readHex(2, limit);\r\n\r\n    return {\r\n        header,\r\n        width,\r\n        height,\r\n        compositionNumber,\r\n        compositionState,\r\n        paletteUpdateFlag,\r\n        paletteId,\r\n        compositionObjectCount,\r\n        objectId,\r\n        windowId,\r\n        objectCroppedFlag,\r\n        objectHorizontalPosition,\r\n        objectVerticalPosition,\r\n        objectCroppingHorizontalPosition,\r\n        objectCroppingVerticalPosition,\r\n        objectCroppingWidth,\r\n        objectCroppingHeightPosition,\r\n    };\r\n}\r\n\r\nfunction parseWdsSegment(reader: BufferReader, header: SegmentHeader): WindowDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const windowCount = reader.readHex(1, limit);\r\n    const windowDefinitions = [];\r\n\r\n    for (let i = 0; i < windowCount; ++i) {\r\n        const windowId = reader.readHex(1, limit);\r\n        const windowHorizontalPosition = reader.readHex(2, limit);\r\n        const windowVerticalPosition = reader.readHex(2, limit);\r\n        const windowWidth = reader.readHex(2, limit);\r\n        const windowHeight = reader.readHex(2, limit);\r\n\r\n        windowDefinitions.push({\r\n            windowId,\r\n            windowHorizontalPosition,\r\n            windowVerticalPosition,\r\n            windowWidth,\r\n            windowHeight,\r\n        });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        windowCount,\r\n        windowDefinitions,\r\n    };\r\n}\r\n\r\nfunction parsePdsSegment(reader: BufferReader, header: SegmentHeader): PaletteDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const paletteId = reader.readHex(1, limit);\r\n    const paletteVersionNumber = reader.readHex(1, limit);\r\n    const paletteEntries: PaletteEntry[] = [];\r\n\r\n    while (reader.index < limit) {\r\n        const paletteEntryId = reader.readHex(1, limit);\r\n        const luminance = reader.readHex(1, limit);\r\n        const colorDifferenceRed = reader.readHex(1, limit);\r\n        const colorDifferenceBlue = reader.readHex(1, limit);\r\n        const transparency = reader.readHex(1, limit);\r\n        paletteEntries.push({ paletteEntryId, luminance, colorDifferenceRed, colorDifferenceBlue, transparency });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        paletteId,\r\n        paletteVersionNumber,\r\n        paletteEntries,\r\n    };\r\n}\r\n\r\nfunction parseOdsSegment(reader: BufferReader, header: SegmentHeader): ObjectDefinitionSegment {\r\n    const objectId = reader.readHex(2);\r\n    const objectVersionNumber = reader.readHex(1);\r\n    const lastInSequenceFlag = lastInSequenceFlagFromByte(reader.readHex(1));\r\n    const objectDataLength = reader.readHex(3);\r\n    let width: number | undefined;\r\n    let height: number | undefined;\r\n    let objectData: BufferAdapter;\r\n\r\n    if (\r\n        lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n        lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n    ) {\r\n        width = reader.readHex(2);\r\n        height = reader.readHex(2);\r\n        objectData = reader.readBuffer(objectDataLength - 4);\r\n    } else {\r\n        objectData = reader.readBuffer(objectDataLength);\r\n    }\r\n\r\n    return {\r\n        header,\r\n        objectId,\r\n        objectVersionNumber,\r\n        lastInSequenceFlag,\r\n        objectDataLength,\r\n        width,\r\n        height,\r\n        objectData: objectData,\r\n    };\r\n}\r\n","import { compile as parseAss } from 'ass-compiler';\r\nimport { parseSync as parseSrt } from 'subtitle';\r\nimport { WebVTT } from 'vtt.js';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport { DisplaySet, parseDisplaySets as parsePgsDisplaySets } from './pgs-parser';\r\nimport { SubtitleTextImage } from '@project/common';\r\n\r\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\r\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\r\nconst helperElement = document.createElement('div');\r\nconst helperCanvas = document.createElement('canvas');\r\n\r\ninterface SubtitleNode {\r\n    start: number;\r\n    end: number;\r\n    text: string;\r\n    textImage?: SubtitleTextImage;\r\n    track: number;\r\n}\r\n\r\nexport default class SubtitleReader {\r\n    private xmlParser?: XMLParser;\r\n\r\n    async subtitles(files: File[]) {\r\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\r\n            .flatMap((nodes) => nodes)\r\n            .sort((n1, n2) => n1.start - n2.start);\r\n    }\r\n\r\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\r\n        if (file.name.endsWith('.srt')) {\r\n            const nodes = parseSrt(await file.text());\r\n            return nodes.map((node: any) => ({\r\n                start: node.data.start,\r\n                end: node.data.end,\r\n                text: node.data.text.replace(tagRegex, ''),\r\n                track: track,\r\n            }));\r\n        }\r\n\r\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\r\n            return new Promise(async (resolve, reject) => {\r\n                const isFromNetflix = file.name.endsWith('.nfvtt');\r\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\r\n                const cues: any[] = [];\r\n                parser.oncue = (c: any) => {\r\n                    if (isFromNetflix) {\r\n                        c.text = c.text.replace(tagRegex, '');\r\n\r\n                        const lines = c.text.split('\\n');\r\n                        const newLines = [];\r\n\r\n                        for (const line of lines) {\r\n                            newLines.push(this._fixRTL(line));\r\n                        }\r\n\r\n                        c.text = newLines.join('\\n');\r\n                    }\r\n                    cues.push(c);\r\n                };\r\n                parser.onflush = () =>\r\n                    resolve(\r\n                        cues.map((c) => ({\r\n                            start: Math.floor(c.startTime * 1000),\r\n                            end: Math.floor(c.endTime * 1000),\r\n                            text: c.text as string,\r\n                            track: track,\r\n                        }))\r\n                    );\r\n                parser.parse(await file.text());\r\n                parser.flush();\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ass')) {\r\n            const nodes = parseAss(await file.text(), {});\r\n            return nodes.dialogues.map((dialogue) => {\r\n                return {\r\n                    start: Math.round(dialogue.start * 1000),\r\n                    end: Math.round(dialogue.end * 1000),\r\n                    text: dialogue.slices\r\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\r\n                        .join('')\r\n                        .replace(assNewLineRegex, '\\n'),\r\n                    track: track,\r\n                };\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ytxml')) {\r\n            const text = await file.text();\r\n            const xml = this._xmlParser().parse(text);\r\n\r\n            if (Object.keys(xml).length === 0) {\r\n                return [];\r\n            }\r\n\r\n            const textNodes = xml['transcript']['text'];\r\n            const subtitles = [];\r\n\r\n            for (let index = 0, length = textNodes.length; index < length; index++) {\r\n                const elm = textNodes[index];\r\n\r\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\r\n                    continue;\r\n                }\r\n\r\n                const start = parseFloat(elm['@_start']);\r\n\r\n                subtitles.push({\r\n                    start: Math.floor(start * 1000),\r\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\r\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\r\n                    track,\r\n                });\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        if (file.name.endsWith('.sup')) {\r\n            let imageDataArray: Uint8ClampedArray | undefined;\r\n            const subtitles = [];\r\n            let currentImageDisplaySet: DisplaySet | undefined;\r\n\r\n            // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\r\n            // @ts-ignore\r\n            for await (const displaySet of parsePgsDisplaySets(file.stream())) {\r\n                if (displaySet.objectDefinitionSegments.length > 0) {\r\n                    if (currentImageDisplaySet === undefined) {\r\n                        currentImageDisplaySet = displaySet;\r\n                    }\r\n                } else if (currentImageDisplaySet !== undefined) {\r\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\r\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\r\n                    imageDataArray =\r\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\r\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\r\n                            : imageDataArray;\r\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\r\n                    helperCanvas.width = imageData.width;\r\n                    helperCanvas.height = imageData.height;\r\n                    const context = helperCanvas.getContext('2d')!;\r\n                    context.putImageData(imageData, 0, 0);\r\n                    subtitles.push({\r\n                        start:\r\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\r\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\r\n                        text: '',\r\n                        textImage: {\r\n                            dataUrl: helperCanvas.toDataURL('image/png'),\r\n                            image: {\r\n                                width: imageData.width,\r\n                                height: imageData.height,\r\n                            },\r\n                            screen: {\r\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\r\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\r\n                            },\r\n                        },\r\n                        track,\r\n                    });\r\n\r\n                    currentImageDisplaySet = undefined;\r\n                }\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        throw new Error('Unsupported subtitle file format');\r\n    }\r\n\r\n    _fixRTL(line: string): string {\r\n        const index1 = line.indexOf('&lrm;');\r\n        const index2 = line.indexOf('&rlm;');\r\n        let newLine = '';\r\n\r\n        if (index1 > -1) {\r\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        } else if (index2 > -1) {\r\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    _decodeHTML(text: string): string {\r\n        helperElement.innerHTML = text;\r\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\r\n    }\r\n\r\n    _xmlParser() {\r\n        if (this.xmlParser === undefined) {\r\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\r\n        }\r\n\r\n        return this.xmlParser;\r\n    }\r\n}\r\n","import { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ninterface BarProps {\r\n    drawerWidth: number;\r\n    drawerOpen: boolean;\r\n    hidden: boolean;\r\n    title: string;\r\n    onFileSelector: () => void;\r\n    onOpenSettings: () => void;\r\n    onOpenCopyHistory: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, BarProps, string>((theme) => ({\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftButton: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    copyHistoryButton: {\r\n        transform: 'scaleX(1)',\r\n        width: 48,\r\n        padding: 12,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    copyHistoryButtonShift: {\r\n        transform: 'scaleX(0)',\r\n        width: 0,\r\n        padding: 5,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\ninterface CopyHistoryTooltipStylesProps {\r\n    show: boolean;\r\n}\r\n\r\ninterface CopyHistoryTooltipProps extends TooltipProps {\r\n    show: boolean;\r\n}\r\n\r\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\r\n    tooltip: ({ show }) => ({\r\n        display: show ? 'block' : 'none',\r\n    }),\r\n}));\r\n\r\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\r\n    const classes = useCopyHistoryTooltipStyles({ show: show });\r\n    return <Tooltip classes={classes} {...toolTipProps} />;\r\n}\r\n\r\nexport default function Bar(props: BarProps) {\r\n    const classes = useStyles(props);\r\n    return (\r\n        <AppBar\r\n            position=\"static\"\r\n            elevation={0}\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: props.drawerOpen,\r\n                [classes.hide]: props.hidden,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <Tooltip title=\"Open Files\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" className={classes.leftButton} onClick={props.onFileSelector}>\r\n                        <FolderIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {props.title}\r\n                </Typography>\r\n                <Tooltip title=\"Donate\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/sponsors/killergerbah?frequency=one-time\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <FavoriteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Submit Issue\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/killergerbah/asbplayer/issues\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <BugReportIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Help\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/killergerbah/asbplayer#usage\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <HelpIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Settings\">\r\n                    <IconButton edge=\"end\" color=\"inherit\" onClick={props.onOpenSettings}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <CopyHistoryTooltip title=\"Copy History\" show={!props.drawerOpen}>\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        className={clsx(classes.copyHistoryButton, {\r\n                            [classes.copyHistoryButtonShift]: props.drawerOpen,\r\n                        })}\r\n                        onClick={props.onOpenCopyHistory}\r\n                    >\r\n                        <ListIcon />\r\n                    </IconButton>\r\n                </CopyHistoryTooltip>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import { AsbPlayerToVideoCommandV2, Message, VideoTabModel } from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface ExtensionMessage {\r\n    data: Message;\r\n    tabId: number;\r\n    src: string;\r\n}\r\n\r\nexport default class ChromeExtension {\r\n    tabs: VideoTabModel[];\r\n\r\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\r\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\r\n    private readonly versionPromise: Promise<string>;\r\n    private readonly id: string;\r\n\r\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\r\n    private heartbeatStarted = false;\r\n\r\n    constructor() {\r\n        this.onMessageCallbacks = [];\r\n        this.onTabsCallbacks = [];\r\n        this.tabs = [];\r\n        this.versionPromise = new Promise((resolve, reject) => {\r\n            this.versionResolve = resolve;\r\n        });\r\n        this.id = uuidv4();\r\n\r\n        window.addEventListener('message', (event) => {\r\n            if (event.source !== window) {\r\n                return;\r\n            }\r\n\r\n            if (event.data.sender === 'asbplayer-extension-to-player') {\r\n                if (event.data.message) {\r\n                    if (event.data.message.command === 'tabs') {\r\n                        this.tabs = event.data.message.tabs;\r\n\r\n                        for (let c of this.onTabsCallbacks) {\r\n                            c(this.tabs);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (event.data.message.command === 'version') {\r\n                        this.versionResolve!(event.data.message.version);\r\n                        return;\r\n                    }\r\n\r\n                    for (let c of this.onMessageCallbacks) {\r\n                        c({\r\n                            data: event.data.message,\r\n                            tabId: event.data.tabId,\r\n                            src: event.data.src,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    startHeartbeat() {\r\n        if (!this.heartbeatStarted) {\r\n            this._sendHeartbeat();\r\n            setInterval(() => this._sendHeartbeat(), 1000);\r\n            this.heartbeatStarted = true;\r\n        }\r\n    }\r\n\r\n    _sendHeartbeat() {\r\n        window.postMessage(\r\n            {\r\n                sender: 'asbplayerv2',\r\n                message: {\r\n                    command: 'heartbeat',\r\n                    id: this.id,\r\n                    receivedTabs: this.tabs,\r\n                },\r\n            },\r\n            '*'\r\n        );\r\n    }\r\n\r\n    async installedVersion(): Promise<string> {\r\n        return await this.versionPromise;\r\n    }\r\n\r\n    sendMessage(message: Message, tabId: number, src: string) {\r\n        const command: AsbPlayerToVideoCommandV2<Message> = {\r\n            sender: 'asbplayerv2',\r\n            message: message,\r\n            tabId: tabId,\r\n            src: src,\r\n        };\r\n        window.postMessage(command, '*');\r\n    }\r\n\r\n    publishMessage(message: Message) {\r\n        for (const tab of this.tabs) {\r\n            const command: AsbPlayerToVideoCommandV2<Message> = {\r\n                sender: 'asbplayerv2',\r\n                message: message,\r\n                tabId: tab.id,\r\n                src: tab.src,\r\n            };\r\n            window.postMessage(command, '*');\r\n        }\r\n    }\r\n\r\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this.onTabsCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this._remove(callback, this.onTabsCallbacks);\r\n    }\r\n\r\n    subscribe(callback: (message: ExtensionMessage) => void) {\r\n        this.onMessageCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\r\n        this._remove(callback, this.onMessageCallbacks);\r\n    }\r\n\r\n    _remove(callback: Function, callbacks: Function[]) {\r\n        for (let i = callbacks.length - 1; i >= 0; --i) {\r\n            if (callback === callbacks[i]) {\r\n                callbacks.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rgb } from '@project/common';\r\n\r\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (!equals(a[i], b[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function keysAreEqual(a: any, b: any) {\r\n    for (let key in a) {\r\n        if (!(key in b)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let key in b) {\r\n        if (!(key in a)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction hexToRgb(hex: string): Rgb {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\r\n    return {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n    };\r\n}\r\n\r\ninterface SubtitleStyle {\r\n    subtitleColor: string;\r\n    subtitleSize: number;\r\n    subtitleOutlineThickness: number;\r\n    subtitleOutlineColor: string;\r\n    subtitleBackgroundOpacity: number;\r\n    subtitleBackgroundColor: string;\r\n    subtitleFontFamily: string;\r\n}\r\n\r\nexport function computeStyles({\r\n    subtitleColor,\r\n    subtitleSize,\r\n    subtitleOutlineThickness,\r\n    subtitleOutlineColor,\r\n    subtitleBackgroundOpacity,\r\n    subtitleBackgroundColor,\r\n    subtitleFontFamily,\r\n}: SubtitleStyle) {\r\n    const styles: any = {\r\n        color: subtitleColor,\r\n        fontSize: Number(subtitleSize),\r\n    };\r\n\r\n    if (subtitleOutlineThickness > 0) {\r\n        const thickness = subtitleOutlineThickness;\r\n        const color = subtitleOutlineColor;\r\n        styles[\r\n            'textShadow'\r\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\r\n    }\r\n\r\n    if (subtitleBackgroundOpacity > 0) {\r\n        const opacity = subtitleBackgroundOpacity;\r\n        const color = subtitleBackgroundColor;\r\n        const { r, g, b } = hexToRgb(color);\r\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\r\n        styles['fontFamily'] = subtitleFontFamily;\r\n    }\r\n\r\n    return styles;\r\n}\r\n\r\nexport function timeDurationDisplay(\r\n    milliseconds: number,\r\n    totalMilliseconds: number,\r\n    includeMilliseconds = true\r\n): string {\r\n    if (milliseconds < 0) {\r\n        return timeDurationDisplay(0, totalMilliseconds);\r\n    }\r\n\r\n    milliseconds = Math.round(milliseconds);\r\n    const ms = milliseconds % 1000;\r\n    milliseconds = (milliseconds - ms) / 1000;\r\n    const secs = milliseconds % 60;\r\n    milliseconds = (milliseconds - secs) / 60;\r\n    const mins = milliseconds % 60;\r\n\r\n    if (totalMilliseconds >= 3600000) {\r\n        const hrs = (milliseconds - mins) / 60;\r\n\r\n        if (includeMilliseconds) {\r\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + padEnd(ms);\r\n        }\r\n\r\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\r\n    }\r\n\r\n    if (includeMilliseconds) {\r\n        return pad(mins) + ':' + pad(secs) + '.' + padEnd(ms);\r\n    }\r\n\r\n    return pad(mins) + ':' + pad(secs);\r\n}\r\n\r\nfunction pad(n: number) {\r\n    return String(n).padStart(2, '0');\r\n}\r\n\r\nfunction padEnd(n: number) {\r\n    return String(n).padEnd(3, '0');\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport { Theme } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\r\n\r\nexport interface CopyHistoryItem extends SubtitleModel {\r\n    name: string;\r\n    id: string;\r\n    timestamp: number;\r\n    surroundingSubtitles: SubtitleModel[];\r\n    audioFile?: File;\r\n    audioTrack?: string;\r\n    videoFile?: File;\r\n    subtitleFile?: File;\r\n    mediaTimestamp?: number;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n    url?: string;\r\n}\r\n\r\ninterface CopyHistoryProps {\r\n    open: boolean;\r\n    drawerWidth: number;\r\n    items: CopyHistoryItem[];\r\n    onClose: () => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n    onAnki: (item: CopyHistoryItem) => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\r\n    drawer: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'static',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    listContainer: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n    },\r\n    listItem: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    listItemGutters: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    listItemIconRoot: {\r\n        minWidth: 20,\r\n    },\r\n    emptyState: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        height: '100%',\r\n        padding: 15,\r\n    },\r\n    text: {\r\n        flexGrow: 1,\r\n    },\r\n    emptyText: {\r\n        flexGrow: 1,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    timestamp: {\r\n        paddingRight: 15,\r\n        paddingLeft: 15,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ninterface MenuProps {\r\n    open: boolean;\r\n    item?: CopyHistoryItem;\r\n    anchorEl?: Element;\r\n    onClose: () => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(item!.text);\r\n        onClose();\r\n    }, [item, onClose]);\r\n\r\n    const handleJumpTo = useCallback(() => {\r\n        onSelect(item!);\r\n        onClose();\r\n    }, [item, onSelect, onClose]);\r\n\r\n    const handleClipAudio = useCallback(() => {\r\n        onClipAudio(item!);\r\n        onClose();\r\n    }, [item, onClipAudio, onClose]);\r\n\r\n    const handleDownloadImage = useCallback(() => {\r\n        onDownloadImage(item!);\r\n        onClose();\r\n    }, [item, onDownloadImage, onClose]);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        onDelete(item!);\r\n        onClose();\r\n    }, [item, onDelete, onClose]);\r\n\r\n    if (!item) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Popover\r\n            disableEnforceFocus={true}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: 'center',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <List>\r\n                <ListItem button onClick={handleCopy}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\r\n                </ListItem>\r\n                <ListItem button onClick={handleJumpTo}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\r\n                </ListItem>\r\n                {(item.videoFile || item.audioFile || item.audio) && (\r\n                    <ListItem button onClick={handleClipAudio}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\r\n                    </ListItem>\r\n                )}\r\n                {(item.videoFile || item.image) && (\r\n                    <ListItem button onClick={handleDownloadImage}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\r\n                    </ListItem>\r\n                )}\r\n                <ListItem button onClick={handleDelete}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\r\n                </ListItem>\r\n            </List>\r\n        </Popover>\r\n    );\r\n}\r\n\r\nexport default function CopyHistory(props: CopyHistoryProps) {\r\n    const onDelete = props.onDelete;\r\n    const classes = useStyles(props);\r\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\r\n        if (element) {\r\n            element.scrollIntoView();\r\n        }\r\n    }, []);\r\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\r\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\r\n\r\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\r\n        setMenuItem(item);\r\n        setMenuOpen(true);\r\n        setMenuAnchorEl(e.currentTarget);\r\n    }, []);\r\n\r\n    const handleMenuClosed = useCallback(() => {\r\n        setMenuItem(undefined);\r\n        setMenuOpen(false);\r\n        setMenuAnchorEl(undefined);\r\n    }, []);\r\n\r\n    const handleDelete = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            onDelete(item);\r\n        },\r\n        [onDelete]\r\n    );\r\n\r\n    let content;\r\n\r\n    if (props.items.length > 0) {\r\n        const items = [];\r\n        let lastSeenItemName = null;\r\n        let i = 0;\r\n        const itemNameCounters: { [name: string]: number } = {};\r\n\r\n        for (const item of props.items) {\r\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\r\n                if (item.name in itemNameCounters) {\r\n                    itemNameCounters[item.name]++;\r\n                } else {\r\n                    itemNameCounters[item.name] = 0;\r\n                }\r\n\r\n                lastSeenItemName = item.name;\r\n                items.push(\r\n                    <ListSubheader disableSticky={true} key={item.name + '-' + itemNameCounters[item.name]}>\r\n                        {item.name}\r\n                    </ListSubheader>\r\n                );\r\n            }\r\n\r\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\r\n\r\n            items.push(\r\n                <ListItem\r\n                    ref={ref}\r\n                    key={item.id}\r\n                    className={classes.listItem}\r\n                    classes={{ gutters: classes.listItemGutters }}\r\n                >\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <Tooltip title=\"Export to Anki\">\r\n                            <IconButton onClick={() => props.onAnki(item)}>\r\n                                <StarIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </ListItemIcon>\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\r\n                            <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={\r\n                            <Grid wrap=\"nowrap\" container>\r\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\r\n                                    {item.text === '' ? 'No text' : item.text}\r\n                                </Grid>\r\n                                <Grid item className={classes.timestamp}>\r\n                                    {timeDurationDisplay(item.start, item.start, false)}\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n            );\r\n\r\n            ++i;\r\n        }\r\n\r\n        content = (\r\n            <div className={classes.listContainer}>\r\n                <List>{items}</List>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className={classes.emptyState}>\r\n                <Typography variant=\"h6\">Copy history is empty.</Typography>\r\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.open}\r\n                className={classes.drawer}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={props.onClose}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                {content}\r\n            </Drawer>\r\n            <Menu\r\n                open={props.open && menuOpen}\r\n                anchorEl={menuAnchorEl}\r\n                item={menuItem}\r\n                onClose={handleMenuClosed}\r\n                onSelect={props.onSelect}\r\n                onClipAudio={props.onClipAudio}\r\n                onDownloadImage={props.onDownloadImage}\r\n                onDelete={handleDelete}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport gt from 'semver/functions/gt';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport { Theme } from '@material-ui/core/styles';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    background: ({ appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        width: '100%',\r\n        zIndex: 100,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    }),\r\n    browseLink: {\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    extension: ChromeExtension;\r\n    latestExtensionVersion: string;\r\n    extensionUrl: string;\r\n    loading: boolean;\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\r\n        React.MouseEventHandler<HTMLSpanElement> &\r\n        React.MouseEventHandler<HTMLLabelElement>;\r\n}\r\n\r\nexport default function LandingPage({\r\n    extension,\r\n    latestExtensionVersion,\r\n    extensionUrl,\r\n    loading,\r\n    dragging,\r\n    appBarHidden,\r\n    onFileSelector,\r\n}: Props) {\r\n    const classes = useStyles({ appBarHidden });\r\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        async function fetchInstalledExtensionVersion() {\r\n            setInstalledExtensionVersion(await extension.installedVersion());\r\n        }\r\n\r\n        fetchInstalledExtensionVersion();\r\n    }, [extension]);\r\n\r\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\r\n    const extensionNotInstalled = !installedExtensionVersion;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={!loading && !dragging} timeout={500}>\r\n                <div className={classes.background}>\r\n                    <Typography variant=\"h6\">\r\n                        Drag and drop subtitle and media files, or{' '}\r\n                        <Link\r\n                            target=\"#\"\r\n                            className={classes.browseLink}\r\n                            onClick={onFileSelector}\r\n                            color=\"secondary\"\r\n                            component=\"label\"\r\n                        >\r\n                            browse\r\n                        </Link>\r\n                        .\r\n                        <br />\r\n                        {extensionNotInstalled && (\r\n                            <span>\r\n                                Install the{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    Chrome extension\r\n                                </Link>{' '}\r\n                                to sync subtitles with streaming video.\r\n                            </span>\r\n                        )}\r\n                        {extensionUpdateAvailable && (\r\n                            <span>\r\n                                An extension{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    update\r\n                                </Link>{' '}\r\n                                is available.\r\n                            </span>\r\n                        )}\r\n                    </Typography>\r\n                </div>\r\n            </Fade>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { Message } from \"@project/common\";\r\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\r\n\r\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\r\n    private channel?: BroadcastChannel;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n    \r\n    constructor(channelId: string) {\r\n        this.channel = new BroadcastChannel(channelId);\r\n        const that = this;\r\n        this.channel.onmessage = (event) => {\r\n            that.onMessage?.(event as VideoProtocolMessage);\r\n        };\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.channel?.close();\r\n        this.channel = undefined;\r\n    }\r\n}\r\n","import { Message } from '@project/common';\r\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\r\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\r\n\r\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\r\n    private readonly tabId: number;\r\n    private readonly src: string;\r\n    private readonly extension: ChromeExtension;\r\n    private readonly listener: (message: ExtensionMessage) => void;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n\r\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\r\n        this.tabId = tabId;\r\n        this.src = src;\r\n        this.listener = (message) => {\r\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\r\n                this.onMessage?.({\r\n                    data: message.data,\r\n                });\r\n            }\r\n        };\r\n\r\n        extension.subscribe(this.listener);\r\n        this.extension = extension;\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.extension.sendMessage(message, this.tabId, this.src);\r\n    }\r\n\r\n    close() {\r\n        this.extension.unsubscribe(this.listener);\r\n    }\r\n}\r\n","export default class Clock {\r\n    private accumulated: number;\r\n    private started: boolean;\r\n    private startTime?: number;\r\n\r\n    constructor() {\r\n        this.accumulated = 0;\r\n        this.started = false;\r\n    }\r\n\r\n    time(max: number) {\r\n        if (this.started) {\r\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\r\n        }\r\n\r\n        return Math.min(max, this.accumulated);\r\n    }\r\n\r\n    stop() {\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        this.started = false;\r\n        this.accumulated += Date.now() - this.startTime!;\r\n    }\r\n\r\n    start() {\r\n        this.startTime = Date.now();\r\n        this.started = true;\r\n    }\r\n\r\n    setTime(time: number) {\r\n        if (this.started) {\r\n            this.startTime = Date.now();\r\n            this.accumulated = time;\r\n        } else {\r\n            this.accumulated = time;\r\n        }\r\n    }\r\n\r\n    progress(max: number) {\r\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport { AsbplayerSettingsProvider, AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\r\nimport Clock from '../services/Clock';\r\n\r\nconst useControlStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        width: '50%',\r\n        bottom: 0,\r\n        pointerEvents: 'none',\r\n        color: '#fff',\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n    },\r\n    timeDisplay: {\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        cursor: 'default',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    offsetInput: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n        width: 100,\r\n        color: '#fff',\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerShown: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 5,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerHidden: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputHidden: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputShown: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 100,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbHidden: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbShown: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 1,\r\n        pointerEvents: 'auto',\r\n    },\r\n    subContainer: {\r\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\r\n        position: 'relative',\r\n        left: '-100%',\r\n        width: '200%',\r\n        zIndex: 10,\r\n    },\r\n    button: {\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveButton: {\r\n        color: 'rgba(72, 72, 72, 0.7)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveTopButton: {\r\n        color: 'rgba(255, 255, 255, 0.5)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    progress: {\r\n        margin: 5,\r\n    },\r\n    topButton: {\r\n        pointerEvents: 'auto',\r\n        color: '#fff',\r\n    },\r\n    gridContainer: {\r\n        pointerEvents: 'auto',\r\n        padding: 2,\r\n    },\r\n}));\r\n\r\nconst useProgressBarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 10,\r\n    },\r\n    container: {\r\n        height: 10,\r\n        pointerEvents: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        position: 'absolute',\r\n        width: 'calc(100% - 20px)',\r\n        marginLeft: 10,\r\n    },\r\n    mouseEventListener: {\r\n        zIndex: 1,\r\n        height: 10,\r\n        cursor: 'pointer',\r\n        pointerEvents: 'auto',\r\n        position: 'absolute',\r\n        width: '100%',\r\n    },\r\n    fillContainer: {\r\n        background: 'rgba(30,30,30,0.7)',\r\n        width: '100%',\r\n        height: 5,\r\n        position: 'relative',\r\n    },\r\n    fillContainerThick: {\r\n        transition: theme.transitions.create('height', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: 50,\r\n        }),\r\n        height: 8,\r\n    },\r\n    fill: {\r\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\r\n        height: '100%',\r\n    },\r\n    handleContainer: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        bottom: 0,\r\n    },\r\n    handle: {\r\n        borderRadius: '50%',\r\n        width: 16,\r\n        height: 16,\r\n        opacity: 0,\r\n        left: -8,\r\n        background: 'white',\r\n        position: 'absolute',\r\n    },\r\n    handleOn: {\r\n        opacity: 1,\r\n        transition: theme.transitions.create('opacity', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\n\r\nconst VolumeSlider = withStyles((theme) => ({\r\n    root: {\r\n        color: 'white',\r\n        verticalAlign: 'middle',\r\n    },\r\n    thumb: {\r\n        backgroundColor: 'white',\r\n        color: 'white',\r\n        '&:focus': {\r\n            boxShadow: 'inherit',\r\n        },\r\n        '&:hover, &$active': {\r\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\r\n        },\r\n    },\r\n    active: {\r\n        color: 'white',\r\n    },\r\n}))(Slider);\r\n\r\nfunction displayTime(milliseconds: number) {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsInMinute = seconds % 60;\r\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\r\n}\r\n\r\nfunction elementWidth(element: HTMLElement) {\r\n    const rect = element.getBoundingClientRect();\r\n    return rect.right - rect.left;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n    onSeek: (progress: number) => void;\r\n    value: number;\r\n}\r\n\r\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\r\n    const classes = useProgressBarStyles();\r\n    const [mouseOver, setMouseOver] = useState(false);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            const rect = e.currentTarget.getBoundingClientRect();\r\n            // Account for margins by subtracting 10 from left/right sides\r\n            const width = rect.right - rect.left - 20;\r\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\r\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\r\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\r\n    const fillStyle = { width: progressWidth };\r\n    const handleStyle = { marginLeft: progressWidth };\r\n    const fillContainerClassName = mouseOver\r\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\r\n        : classes.fillContainer;\r\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div ref={containerRef} className={classes.container}>\r\n                <div className={fillContainerClassName}>\r\n                    <div className={classes.fill} style={fillStyle}></div>\r\n                    <div className={classes.handleContainer}>\r\n                        <div className={handleClassName} style={handleStyle} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className={classes.mouseEventListener}\r\n                onClick={handleClick}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface AudioTrackSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction AudioTrackSelector({\r\n    open,\r\n    anchorEl,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    onAudioTrackSelected,\r\n    onClose,\r\n}: AudioTrackSelectorProps) {\r\n    if (!audioTracks || audioTracks.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = audioTracks.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={t.id === selectedAudioTrack}\r\n                button\r\n                onClick={() => onAudioTrackSelected(t.id)}\r\n            >\r\n                {t.language} {t.label}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface TabSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\r\n    if (!tabs || tabs.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = tabs.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\r\n                button\r\n                onClick={() => onTabSelected(t)}\r\n            >\r\n                {t.id} {t.title} {t.src}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MediaUnloaderProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    file?: string;\r\n    onUnload: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem button onClick={(e) => onUnload()}>\r\n                        Unload {file}\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface PlayModeSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    selectedPlayMode?: PlayMode;\r\n    onPlayMode: (playMode: PlayMode) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.normal}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\r\n                    >\r\n                        Normal\r\n                    </ListItem>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.condensed}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\r\n                    >\r\n                        Condensed\r\n                    </ListItem>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.autoPause}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\r\n                    >\r\n                        Auto-pause\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface ControlsProps {\r\n    clock: Clock;\r\n    playing: boolean;\r\n    length: number;\r\n    offsetEnabled?: boolean;\r\n    displayLength?: number;\r\n    offset: number;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onSeek: (progress: number) => void;\r\n    mousePositionRef: MutableRefObject<Point>;\r\n    onShow?: (show: boolean) => void;\r\n    onPause: () => void;\r\n    onPlay: () => void;\r\n    onTabSelected?: (tab: VideoTabModel) => void;\r\n    onUnloadAudio?: () => void;\r\n    onUnloadVideo?: () => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onVolumeChange: (volume: number) => void;\r\n    disableKeyEvents?: boolean;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    closeEnabled?: boolean;\r\n    onClose?: () => void;\r\n    volumeEnabled?: boolean;\r\n    playMode?: PlayMode;\r\n    playModeEnabled?: boolean;\r\n    onPlayMode?: (playMode: PlayMode) => void;\r\n    subtitlesEnabled?: boolean;\r\n    subtitlesToggle?: boolean;\r\n    onSubtitlesToggle?: () => void;\r\n    videoFile?: string;\r\n    audioFile?: string;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    popOutEnabled?: boolean;\r\n    popOut?: boolean;\r\n    onPopOutToggle?: () => void;\r\n    fullscreenEnabled?: boolean;\r\n    fullscreen?: boolean;\r\n    onFullscreenToggle?: () => void;\r\n    hideSubtitlePlayerToggleEnabled?: boolean;\r\n    subtitlePlayerHidden?: boolean;\r\n    onHideSubtitlePlayerToggle?: () => void;\r\n    showOnMouseMovement: boolean;\r\n    theaterModeToggleEnabled?: boolean;\r\n    theaterModeEnabled?: boolean;\r\n    onTheaterModeToggle?: () => void;\r\n}\r\n\r\nexport default function Controls({\r\n    clock,\r\n    playing,\r\n    length,\r\n    offsetEnabled,\r\n    displayLength,\r\n    offset,\r\n    onAudioTrackSelected,\r\n    onSeek,\r\n    mousePositionRef,\r\n    onShow,\r\n    onPause,\r\n    onPlay,\r\n    onTabSelected,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onOffsetChange,\r\n    onVolumeChange,\r\n    disableKeyEvents,\r\n    settingsProvider,\r\n    closeEnabled,\r\n    onClose,\r\n    volumeEnabled,\r\n    playMode,\r\n    playModeEnabled,\r\n    onPlayMode,\r\n    subtitlesEnabled,\r\n    subtitlesToggle,\r\n    onSubtitlesToggle,\r\n    videoFile,\r\n    audioFile,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    tabs,\r\n    selectedTab,\r\n    popOutEnabled,\r\n    popOut,\r\n    onPopOutToggle,\r\n    fullscreenEnabled,\r\n    fullscreen,\r\n    onFullscreenToggle,\r\n    hideSubtitlePlayerToggleEnabled,\r\n    subtitlePlayerHidden,\r\n    onHideSubtitlePlayerToggle,\r\n    showOnMouseMovement,\r\n    theaterModeToggleEnabled,\r\n    theaterModeEnabled,\r\n    onTheaterModeToggle,\r\n}: ControlsProps) {\r\n    const classes = useControlStyles();\r\n    const [show, setShow] = useState<boolean>(true);\r\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\r\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\r\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\r\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\r\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\r\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\r\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\r\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\r\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\r\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\r\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\r\n    const [volume, setVolume] = useState<number>(100);\r\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\r\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const lastShowTimestampRef = useRef<number>(Date.now());\r\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\r\n    const lastShowRef = useRef<boolean>(true);\r\n    const forceShowRef = useRef<boolean>(false);\r\n    const offsetInputRef = useRef<HTMLInputElement>();\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [, updateState] = useState<any>();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    function handleMouseOver() {\r\n        forceShowRef.current = true;\r\n    }\r\n\r\n    function handleMouseOut() {\r\n        forceShowRef.current = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedVolume = Number(settingsProvider.volume);\r\n        setVolume(savedVolume);\r\n        onVolumeChange(savedVolume / 100);\r\n\r\n        if (savedVolume > 0) {\r\n            setLastCommittedVolume(savedVolume);\r\n        }\r\n    }, [settingsProvider, onVolumeChange]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let currentShow: boolean;\r\n\r\n            if (showOnMouseMovement) {\r\n                currentShow =\r\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\r\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\r\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\r\n                        100;\r\n            } else {\r\n                currentShow =\r\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\r\n                        (closeButtonRef.current &&\r\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\r\n                    false;\r\n            }\r\n\r\n            currentShow =\r\n                currentShow ||\r\n                forceShowRef.current ||\r\n                offsetInputRef.current === document.activeElement ||\r\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\r\n\r\n            if (currentShow && !lastShowRef.current) {\r\n                lastShowTimestampRef.current = Date.now();\r\n                setShow(currentShow);\r\n            } else if (!currentShow && lastShowRef.current) {\r\n                setShow(currentShow);\r\n            }\r\n\r\n            lastShowRef.current = currentShow;\r\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\r\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\r\n        }, 100);\r\n        return () => clearInterval(interval);\r\n    }, [mousePositionRef, showOnMouseMovement]);\r\n\r\n    useEffect(() => onShow?.(show), [onShow, show]);\r\n\r\n    useEffect(() => {\r\n        if (disableKeyEvents) {\r\n            return;\r\n        }\r\n\r\n        function handleKey(event: KeyboardEvent) {\r\n            if (event.key === 'Enter') {\r\n                if (offsetInputRef.current === document.activeElement) {\r\n                    const offset = Number(offsetInputRef.current.value);\r\n\r\n                    if (Number.isNaN(offset)) {\r\n                        return;\r\n                    }\r\n\r\n                    onOffsetChange(offset * 1000);\r\n                    offsetInputRef.current.blur();\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKey);\r\n        };\r\n    }, [onOffsetChange, disableKeyEvents]);\r\n\r\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\r\n        const inputElement = e.target as HTMLInputElement;\r\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            forceUpdate();\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [forceUpdate]);\r\n\r\n    useEffect(() => {\r\n        if (offsetInputRef.current) {\r\n            if (offset === 0) {\r\n                offsetInputRef.current.value = '';\r\n            } else {\r\n                const offsetSeconds = offset / 1000;\r\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\r\n                offsetInputRef.current.value = value;\r\n                lastOffsetInputChangeTimestampRef.current = Date.now();\r\n            }\r\n        }\r\n    }, [offset]);\r\n\r\n    const handleAudioTrackSelectorClosed = useCallback(() => {\r\n        setAudioTrackSelectorAnchorEl(undefined);\r\n        setAudioTrackSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\r\n        setAudioTrackSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            onAudioTrackSelected(id);\r\n            setAudioTrackSelectorAnchorEl(undefined);\r\n            setAudioTrackSelectorOpen(false);\r\n        },\r\n        [onAudioTrackSelected]\r\n    );\r\n\r\n    const handleTabSelectorClosed = useCallback(() => {\r\n        setTabSelectorAnchorEl(undefined);\r\n        setTabSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setTabSelectorAnchorEl(e.currentTarget);\r\n        setTabSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleTabSelected = useCallback(\r\n        (tab: VideoTabModel) => {\r\n            onTabSelected?.(tab);\r\n            setTabSelectorAnchorEl(undefined);\r\n            setTabSelectorOpen(false);\r\n        },\r\n        [onTabSelected]\r\n    );\r\n\r\n    const handleAudioUnloaderClosed = useCallback(() => {\r\n        setAudioUnloaderAnchorEl(undefined);\r\n        setAudioUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioUnloaderAnchorEl(e.currentTarget);\r\n        setAudioUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(() => {\r\n        onUnloadAudio?.();\r\n        setAudioUnloaderOpen(false);\r\n    }, [onUnloadAudio]);\r\n\r\n    const handleVideoUnloaderClosed = useCallback(() => {\r\n        setVideoUnloaderAnchorEl(undefined);\r\n        setVideoUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setVideoUnloaderAnchorEl(e.currentTarget);\r\n        setVideoUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadVideo = useCallback(() => {\r\n        onUnloadVideo?.();\r\n        setVideoUnloaderOpen(false);\r\n    }, [onUnloadVideo]);\r\n\r\n    const handlePlayModeSelectorClosed = useCallback(() => {\r\n        setPlayModeSelectorAnchorEl(undefined);\r\n        setPlayModeSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPlayModeSelectorAnchorEl(e.currentTarget);\r\n        setPlayModeSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handlePlayModeSelected = useCallback(\r\n        (playMode: PlayMode) => {\r\n            onPlayMode?.(playMode);\r\n            setPlayModeSelectorAnchorEl(undefined);\r\n            setPlayModeSelectorOpen(false);\r\n        },\r\n        [onPlayMode]\r\n    );\r\n\r\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\r\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\r\n\r\n    const handleVolumeChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            setVolume(value);\r\n            onVolumeChange(value / 100);\r\n        },\r\n        [onVolumeChange]\r\n    );\r\n\r\n    const handleVolumeChangeCommitted = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            if (value > 0) {\r\n                setLastCommittedVolume(value);\r\n            }\r\n\r\n            settingsProvider.volume = value;\r\n        },\r\n        [settingsProvider]\r\n    );\r\n\r\n    const handleVolumeToggle = useCallback(() => {\r\n        setVolume((volume) => {\r\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\r\n            onVolumeChange(newVolume / 100);\r\n            return newVolume;\r\n        });\r\n    }, [onVolumeChange, lastCommittedVolume]);\r\n\r\n    const progress = clock.progress(length);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={show} timeout={200}>\r\n                <Grid container style={{ position: 'absolute', top: 0 }}>\r\n                    <Grid item style={{ flexGrow: 1 }}>\r\n                        {closeEnabled && (\r\n                            <IconButton\r\n                                ref={closeButtonRef}\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onClose}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {theaterModeToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\r\n                                onClick={onTheaterModeToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <AspectRatioIcon />\r\n                            </IconButton>\r\n                        )}\r\n                        {hideSubtitlePlayerToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onHideSubtitlePlayerToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n            <div\r\n                ref={containerRef}\r\n                className={classes.container}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            >\r\n                <Fade in={show} timeout={200}>\r\n                    <div className={classes.subContainer}>\r\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\r\n                        <Grid container className={classes.gridContainer} direction=\"row\">\r\n                            <Grid item>\r\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\r\n                                    {playing ? (\r\n                                        <PauseIcon className={classes.button} />\r\n                                    ) : (\r\n                                        <PlayArrowIcon className={classes.button} />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Grid>\r\n                            {volumeEnabled && (\r\n                                <Grid\r\n                                    item\r\n                                    onMouseOver={handleVolumeMouseOver}\r\n                                    onMouseOut={handleVolumeMouseOut}\r\n                                    className={\r\n                                        showVolumeBar\r\n                                            ? classes.volumeInputContainerShown\r\n                                            : classes.volumeInputContainerHidden\r\n                                    }\r\n                                >\r\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\r\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\r\n                                    </IconButton>\r\n                                    <VolumeSlider\r\n                                        onChange={handleVolumeChange}\r\n                                        onChangeCommitted={handleVolumeChangeCommitted}\r\n                                        value={volume}\r\n                                        defaultValue={100}\r\n                                        classes={{\r\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\r\n                                            thumb: showVolumeBar\r\n                                                ? classes.volumeInputThumbShown\r\n                                                : classes.volumeInputThumbHidden,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item>\r\n                                <div className={classes.timeDisplay}>\r\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\r\n                                </div>\r\n                            </Grid>\r\n                            {offsetEnabled && (\r\n                                <Grid item>\r\n                                    <Input\r\n                                        inputRef={offsetInputRef}\r\n                                        disableUnderline={true}\r\n                                        className={classes.offsetInput}\r\n                                        placeholder={'±' + Number(0).toFixed(2)}\r\n                                        onClick={handleOffsetInputClicked}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\r\n                            {subtitlesToggle && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\r\n                                        <SubtitlesIcon\r\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {videoFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\r\n                                        <VideocamIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\r\n                                        <AudiotrackIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioTracks && audioTracks.length > 1 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\r\n                                        <QueueMusicIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {tabs && tabs.length > 0 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\r\n                                        <VideocamIcon\r\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {playModeEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\r\n                                        <TuneIcon\r\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {popOutEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\r\n                                        <OpenInNewIcon\r\n                                            className={classes.button}\r\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {fullscreenEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\r\n                                        {fullscreen ? (\r\n                                            <FullscreenExitIcon className={classes.button} />\r\n                                        ) : (\r\n                                            <FullscreenIcon className={classes.button} />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n                <TabSelector\r\n                    open={tabSelectorOpen && show}\r\n                    anchorEl={tabSelectorAnchorEl}\r\n                    tabs={tabs}\r\n                    selectedTab={selectedTab}\r\n                    onClose={handleTabSelectorClosed}\r\n                    onTabSelected={handleTabSelected}\r\n                />\r\n                <AudioTrackSelector\r\n                    open={audioTrackSelectorOpen && show}\r\n                    anchorEl={audioTrackSelectorAnchorEl}\r\n                    audioTracks={audioTracks}\r\n                    selectedAudioTrack={selectedAudioTrack}\r\n                    onClose={handleAudioTrackSelectorClosed}\r\n                    onAudioTrackSelected={handleAudioTrackSelected}\r\n                />\r\n                <MediaUnloader\r\n                    open={audioUnloaderOpen}\r\n                    anchorEl={audioUnloaderAnchorEl}\r\n                    file={audioFile}\r\n                    onClose={handleAudioUnloaderClosed}\r\n                    onUnload={handleUnloadAudio}\r\n                />\r\n                <MediaUnloader\r\n                    open={videoUnloaderOpen}\r\n                    anchorEl={videoUnloaderAnchorEl}\r\n                    file={videoFile}\r\n                    onClose={handleVideoUnloaderClosed}\r\n                    onUnload={handleUnloadVideo}\r\n                />\r\n                <PlayModeSelector\r\n                    open={playModeSelectorOpen && show}\r\n                    anchorEl={playModeSelectorAnchorEl}\r\n                    selectedPlayMode={playMode}\r\n                    onClose={handlePlayModeSelectorClosed}\r\n                    onPlayMode={handlePlayModeSelected}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { RefObject } from \"react\";\r\n\r\nexport interface MediaElement {\r\n    currentTime: number;\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null;\r\n    play: () => Promise<void>;\r\n    pause: () => void;\r\n    duration: number;\r\n}\r\n\r\nexport default class MediaAdapter {\r\n    private readonly ref: RefObject<MediaElement | undefined>;\r\n    private readonly readyResolves: (() => void)[];\r\n\r\n    constructor(ref: RefObject<MediaElement | undefined>) {\r\n        this.ref = ref;\r\n        this.readyResolves = [];\r\n    }\r\n\r\n    async seek(time: number) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this.ref.current.currentTime = time;\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    async onReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMediaCanPlay(callback: () => void) {\r\n        if (this.ref.current?.readyState === 4) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        if (this.ref.current && !this.ref.current.oncanplay) {\r\n            this.ref.current.oncanplay = (e) => {\r\n                for (const resolve of this.readyResolves) {\r\n                    resolve();\r\n                }\r\n\r\n                this.readyResolves.length = 0;\r\n\r\n                if (this.ref.current) {\r\n                    this.ref.current.oncanplay = null;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.readyResolves.push(callback);\r\n    }\r\n\r\n    play() {\r\n        this.ref.current?.play();\r\n    }\r\n\r\n    pause() {\r\n        this.ref.current?.pause();\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { keysAreEqual } from '../services/Util';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    KeyBindings,\r\n    PostMineAction,\r\n    surroundingSubtitles,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Clock from '../services/Clock';\r\n\r\ninterface StylesProps {\r\n    compressed: boolean;\r\n    appBarHidden: boolean;\r\n    windowWidth: number;\r\n}\r\n\r\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\r\n    container: {\r\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n        backgroundColor: theme.palette.background.default,\r\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\r\n    },\r\n    table: {\r\n        backgroundColor: theme.palette.background.default,\r\n        marginBottom: 75, // so the last row doesn't collide with controls\r\n    },\r\n    noSubtitles: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nconst useSubtitleRowStyles = makeStyles((theme) => ({\r\n    subtitleRow: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    subtitle: {\r\n        fontSize: 20,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    compressedSubtitle: {\r\n        fontSize: 16,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    disabledSubtitle: {\r\n        color: 'transparent',\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n        borderRadius: 5,\r\n    },\r\n    timestamp: {\r\n        fontSize: 14,\r\n        color: '#aaaaaa',\r\n        textAlign: 'right',\r\n        paddingRight: 15,\r\n        paddingLeft: 5,\r\n    },\r\n    copyButton: {\r\n        textAlign: 'right',\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nexport interface DisplaySubtitleModel extends SubtitleModel {\r\n    displayTime: string;\r\n}\r\n\r\ninterface SubtitleRowProps extends TableRowProps {\r\n    index: number;\r\n    compressed: boolean;\r\n    selected: boolean;\r\n    disabled: boolean;\r\n    subtitle: DisplaySubtitleModel;\r\n    subtitleRef: RefObject<HTMLTableRowElement>;\r\n    onClickSubtitle: (index: number) => void;\r\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\r\n}\r\n\r\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\r\n    const {\r\n        index,\r\n        selected,\r\n        subtitleRef,\r\n        onClickSubtitle,\r\n        onCopySubtitle,\r\n        compressed,\r\n        disabled,\r\n        subtitle,\r\n        ...tableRowProps\r\n    } = props;\r\n    const classes = useSubtitleRowStyles();\r\n    const textRef = useRef<HTMLSpanElement>(null);\r\n    const [textSelected, setTextSelected] = useState<boolean>(false);\r\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\r\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\r\n\r\n    if (subtitle.start < 0 || subtitle.end < 0) {\r\n        return null;\r\n    }\r\n\r\n    function handleMouseUp() {\r\n        const selection = document.getSelection();\r\n        const selected =\r\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\r\n        setTextSelected(selected ?? false);\r\n    }\r\n\r\n    const content = subtitle.textImage ? (\r\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\r\n    ) : (\r\n        <span ref={textRef} className={disabledClassName}>\r\n            {subtitle.text}\r\n        </span>\r\n    );\r\n\r\n    return (\r\n        <TableRow\r\n            onClick={() => !textSelected && onClickSubtitle(index)}\r\n            onMouseUp={handleMouseUp}\r\n            ref={subtitleRef}\r\n            className={classes.subtitleRow}\r\n            selected={selected}\r\n            {...tableRowProps}\r\n        >\r\n            <TableCell className={className}>{content}</TableCell>\r\n            <TableCell className={classes.copyButton}>\r\n                <IconButton onClick={(e) => onCopySubtitle(e, index)}>\r\n                    <FileCopy fontSize={compressed ? 'small' : 'medium'} />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\r\n        </TableRow>\r\n    );\r\n});\r\n\r\ninterface SubtitlePlayerProps {\r\n    clock: Clock;\r\n    onSeek: (progress: number, shouldPlay: boolean) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        postMineAction: PostMineAction,\r\n        preventDuplicate: boolean\r\n    ) => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onToggleSubtitleTrack: (track: number) => void;\r\n    onStartedShowing?: () => void;\r\n    onWillStopShowing?: () => void;\r\n    playing: boolean;\r\n    subtitles?: DisplaySubtitleModel[];\r\n    length: number;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    compressed: boolean;\r\n    loading: boolean;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    displayHelp?: string;\r\n    disableKeyEvents: boolean;\r\n    lastJumpToTopTimestamp: number;\r\n    hidden: boolean;\r\n    disabledSubtitleTracks: { [track: number]: boolean };\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n}\r\n\r\nexport default function SubtitlePlayer({\r\n    clock,\r\n    onSeek,\r\n    onCopy,\r\n    onOffsetChange,\r\n    onToggleSubtitleTrack,\r\n    onStartedShowing,\r\n    onWillStopShowing,\r\n    playing,\r\n    subtitles,\r\n    length,\r\n    jumpToSubtitle,\r\n    compressed,\r\n    loading,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    displayHelp,\r\n    disableKeyEvents,\r\n    lastJumpToTopTimestamp,\r\n    hidden,\r\n    disabledSubtitleTracks,\r\n    settingsProvider,\r\n}: SubtitlePlayerProps) {\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const clockRef = useRef<Clock>(clock);\r\n    clockRef.current = clock;\r\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\r\n    subtitleListRef.current = subtitles;\r\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\r\n        () =>\r\n            subtitles\r\n                ? Array(subtitles.length)\r\n                      .fill(undefined)\r\n                      .map((_) => createRef<HTMLTableRowElement>())\r\n                : [],\r\n        [subtitles]\r\n    );\r\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\r\n    subtitleRefsRef.current = subtitleRefs;\r\n    const disableKeyEventsRef = useRef<boolean>();\r\n    disableKeyEventsRef.current = disableKeyEvents;\r\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\r\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = length;\r\n    const hiddenRef = useRef<boolean>(false);\r\n    hiddenRef.current = hidden;\r\n    const lastScrollTimestampRef = useRef<number>(0);\r\n    const requestAnimationRef = useRef<number>();\r\n    const containerRef = useRef<HTMLElement>();\r\n    const drawerOpenRef = useRef<boolean>();\r\n    drawerOpenRef.current = drawerOpen;\r\n    const [windowWidth] = useWindowSize(true);\r\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\r\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\r\n    const onStartedShowingRef = useRef<() => void>();\r\n    onStartedShowingRef.current = onStartedShowing;\r\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\r\n    const onWillStopShowingRef = useRef<() => void>();\r\n    onWillStopShowingRef.current = onWillStopShowing;\r\n\r\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\r\n    // Therefore all of the state it operates on is contained in refs.\r\n    useEffect(() => {\r\n        const update = () => {\r\n            const subtitles = subtitleListRef.current || [];\r\n            const subtitleRefs = subtitleRefsRef.current;\r\n            const length = lengthRef.current;\r\n            const clock = clockRef.current;\r\n            const progress = clock.progress(lengthRef.current);\r\n\r\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\r\n            let fallbackIndex = -1;\r\n            let startedShowing = false;\r\n            let startedShowingSubtitle: SubtitleModel | undefined;\r\n            let willStopShowing = false;\r\n            let willStopShowingSubtitle: SubtitleModel | undefined;\r\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\r\n                        currentSubtitleIndexes[i] = true;\r\n                        const nextProgress = progress + 100 / length;\r\n\r\n                        if (!willStopShowing && nextProgress >= end) {\r\n                            willStopShowing = true;\r\n                            willStopShowingSubtitle = s;\r\n                        }\r\n\r\n                        // Add slight buffer to ensure sub is displaying on video\r\n                        if (!startedShowing && progress >= start + 100 / length && progress < start + 500 / length) {\r\n                            startedShowing = true;\r\n                            startedShowingSubtitle = s;\r\n                        }\r\n                    }\r\n\r\n                    if (fallbackIndex === -1) {\r\n                        fallbackIndex = i;\r\n                    }\r\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\r\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\r\n                currentSubtitleIndexes[fallbackIndex] = true;\r\n            }\r\n\r\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\r\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\r\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\r\n\r\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\r\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\r\n\r\n                    if (scrollToSubtitleRef?.current && allowScroll) {\r\n                        scrollToSubtitleRef.current.scrollIntoView({\r\n                            block: 'center',\r\n                            inline: 'nearest',\r\n                            behavior: 'smooth',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (startedShowing && startedShowingSubtitleRef.current !== startedShowingSubtitle) {\r\n                onStartedShowingRef.current?.();\r\n                startedShowingSubtitleRef.current = startedShowingSubtitle;\r\n            }\r\n\r\n            if (willStopShowing && willStopShowingSubtitleRef.current !== willStopShowingSubtitle) {\r\n                onWillStopShowingRef.current?.();\r\n                willStopShowingSubtitleRef.current = willStopShowingSubtitle;\r\n            }\r\n\r\n            requestAnimationRef.current = requestAnimationFrame(update);\r\n        };\r\n\r\n        requestAnimationRef.current = requestAnimationFrame(update);\r\n\r\n        return () => {\r\n            if (requestAnimationRef.current !== undefined) {\r\n                cancelAnimationFrame(requestAnimationRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const scrollToCurrentSubtitle = useCallback(() => {\r\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\r\n\r\n        if (!selectedSubtitleIndexes) {\r\n            return;\r\n        }\r\n\r\n        const indexes = Object.keys(selectedSubtitleIndexes);\r\n\r\n        if (indexes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\r\n\r\n        scrollToSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [subtitleRefs]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        function scrollIfVisible() {\r\n            if (document.visibilityState === 'visible') {\r\n                scrollToCurrentSubtitle();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('visibilitychange', scrollIfVisible);\r\n\r\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\r\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (!hidden) {\r\n            scrollToCurrentSubtitle();\r\n        }\r\n    }, [hidden, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (hiddenRef.current) {\r\n            return;\r\n        }\r\n\r\n        const subtitleRefs = subtitleRefsRef.current;\r\n\r\n        if (!subtitleRefs || subtitleRefs.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const firstSubtitleRef = subtitleRefs[0];\r\n        firstSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [lastJumpToTopTimestamp]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, clock, subtitles, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                if (forward) {\r\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\r\n                } else {\r\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [clock, length, disableKeyEvents, onSeek]);\r\n\r\n    useEffect(() => {\r\n        function handleScroll() {\r\n            lastScrollTimestampRef.current = Date.now();\r\n        }\r\n\r\n        const table = containerRef.current;\r\n        table?.addEventListener('wheel', handleScroll);\r\n\r\n        return () => table?.removeEventListener('wheel', handleScroll);\r\n    }, [containerRef, lastScrollTimestampRef]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        if (!jumpToSubtitle || !subtitles) {\r\n            return;\r\n        }\r\n\r\n        let jumpToIndex = -1;\r\n        let i = 0;\r\n\r\n        for (let s of subtitles) {\r\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\r\n                jumpToIndex = i;\r\n                break;\r\n            }\r\n\r\n            ++i;\r\n        }\r\n\r\n        if (jumpToIndex !== -1) {\r\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\r\n                block: 'center',\r\n                inline: 'nearest',\r\n                behavior: 'smooth',\r\n            });\r\n        }\r\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\r\n\r\n    const calculateSurroundingSubtitlesForIndex = useCallback(\r\n        (index: number) => {\r\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\r\n                return [];\r\n            }\r\n\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    const calculateSurroundingSubtitles = useCallback(() => {\r\n        if (!selectedSubtitleIndexesRef.current) {\r\n            return [];\r\n        }\r\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\r\n        return calculateSurroundingSubtitlesForIndex(index);\r\n    }, [calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\r\n            },\r\n            () => disableKeyEventsRef.current ?? false,\r\n            () => {\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                const index = Math.min(...subtitleIndexes);\r\n                return subtitles[index];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [subtitles, calculateSurroundingSubtitles, onCopy]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onToggleSubtitleTrack(track);\r\n            },\r\n            () => {},\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [disableKeyEvents, onToggleSubtitleTrack]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(\r\n                        subtitles[index],\r\n                        calculateSurroundingSubtitlesForIndex(index),\r\n                        PostMineAction.showAnkiDialog,\r\n                        true\r\n                    );\r\n                }\r\n            },\r\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindUpdateLastCard(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(\r\n                        subtitles[index],\r\n                        calculateSurroundingSubtitlesForIndex(index),\r\n                        PostMineAction.updateLastCard,\r\n                        true\r\n                    );\r\n                }\r\n            },\r\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    const handleClick = useCallback(\r\n        (index: number) => {\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\r\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\r\n        },\r\n        [subtitles, onSeek]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\r\n        },\r\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\r\n    );\r\n\r\n    let subtitleTable = null;\r\n\r\n    if (!subtitles || subtitles.length === 0) {\r\n        if (!loading && displayHelp) {\r\n            subtitleTable = !loading && displayHelp && (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\r\n                </div>\r\n            );\r\n        } else if (subtitles && subtitles.length === 0) {\r\n            subtitleTable = (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">No subtitles</Typography>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        subtitleTable = (\r\n            <TableContainer className={classes.table}>\r\n                <Table>\r\n                    <TableBody>\r\n                        {subtitles.map((s: SubtitleModel, index: number) => {\r\n                            const selected = index in selectedSubtitleIndexes;\r\n\r\n                            return (\r\n                                <SubtitleRow\r\n                                    key={index}\r\n                                    index={index}\r\n                                    compressed={compressed}\r\n                                    selected={selected}\r\n                                    disabled={disabledSubtitleTracks[s.track]}\r\n                                    subtitle={subtitles[index]}\r\n                                    subtitleRef={subtitleRefs[index]}\r\n                                    onClickSubtitle={handleClick}\r\n                                    onCopySubtitle={handleCopy}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\r\n            {subtitleTable}\r\n        </Paper>\r\n    );\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AnkiSettings,\r\n    AnkiSettingsToVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeFromVideoMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    ImageModel,\r\n    MiscSettings,\r\n    MiscSettingsToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    PlayMode,\r\n    PlayModeMessage,\r\n    PostMineAction,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitleSettings,\r\n    SubtitleSettingsToVideoMessage,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\nimport { VideoProtocol } from './VideoProtocol';\r\n\r\nexport default class VideoChannel {\r\n    private readonly protocol: VideoProtocol;\r\n    private time: number;\r\n    private isReady: boolean;\r\n    private readyCallbacks: ((paused: boolean) => void)[];\r\n    private playCallbacks: ((echo: boolean) => void)[];\r\n    private pauseCallbacks: ((echo: boolean) => void)[];\r\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\r\n    private exitCallbacks: (() => void)[];\r\n    private offsetCallbacks: ((offset: number) => void)[];\r\n    private popOutToggleCallbacks: (() => void)[];\r\n    private copyCallbacks: ((\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        postMineAction: PostMineAction,\r\n        fromVideo: boolean,\r\n        preventDuplicate: boolean,\r\n        id: string | undefined\r\n    ) => void)[];\r\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\r\n    private appBarToggleCallbacks: (() => void)[];\r\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\r\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\r\n\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null = null;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    duration: number;\r\n\r\n    constructor(protocol: VideoProtocol) {\r\n        this.protocol = protocol;\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.isReady = false;\r\n        this.readyState = 0;\r\n        this.selectedAudioTrack = undefined;\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.protocol.onMessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyFromVideoMessage;\r\n\r\n                    that.duration = readyMessage.duration;\r\n                    that.isReady = true;\r\n                    that.audioTracks = readyMessage.audioTracks;\r\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\r\n                    that.readyState = 4;\r\n                    that.time = readyMessage.currentTime;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.paused);\r\n                    }\r\n                    break;\r\n                case 'readyState':\r\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\r\n\r\n                    that.readyState = readyStateMessage.value;\r\n                    if (that.readyState === 4) {\r\n                        that.oncanplay?.(new Event('canplay'));\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    const playMessage = event.data as PlayFromVideoMessage;\r\n\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback(playMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    const pauseMessage = event.data as PauseFromVideoMessage;\r\n\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback(pauseMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'exit':\r\n                    for (let callback of that.exitCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'offset':\r\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\r\n\r\n                    for (let callback of that.offsetCallbacks) {\r\n                        callback(offsetMessage.value);\r\n                    }\r\n                    break;\r\n                case 'popOutToggle':\r\n                    for (let callback of that.popOutToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'copy':\r\n                    for (let callback of that.copyCallbacks) {\r\n                        const copyMessage = event.data as CopyMessage;\r\n\r\n                        callback(\r\n                            copyMessage.subtitle,\r\n                            copyMessage.surroundingSubtitles,\r\n                            copyMessage.audio,\r\n                            copyMessage.image,\r\n                            copyMessage.url,\r\n                            copyMessage.postMineAction ?? PostMineAction.none,\r\n                            true,\r\n                            copyMessage.preventDuplicate ?? false,\r\n                            copyMessage.id\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'playMode':\r\n                    for (let callback of that.playModeCallbacks) {\r\n                        const playModeMessage = event.data as PlayModeMessage;\r\n                        callback(playModeMessage.playMode);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'sync':\r\n                    // ignore\r\n                    break;\r\n                case 'syncv2':\r\n                    // ignore\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\r\n\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback(ankiDialogRequestMessage.forwardToVideo);\r\n                    }\r\n                    break;\r\n                case 'toggleSubtitleTrackInList':\r\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\r\n\r\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\r\n                        callback(toggleSubtitleTrackInListMessage.track);\r\n                    }\r\n                    break;\r\n                case 'playbackRate':\r\n                    // ignore for now\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.readyState = 3;\r\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    onReady(callback: (paused: boolean) => void) {\r\n        if (this.isReady) {\r\n            callback(false);\r\n        }\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlay(callback: (echo: boolean) => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: (echo: boolean) => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onExit(callback: () => void) {\r\n        this.exitCallbacks.push(callback);\r\n    }\r\n\r\n    onOffset(callback: (offset: number) => void) {\r\n        this.offsetCallbacks.push(callback);\r\n    }\r\n\r\n    onPopOutToggle(callback: () => void) {\r\n        this.popOutToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onCopy(\r\n        callback: (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            postMineAction: PostMineAction,\r\n            fromVideo: boolean,\r\n            preventDuplicate: boolean,\r\n            id: string | undefined\r\n        ) => void\r\n    ) {\r\n        this.copyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlayMode(callback: (playMode: PlayMode) => void) {\r\n        this.playModeCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: () => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: () => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\r\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\r\n    }\r\n\r\n    ready(duration: number) {\r\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    init() {\r\n        this.protocol.postMessage({ command: 'init' });\r\n    }\r\n\r\n    // Return a promise to implement the analogous HTMLMediaElement method\r\n    play(): Promise<void> {\r\n        this.protocol.postMessage({ command: 'play' });\r\n        return new Promise((resolve, reject) => resolve());\r\n    }\r\n\r\n    pause() {\r\n        this.protocol.postMessage({ command: 'pause' });\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\r\n        this.protocol.postMessage({\r\n            command: 'subtitles',\r\n            value: subtitles,\r\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\r\n            names: subtitleFileNames,\r\n        } as SubtitlesToVideoMessage);\r\n    }\r\n\r\n    subtitleSettings(settings: SubtitleSettings) {\r\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    playMode(playMode: PlayMode) {\r\n        const message: PlayModeMessage = {\r\n            command: 'playMode',\r\n            playMode: playMode,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    hideSubtitlePlayerToggle(hidden: boolean) {\r\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\r\n            command: 'hideSubtitlePlayerToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    appBarToggle(hidden: boolean) {\r\n        const message: AppBarToggleMessageToVideoMessage = {\r\n            command: 'appBarToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiDialogRequest() {\r\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\r\n    }\r\n\r\n    finishedAnkiDialogRequest(resume: boolean) {\r\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\r\n            command: 'finishedAnkiDialogRequest',\r\n            resume: resume,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiSettings(settings: AnkiSettings) {\r\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    miscSettings(settings: MiscSettings) {\r\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.protocol.postMessage({ command: 'close' });\r\n        this.protocol.close();\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n    }\r\n}\r\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AutoPausePreference,\r\n    ImageModel,\r\n    KeyBindings,\r\n    mockSurroundingSubtitles,\r\n    PlayMode,\r\n    PostMineAction,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n} from '@project/common';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\r\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\r\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\r\nimport VideoChannel from '../services/VideoChannel';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>({\r\n    root: ({ appBarHidden }) => ({\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n    }),\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    videoFrame: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 0,\r\n        display: 'block',\r\n    },\r\n});\r\n\r\nfunction trackLength(\r\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\r\n    videoRef: MutableRefObject<MediaElement | undefined>,\r\n    subtitles: SubtitleModel[] | undefined,\r\n    useOffset?: boolean\r\n) {\r\n    let subtitlesLength;\r\n    if (subtitles && subtitles.length > 0) {\r\n        if (useOffset) {\r\n            subtitlesLength = subtitles[subtitles.length - 1].end;\r\n        } else {\r\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\r\n        }\r\n    } else {\r\n        subtitlesLength = 0;\r\n    }\r\n\r\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\r\n\r\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\r\n\r\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\r\n}\r\n\r\nexport interface MediaSources {\r\n    subtitleFiles: File[];\r\n    audioFile?: File;\r\n    audioFileUrl?: string;\r\n    videoFile?: File;\r\n    videoFileUrl?: string;\r\n}\r\n\r\nexport interface AnkiDialogFinishedRequest {\r\n    resume: boolean;\r\n    timestamp: number;\r\n}\r\n\r\ninterface PlayerProps {\r\n    sources: MediaSources;\r\n    subtitleReader: SubtitleReader;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    extension: ChromeExtension;\r\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    videoPopOut: boolean;\r\n    tab?: VideoTabModel;\r\n    availableTabs: VideoTabModel[];\r\n    ankiDialogRequestToVideo?: number;\r\n    ankiDialogRequested: boolean;\r\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\r\n    onError: (error: string) => void;\r\n    onUnloadAudio: (url: string) => void;\r\n    onUnloadVideo: (url: string) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audioFile: File | undefined,\r\n        videoFile: File | undefined,\r\n        subtitleFile: File | undefined,\r\n        mediaTimestamp: number | undefined,\r\n        audioTrack: string | undefined,\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        postMineAction: PostMineAction | undefined,\r\n        fromVideo: boolean | undefined,\r\n        preventDuplicate: boolean | undefined,\r\n        id: string | undefined\r\n    ) => void;\r\n    onLoaded: () => void;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\r\n    onAppBarToggle: () => void;\r\n    onVideoPopOut: () => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n    disableKeyEvents: boolean;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    rewindSubtitle?: SubtitleModel;\r\n}\r\n\r\nexport default function Player({\r\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\r\n    subtitleReader,\r\n    settingsProvider,\r\n    extension,\r\n    videoFrameRef,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    videoPopOut,\r\n    tab,\r\n    availableTabs,\r\n    ankiDialogRequestToVideo,\r\n    ankiDialogRequested,\r\n    ankiDialogFinishedRequest,\r\n    onError,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onCopy,\r\n    onLoaded,\r\n    onTabSelected,\r\n    onAnkiDialogRequest,\r\n    onAppBarToggle,\r\n    onVideoPopOut,\r\n    onAutoPauseModeChangedViaBind,\r\n    disableKeyEvents,\r\n    jumpToSubtitle,\r\n    rewindSubtitle,\r\n}: PlayerProps) {\r\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\r\n    const subtitlesRef = useRef<SubtitleModel[]>();\r\n    subtitlesRef.current = subtitles;\r\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [, updateState] = useState<any>();\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [channelId, setChannelId] = useState<string>();\r\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\r\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\r\n    const hideSubtitlePlayerRef = useRef<boolean>();\r\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\r\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\r\n    const playModeRef = useRef<PlayMode>();\r\n    playModeRef.current = playMode;\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const audioRef = useRef<HTMLAudioElement>(null);\r\n    const videoRef = useRef<MediaElement>();\r\n    const mediaAdapter = useMemo(() => {\r\n        if (audioFileUrl) {\r\n            return new MediaAdapter(audioRef);\r\n        } else if (videoFileUrl || tab) {\r\n            return new MediaAdapter(videoRef);\r\n        }\r\n\r\n        return new MediaAdapter({ current: null });\r\n    }, [audioFileUrl, videoFileUrl, tab]);\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const classes = useStyles({ appBarHidden });\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\r\n\r\n    const seek = useCallback(\r\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\r\n            clock.setTime(time);\r\n            forceUpdate();\r\n\r\n            if (forwardToMedia) {\r\n                await mediaAdapter.seek(time / 1000);\r\n            }\r\n        },\r\n        [forceUpdate, mediaAdapter]\r\n    );\r\n\r\n    const applyOffset = useCallback(\r\n        (offset: number, forwardToVideo: boolean) => {\r\n            setOffset(offset);\r\n\r\n            setSubtitles((subtitles) => {\r\n                if (!subtitles) {\r\n                    return;\r\n                }\r\n\r\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\r\n\r\n                const newSubtitles = subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\r\n                    track: s.track,\r\n                }));\r\n\r\n                if (forwardToVideo) {\r\n                    if (videoRef.current instanceof VideoChannel) {\r\n                        videoRef.current.subtitles(\r\n                            newSubtitles,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return newSubtitles;\r\n            });\r\n        },\r\n        [subtitleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let channel: VideoChannel | undefined = undefined;\r\n        let channelClosed = false;\r\n\r\n        async function init() {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.close();\r\n            }\r\n            videoRef.current = undefined;\r\n            clock.setTime(0);\r\n            clock.stop();\r\n            setOffset(0);\r\n            setPlaying(false);\r\n            setAudioTracks(undefined);\r\n            setSelectedAudioTrack(undefined);\r\n            setPlayMode(PlayMode.normal);\r\n\r\n            if (audioRef.current) {\r\n                audioRef.current.currentTime = 0;\r\n                audioRef.current.pause();\r\n            }\r\n\r\n            let subtitles: DisplaySubtitleModel[] | undefined;\r\n\r\n            if (subtitleFiles.length > 0) {\r\n                setLoadingSubtitles(true);\r\n\r\n                try {\r\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\r\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\r\n                    subtitles = nodes.map((s) => ({\r\n                        text: s.text,\r\n                        textImage: s.textImage,\r\n                        start: s.start,\r\n                        originalStart: s.start,\r\n                        end: s.end,\r\n                        originalEnd: s.end,\r\n                        displayTime: timeDurationDisplay(s.start, length),\r\n                        track: s.track,\r\n                    }));\r\n\r\n                    setSubtitles(subtitles);\r\n                    setLastJumpToTopTimestamp(Date.now());\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        onError(e.message);\r\n                    } else {\r\n                        onError(String(e));\r\n                    }\r\n                } finally {\r\n                    setLoadingSubtitles(false);\r\n                }\r\n            } else {\r\n                subtitles = undefined;\r\n            }\r\n\r\n            if (audioFileUrl) {\r\n                await mediaAdapter.onReady();\r\n                forceUpdate();\r\n            } else if (videoFileUrl || tab) {\r\n                if (channelClosed) {\r\n                    return;\r\n                }\r\n\r\n                if (videoFileUrl) {\r\n                    const channelId = uuidv4();\r\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\r\n                    setChannelId(channelId);\r\n                } else if (tab) {\r\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\r\n                    channel.init();\r\n                } else {\r\n                    // Not possible\r\n                    // But throw error so typescript recognizes channel as defined\r\n                    throw new Error('Unreachable code');\r\n                }\r\n\r\n                videoRef.current = channel;\r\n                let subscribed = false;\r\n\r\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\r\n                channel.onPopOutToggle(() => onVideoPopOut());\r\n                channel.onHideSubtitlePlayerToggle(() => {\r\n                    setHideSubtitlePlayer((hidden) => {\r\n                        channel?.hideSubtitlePlayerToggle(!hidden);\r\n                        return !hidden;\r\n                    });\r\n                });\r\n                channel.onAppBarToggle(() => {\r\n                    onAppBarToggle();\r\n                });\r\n                channel.onReady((paused) => {\r\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\r\n                    channel?.ready(lengthRef.current);\r\n\r\n                    if (subtitlesRef.current) {\r\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\r\n                        channel?.subtitles(\r\n                            subtitlesRef.current,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n\r\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\r\n                    channel?.miscSettings(settingsProvider.miscSettings);\r\n                    channel?.playMode(playModeRef.current!);\r\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\r\n\r\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\r\n                        setAudioTracks(channel?.audioTracks);\r\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\r\n                    } else {\r\n                        setAudioTracks(undefined);\r\n                        setSelectedAudioTrack(undefined);\r\n                    }\r\n\r\n                    if (videoRef.current) {\r\n                        clock.setTime(videoRef.current.currentTime * 1000);\r\n                    }\r\n\r\n                    if (paused) {\r\n                        clock.stop();\r\n                    } else {\r\n                        clock.start();\r\n                    }\r\n\r\n                    setPlaying(!paused);\r\n\r\n                    if (!subscribed) {\r\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\r\n                        channel?.onCopy(\r\n                            (\r\n                                subtitle,\r\n                                surroundingSubtitles,\r\n                                audio,\r\n                                image,\r\n                                url,\r\n                                postMineAction,\r\n                                fromVideo,\r\n                                preventDuplicate,\r\n                                id\r\n                            ) =>\r\n                                onCopy(\r\n                                    subtitle,\r\n                                    surroundingSubtitles,\r\n                                    audioFile,\r\n                                    videoFile,\r\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\r\n                                    clock.time(lengthRef.current),\r\n                                    channel?.selectedAudioTrack,\r\n                                    audio,\r\n                                    image,\r\n                                    url,\r\n                                    postMineAction,\r\n                                    fromVideo,\r\n                                    preventDuplicate,\r\n                                    id\r\n                                )\r\n                        );\r\n                        channel?.onPlayMode((playMode) => {\r\n                            setPlayMode(playMode);\r\n                            channel?.playMode(playMode);\r\n                        });\r\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await seek(currentTime * 1000, clock, forwardToMedia);\r\n\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n                        });\r\n                        channel?.onAudioTrackSelected(async (id) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await mediaAdapter.onReady();\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n\r\n                            setSelectedAudioTrack(id);\r\n                        });\r\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\r\n                        channel?.onToggleSubtitleTrackInList((track) =>\r\n                            setDisabledSubtitleTracks((tracks) => {\r\n                                const newTracks = { ...tracks };\r\n                                newTracks[track] = !tracks[track];\r\n                                return newTracks;\r\n                            })\r\n                        );\r\n\r\n                        subscribed = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        init().then(() => onLoaded());\r\n\r\n        return () => {\r\n            channel?.close();\r\n            channelClosed = true;\r\n        };\r\n    }, [\r\n        subtitleReader,\r\n        extension,\r\n        settingsProvider,\r\n        clock,\r\n        mediaAdapter,\r\n        seek,\r\n        onLoaded,\r\n        onError,\r\n        onUnloadVideo,\r\n        onCopy,\r\n        onAnkiDialogRequest,\r\n        onAppBarToggle,\r\n        onVideoPopOut,\r\n        subtitleFiles,\r\n        audioFile,\r\n        audioFileUrl,\r\n        videoFile,\r\n        videoFileUrl,\r\n        tab,\r\n        forceUpdate,\r\n        videoFrameRef,\r\n        applyOffset,\r\n    ]);\r\n\r\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(true);\r\n        clock.start();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.play();\r\n        }\r\n    }\r\n\r\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(false);\r\n        clock.stop();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.pause();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.ankiDialogRequest();\r\n        }\r\n    }, [ankiDialogRequestToVideo]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\r\n            }\r\n\r\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\r\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequested && playingRef.current) {\r\n            pause(clock, mediaAdapter, true);\r\n            setResumeOnFinishedAnkiDialogRequest(true);\r\n        }\r\n    }, [ankiDialogRequested, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (playMode !== PlayMode.condensed) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let seeking = false;\r\n        let expectedSeekTime = 1000;\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n\r\n            if (!length) {\r\n                return;\r\n            }\r\n\r\n            const progress = clock.progress(length);\r\n\r\n            let currentOrNextIndex = 0;\r\n            let currentIndex = -1;\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        currentIndex = i;\r\n                        currentOrNextIndex = i;\r\n                    } else {\r\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (currentIndex !== currentOrNextIndex) {\r\n                const nextSubtitle = subtitles[currentOrNextIndex];\r\n\r\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\r\n                    return;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.stop();\r\n                }\r\n\r\n                if (!seeking) {\r\n                    seeking = true;\r\n                    const t0 = Date.now();\r\n                    await seek(nextSubtitle.start, clock, true);\r\n                    expectedSeekTime = Date.now() - t0;\r\n                    seeking = false;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.start();\r\n                }\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [subtitles, playMode, clock, seek]);\r\n\r\n    const handleOnStartedShowingSubtitle = useCallback(() => {\r\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atStart) {\r\n            return;\r\n        }\r\n\r\n        pause(clock, mediaAdapter, true);\r\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\r\n\r\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\r\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atEnd) {\r\n            return;\r\n        }\r\n\r\n        pause(clock, mediaAdapter, true);\r\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\r\n\r\n    useEffect(() => {\r\n        if (videoPopOut && channelId && videoFileUrl) {\r\n            window.open(\r\n                process.env.PUBLIC_URL +\r\n                    '/?video=' +\r\n                    encodeURIComponent(videoFileUrl) +\r\n                    '&channel=' +\r\n                    channelId +\r\n                    '&popout=true',\r\n                'asbplayer-video-' + videoFileUrl,\r\n                'resizable,width=800,height=450'\r\n            );\r\n        }\r\n\r\n        setLastJumpToTopTimestamp(Date.now());\r\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\r\n\r\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handleSeek = useCallback(\r\n        async (progress: number) => {\r\n            if (!lengthRef.current) {\r\n                return;\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(progress * lengthRef.current, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                clock.start();\r\n            }\r\n        },\r\n        [clock, seek]\r\n    );\r\n\r\n    const handleSeekToSubtitle = useCallback(\r\n        async (time: number, shouldPlay: boolean) => {\r\n            if (!shouldPlay) {\r\n                pause(clock, mediaAdapter, true);\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(time, clock, true);\r\n\r\n            if (shouldPlay && !playingRef.current) {\r\n                // play method will start the clock again\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, seek, mediaAdapter]\r\n    );\r\n\r\n    const handleCopyFromSubtitlePlayer = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            postMineAction: PostMineAction,\r\n            preventDuplicate: boolean\r\n        ) => {\r\n            onCopy(\r\n                subtitle,\r\n                surroundingSubtitles,\r\n                audioFile,\r\n                videoFile,\r\n                subtitleFiles[subtitle.track],\r\n                clock.time(lengthRef.current),\r\n                selectedAudioTrack,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                postMineAction,\r\n                false,\r\n                preventDuplicate,\r\n                undefined\r\n            );\r\n        },\r\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\r\n    );\r\n\r\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        mousePositionRef.current.x = e.screenX;\r\n        mousePositionRef.current.y = e.screenY;\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        async (id: string) => {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.audioTrackSelected(id);\r\n            }\r\n\r\n            pause(clock, mediaAdapter, true);\r\n\r\n            await seek(0, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, mediaAdapter, seek]\r\n    );\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\r\n        },\r\n        [applyOffset]\r\n    );\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (audioRef.current instanceof HTMLMediaElement) {\r\n            audioRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\r\n\r\n    const handleToggleSubtitleTrack = useCallback(\r\n        (track: number) =>\r\n            setDisabledSubtitleTracks((tracks) => {\r\n                const newTracks = { ...tracks };\r\n                newTracks[track] = !tracks[track];\r\n                return newTracks;\r\n            }),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (tab) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n            const progress = clock.progress(length);\r\n\r\n            if (progress >= 1) {\r\n                pause(clock, mediaAdapter, true);\r\n                await seek(0, clock, true);\r\n                setLastJumpToTopTimestamp(Date.now());\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    pause(clock, mediaAdapter, true);\r\n                } else {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, clock, mediaAdapter, disableKeyEvents]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAutoPause(\r\n            (event) => {\r\n                if (tab) {\r\n                    return;\r\n                }\r\n\r\n                event.preventDefault();\r\n                const newPlayMode = playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\r\n                setPlayMode(newPlayMode);\r\n                onAutoPauseModeChangedViaBind(newPlayMode);\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n    }, [disableKeyEvents, settingsProvider, playMode, tab, onAutoPauseModeChangedViaBind]);\r\n\r\n    useEffect(() => {\r\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\r\n            const unbindCopy = KeyBindings.bindCopy(\r\n                (event, subtitle) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        clock.time(lengthRef.current),\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => disableKeyEvents,\r\n                () => {\r\n                    if (!lengthRef.current) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                }\r\n            );\r\n\r\n            const unbindAnkiExport = KeyBindings.bindAnkiExport(\r\n                (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        timestamp,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        PostMineAction.showAnkiDialog,\r\n                        false,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => false\r\n            );\r\n\r\n            return () => {\r\n                unbindCopy();\r\n                unbindAnkiExport();\r\n            };\r\n        }\r\n    }, [audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\r\n\r\n    useEffect(() => {\r\n        if (videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.appBarToggle(appBarHidden);\r\n        }\r\n    }, [appBarHidden]);\r\n\r\n    useEffect(() => {\r\n        if (!rewindSubtitle) {\r\n            return;\r\n        }\r\n\r\n        if (playingRef.current) {\r\n            clock.stop();\r\n        }\r\n\r\n        handleSeekToSubtitle(rewindSubtitle.start, false);\r\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\r\n\r\n    const length = lengthRef.current;\r\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\r\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\r\n\r\n    return (\r\n        <div onMouseMove={handleMouseMove} className={classes.root}>\r\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\r\n                {videoInWindow && (\r\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\r\n                        <iframe\r\n                            ref={videoFrameRef}\r\n                            className={classes.videoFrame}\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                '/?video=' +\r\n                                encodeURIComponent(videoFileUrl!) +\r\n                                '&channel=' +\r\n                                channelId +\r\n                                '&popout=false'\r\n                            }\r\n                            title=\"asbplayer\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\r\n                    <Grid\r\n                        item\r\n                        style={{\r\n                            flexGrow: videoInWindow ? 0 : 1,\r\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\r\n                        }}\r\n                    >\r\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\r\n                            <Controls\r\n                                mousePositionRef={mousePositionRef}\r\n                                playing={playing}\r\n                                clock={clock}\r\n                                length={length}\r\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\r\n                                audioTracks={audioTracks}\r\n                                selectedAudioTrack={selectedAudioTrack}\r\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\r\n                                selectedTab={tab}\r\n                                audioFile={audioFile?.name}\r\n                                videoFile={videoFile?.name}\r\n                                offsetEnabled={true}\r\n                                offset={offset}\r\n                                volumeEnabled={Boolean(audioFileUrl)}\r\n                                playModeEnabled={Boolean(videoFileUrl || audioFileUrl)}\r\n                                playMode={playMode}\r\n                                onPlay={handlePlay}\r\n                                onPause={handlePause}\r\n                                onSeek={handleSeek}\r\n                                onAudioTrackSelected={handleAudioTrackSelected}\r\n                                onTabSelected={onTabSelected}\r\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\r\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\r\n                                onOffsetChange={handleOffsetChange}\r\n                                onVolumeChange={handleVolumeChange}\r\n                                onPlayMode={handlePlayMode}\r\n                                disableKeyEvents={disableKeyEvents}\r\n                                settingsProvider={settingsProvider}\r\n                                showOnMouseMovement={true}\r\n                            />\r\n                        )}\r\n                        <SubtitlePlayer\r\n                            playing={playing}\r\n                            subtitles={subtitles}\r\n                            clock={clock}\r\n                            length={length}\r\n                            jumpToSubtitle={jumpToSubtitle}\r\n                            drawerOpen={drawerOpen}\r\n                            appBarHidden={appBarHidden}\r\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\r\n                            loading={loadingSubtitles}\r\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\r\n                            disableKeyEvents={disableKeyEvents}\r\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\r\n                            hidden={videoInWindow && hideSubtitlePlayer}\r\n                            disabledSubtitleTracks={disabledSubtitleTracks}\r\n                            onSeek={handleSeekToSubtitle}\r\n                            onCopy={handleCopyFromSubtitlePlayer}\r\n                            onOffsetChange={handleOffsetChange}\r\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\r\n                            onStartedShowing={handleOnStartedShowingSubtitle}\r\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\r\n                            settingsProvider={settingsProvider}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <audio ref={audioRef} src={audioFileUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onProceed: (fieldName: string) => void;\r\n    onCancel: () => void;\r\n    existingCustomFieldNames: string[];\r\n}\r\n\r\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\r\n    const [fieldName, setFieldName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setFieldName('');\r\n    }, [open]);\r\n\r\n    const fieldExists = [\r\n        ...existingCustomFieldNames,\r\n        'Sentence',\r\n        'Word',\r\n        'Definition',\r\n        'Source',\r\n        'Image',\r\n        'Audio',\r\n    ].includes(fieldName);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            disableEnforceFocus\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={onCancel}\r\n        >\r\n            <DialogTitle>New Custom Field</DialogTitle>\r\n            <DialogContent>\r\n                <form>\r\n                    <TextField\r\n                        error={fieldExists}\r\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label=\"Field Name\"\r\n                        value={fieldName}\r\n                        color=\"secondary\"\r\n                        onChange={(e) => setFieldName(e.target.value)}\r\n                    />\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onCancel()}>Cancel</Button>\r\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\r\n                    Create\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { computeStyles } from '../services/Util';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CustomFieldDialog from './CustomFieldDialog';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { Anki, AsbplayerSettings, AutoPausePreference } from '@project/common';\r\nimport { TagsTextField } from '@project/common/components';\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitleSetting: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitlePreview: {\r\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\r\n        backgroundSize: '20px 20px',\r\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        maxWidth: '100%',\r\n        padding: 10,\r\n    },\r\n    subtitlePreviewInput: {\r\n        border: 'none',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(0,0,0,0)',\r\n        '&:focus': {\r\n            outline: 'none',\r\n        },\r\n    },\r\n    addFieldButton: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'end',\r\n        alignItems: 'flex-end',\r\n    },\r\n}));\r\n\r\ninterface SelectableSettingProps {\r\n    label: string;\r\n    value: string;\r\n    selections?: string[];\r\n    removable?: boolean;\r\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\r\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\r\n    onRemoval?: () => void;\r\n}\r\n\r\nfunction SelectableSetting({\r\n    label,\r\n    value,\r\n    selections,\r\n    removable,\r\n    onChange,\r\n    onSelectionChange,\r\n    onRemoval,\r\n}: SelectableSettingProps) {\r\n    const classes = useSelectableSettingStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                label={label}\r\n                value={value}\r\n                onChange={onChange}\r\n                fullWidth\r\n                color=\"secondary\"\r\n                InputProps={{\r\n                    endAdornment: removable && (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton onClick={(e) => onRemoval?.()}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel></InputLabel>\r\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\r\n                    {selections &&\r\n                        selections.map((s) => (\r\n                            <MenuItem key={s} value={s}>\r\n                                {s}\r\n                            </MenuItem>\r\n                        ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    anki: Anki;\r\n    open: boolean;\r\n    settings: AsbplayerSettings;\r\n    onClose: (settings: AsbplayerSettings) => void;\r\n}\r\n\r\nexport default function SettingsDialog({ anki, open, settings, onClose }: Props) {\r\n    const classes = useStyles();\r\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\r\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\r\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\r\n    const [deck, setDeck] = useState<string>(settings.deck || '');\r\n    const [deckNames, setDeckNames] = useState<string[]>();\r\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\r\n    const [modelNames, setModelNames] = useState<string[]>();\r\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\r\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\r\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\r\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\r\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\r\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\r\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\r\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\r\n    const [tags, setTags] = useState<string[]>(settings.tags);\r\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\r\n    const [fieldNames, setFieldNames] = useState<string[]>();\r\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\r\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\r\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\r\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\r\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\r\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\r\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\r\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\r\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\r\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\r\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\r\n        settings.subtitleBackgroundOpacity\r\n    );\r\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\r\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\r\n        settings.imageBasedSubtitleScaleFactor\r\n    );\r\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\r\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\r\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\r\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\r\n\r\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setAnkiConnectUrl(e.target.value);\r\n        setAnkiConnectUrlChangeTimestamp(Date.now());\r\n    }, []);\r\n\r\n    const handleRetryAnkiConnectUrl = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\r\n        []\r\n    );\r\n    const handleDeckChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\r\n        []\r\n    );\r\n    const handleDeckSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\r\n        []\r\n    );\r\n    const handleNoteTypeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\r\n        []\r\n    );\r\n    const handleNoteTypeSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSentenceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSentenceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleDefinitionFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\r\n        []\r\n    );\r\n    const handleDefinitionFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\r\n        []\r\n    );\r\n    const handleAudioFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleImageFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\r\n        []\r\n    );\r\n    const handleImageFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleWordFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\r\n        []\r\n    );\r\n    const handleWordFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSourceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSourceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleUrlFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\r\n        []\r\n    );\r\n    const handleUrlFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioPaddingStart = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAudioPaddingEnd = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageWidth = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageHeight = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleSizeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineThicknessChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundOpacityChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleFontFamilyChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitlePreviewChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\r\n        []\r\n    );\r\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAddCustomField = useCallback((customFieldName: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = '';\r\n            return newCustomFields;\r\n        });\r\n        setCustomFieldDialogOpen(false);\r\n    }, []);\r\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = value;\r\n            return newCustomFields;\r\n        });\r\n    }, []);\r\n    const handleCustomFieldRemoval = useCallback(\r\n        (customFieldName: string) =>\r\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n                const newCustomFields: { [key: string]: string } = {};\r\n                Object.assign(newCustomFields, oldCustomFields);\r\n                delete newCustomFields[customFieldName];\r\n                return newCustomFields;\r\n            }),\r\n        []\r\n    );\r\n    const handleTagsChange = useCallback((newTags: string[]) => {\r\n        setTags(newTags);\r\n    }, []);\r\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\r\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\r\n            throw new Error(`Invalid theme type ${e.target.value}`);\r\n        }\r\n\r\n        setThemeType(e.target.value);\r\n    }, []);\r\n    const handleCopyToClipboardOnMine = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\r\n        []\r\n    );\r\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\r\n    }, []);\r\n    const subtitlePreviewStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleColor: subtitleColor,\r\n                subtitleSize: subtitleSize,\r\n                subtitleOutlineThickness: subtitleOutlineThickness,\r\n                subtitleOutlineColor: subtitleOutlineColor,\r\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\r\n                subtitleBackgroundColor: subtitleBackgroundColor,\r\n                subtitleFontFamily: subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleColor,\r\n            subtitleSize,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleBackgroundColor,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let canceled = false;\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                await anki.requestPermission(ankiConnectUrl);\r\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\r\n                setModelNames(await anki.modelNames(ankiConnectUrl));\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setDeckNames(undefined);\r\n                setModelNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            canceled = true;\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\r\n\r\n    useEffect(() => {\r\n        if (!noteType || ankiConnectUrlError) {\r\n            return undefined;\r\n        }\r\n\r\n        let canceled = false;\r\n\r\n        async function refreshFieldNames() {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setFieldNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }\r\n\r\n        refreshFieldNames();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        };\r\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        onClose({\r\n            ankiConnectUrl: ankiConnectUrl,\r\n            deck: deck,\r\n            noteType: noteType,\r\n            sentenceField: sentenceField,\r\n            definitionField: definitionField,\r\n            audioField: audioField,\r\n            imageField: imageField,\r\n            wordField: wordField,\r\n            sourceField: sourceField,\r\n            urlField: urlField,\r\n            tags: tags.filter((t) => t !== ''),\r\n            subtitleSize: Number(subtitleSize),\r\n            subtitleColor: subtitleColor,\r\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\r\n            subtitleOutlineColor: subtitleOutlineColor,\r\n            subtitleBackgroundColor: subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\r\n            subtitleFontFamily: subtitleFontFamily,\r\n            subtitlePreview: subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\r\n            customAnkiFields: customFields,\r\n            preferMp3: preferMp3,\r\n            themeType: themeType,\r\n            audioPaddingStart: audioPaddingStart,\r\n            audioPaddingEnd: audioPaddingEnd,\r\n            maxImageWidth: maxImageWidth,\r\n            maxImageHeight: maxImageHeight,\r\n            surroundingSubtitlesCountRadius: settings.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: settings.surroundingSubtitlesTimeRadius,\r\n            volume: settings.volume,\r\n            theaterMode: settings.theaterMode,\r\n            copyToClipboardOnMine: copyToClipboardOnMine,\r\n            autoPausePreference: autoPausePreference,\r\n        });\r\n    }, [\r\n        onClose,\r\n        ankiConnectUrl,\r\n        deck,\r\n        noteType,\r\n        sentenceField,\r\n        definitionField,\r\n        audioField,\r\n        imageField,\r\n        wordField,\r\n        sourceField,\r\n        urlField,\r\n        customFields,\r\n        tags,\r\n        preferMp3,\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        subtitlePreview,\r\n        imageBasedSubtitleScaleFactor,\r\n        themeType,\r\n        audioPaddingStart,\r\n        audioPaddingEnd,\r\n        maxImageWidth,\r\n        maxImageHeight,\r\n        settings.surroundingSubtitlesCountRadius,\r\n        settings.surroundingSubtitlesTimeRadius,\r\n        settings.volume,\r\n        settings.theaterMode,\r\n        copyToClipboardOnMine,\r\n        autoPausePreference,\r\n    ]);\r\n\r\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\r\n        return (\r\n            <SelectableSetting\r\n                key={customFieldName}\r\n                label={`${customFieldName} Field`}\r\n                value={customFields[customFieldName]}\r\n                selections={fieldNames!}\r\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\r\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\r\n                removable={true}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CustomFieldDialog\r\n                open={customFieldDialogOpen}\r\n                existingCustomFieldNames={Object.keys(customFields)}\r\n                onProceed={handleAddCustomField}\r\n                onCancel={() => setCustomFieldDialogOpen(false)}\r\n            />\r\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\r\n                <DialogTitle>Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"column\" spacing={3}>\r\n                        <Grid item>\r\n                            <FormLabel>Anki</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <TextField\r\n                                    label=\"Anki Connect URL\"\r\n                                    value={ankiConnectUrl}\r\n                                    error={Boolean(ankiConnectUrlError)}\r\n                                    helperText={ankiConnectUrlError}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAnkiConnectUrlChange}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <FormHelperText>\r\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\r\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\r\n                                    <Link\r\n                                        color=\"secondary\"\r\n                                        target=\"_blank\"\r\n                                        rel=\"noreferrer\"\r\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                                    >\r\n                                        video\r\n                                    </Link>\r\n                                    .\r\n                                </FormHelperText>\r\n                                <SelectableSetting\r\n                                    label=\"Deck\"\r\n                                    value={deck}\r\n                                    selections={deckNames}\r\n                                    onChange={handleDeckChange}\r\n                                    onSelectionChange={handleDeckSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Note Type\"\r\n                                    value={noteType}\r\n                                    selections={modelNames}\r\n                                    onChange={handleNoteTypeChange}\r\n                                    onSelectionChange={handleNoteTypeSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Sentence Field\"\r\n                                    value={sentenceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSentenceFieldChange}\r\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Definition Field\"\r\n                                    value={definitionField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleDefinitionFieldChange}\r\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Word Field\"\r\n                                    value={wordField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleWordFieldChange}\r\n                                    onSelectionChange={handleWordFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Audio Field\"\r\n                                    value={audioField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleAudioFieldChange}\r\n                                    onSelectionChange={handleAudioFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Image Field\"\r\n                                    value={imageField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleImageFieldChange}\r\n                                    onSelectionChange={handleImageFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Source Field\"\r\n                                    value={sourceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSourceFieldChange}\r\n                                    onSelectionChange={handleSourceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"URL Field\"\r\n                                    value={urlField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleUrlFieldChange}\r\n                                    onSelectionChange={handleUrlFieldSelectionChange}\r\n                                />\r\n                                {customFieldInputs}\r\n                                <Button\r\n                                    className={classes.addFieldButton}\r\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\r\n                                >\r\n                                    Add Custom Field\r\n                                </Button>\r\n                                <TagsTextField\r\n                                    label=\"Tags\"\r\n                                    helperText=\"Comma-separated list of strings\"\r\n                                    fullWidth\r\n                                    color=\"secondary\"\r\n                                    tags={tags}\r\n                                    onTagsChange={handleTagsChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Mining</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\r\n                                    label=\"Re-encode audio as mp3 (slower)\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={copyToClipboardOnMine}\r\n                                            onChange={handleCopyToClipboardOnMine}\r\n                                        />\r\n                                    }\r\n                                    label=\"Copy mined subtitles to clipboard\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding Start\"\r\n                                    fullWidth\r\n                                    value={audioPaddingStart}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingStart}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding End\"\r\n                                    fullWidth\r\n                                    value={audioPaddingEnd}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingEnd}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Width\"\r\n                                    fullWidth\r\n                                    value={maxImageWidth}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageWidth}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Height\"\r\n                                    fullWidth\r\n                                    value={maxImageHeight}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageHeight}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Auto-pause Preference</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\r\n                                            value={AutoPausePreference.atStart}\r\n                                            onChange={handleAutoPausePreferenceChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"At Subtitle Start\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\r\n                                            value={AutoPausePreference.atEnd}\r\n                                            onChange={handleAutoPausePreferenceChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"At Subtitle End\"\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\r\n                            <FormGroup>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Color\"\r\n                                        fullWidth\r\n                                        value={subtitleColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Size\"\r\n                                        fullWidth\r\n                                        value={subtitleSize}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleSizeChange}\r\n                                        inputProps={{\r\n                                            min: 1,\r\n                                            step: 1,\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Outline Color\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleOutlineColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Outline Thickness\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineThickness}\r\n                                        onChange={handleSubtitleOutlineThicknessChange}\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            step: 1,\r\n                                        }}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Background Color\"\r\n                                        fullWidth\r\n                                        value={subtitleBackgroundColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Background Opacity\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={subtitleBackgroundOpacity}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundOpacityChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        label=\"Subtitle Font Family\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        value={subtitleFontFamily}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleFontFamilyChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Image-based Subtitle Scale Factor\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={imageBasedSubtitleScaleFactor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitlePreview}>\r\n                                    <input\r\n                                        value={subtitlePreview}\r\n                                        className={classes.subtitlePreviewInput}\r\n                                        onChange={handleSubtitlePreviewChange}\r\n                                        style={subtitlePreviewStyles}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Theme</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'light'}\r\n                                            value=\"light\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Light\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'dark'}\r\n                                            value=\"dark\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Dark\"\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { AsbplayerSettings, AsbplayerSettingsProvider, AutoPausePreference } from '@project/common';\r\n\r\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\r\nconst defaultSubtitleSize = 36;\r\nconst defaultSubtitleColor = '#ffffff';\r\nconst defaultSubtitleOutlineThickness = 0;\r\nconst defaultSubtitleOutlineColor = '#000000';\r\nconst defaultSubtitleBackgroundColor = '#000000';\r\nconst defaultSubtitleBackgroundOpacity = 0.5;\r\nconst defaultSubtitleFontFamily = '';\r\nconst defaultSubtitlePreview = 'アあ安';\r\nconst defaultVolume = 100;\r\nconst defaultAudioPaddingStart = 0;\r\nconst defaultAudioPaddingEnd = 500;\r\nconst defaultMaxImageWidth = 0;\r\nconst defaultMaxImageHeight = 0;\r\nconst defaultSurroundingSubtitlesCountRadius = 1;\r\nconst defaultSurroundingSubtitlesTimeRadius = 5000;\r\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\r\n\r\nconst ankiConnectUrlKey = 'ankiConnectUrl';\r\nconst deckKey = 'deck';\r\nconst noteTypeKey = 'noteType';\r\nconst sentenceFieldKey = 'sentenceField';\r\nconst definitionFieldKey = 'definitionField';\r\nconst audioFieldKey = 'audioField';\r\nconst imageFieldKey = 'imageField';\r\nconst wordFieldKey = 'wordField';\r\nconst sourceFieldKey = 'sourceField';\r\nconst urlFieldKey = 'urlField';\r\nconst customAnkiFieldsKey = 'customAnkiFields';\r\nconst tagsKey = 'tags';\r\nconst subtitleSizeKey = 'subtitleSize';\r\nconst subtitleColorKey = 'subtitleColor';\r\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\r\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\r\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\r\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\r\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\r\nconst subtitlePreviewKey = 'subtitlePreview';\r\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\r\nconst audioPaddingStartKey = 'audioPaddingStart';\r\nconst audioPaddingEndKey = 'audioPaddingEnd';\r\nconst maxImageWidthKey = 'maxImageWidth';\r\nconst maxImageHeightKey = 'maxImageHeight';\r\nconst volumeKey = 'volume';\r\nconst theaterModeKey = 'theaterMode';\r\nconst preferMp3Key = 'preferMp3';\r\nconst themeTypeKey = 'themeType';\r\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\r\nconst autoPausePreferenceKey = 'autoPausePreference';\r\n\r\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\r\n    private _tags?: string[];\r\n\r\n    constructor() {\r\n        // Cache tags so that it can be used in useEffect dependencies\r\n        this._tags = this.tags;\r\n    }\r\n\r\n    get settings(): AsbplayerSettings {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            sourceField: this.sourceField,\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            subtitlePreview: this.subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n            preferMp3: this.preferMp3,\r\n            themeType: this.themeType,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n            volume: this.volume,\r\n            theaterMode: this.theaterMode,\r\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\r\n            autoPausePreference: this.autoPausePreference,\r\n        };\r\n    }\r\n\r\n    set settings(newSettings: AsbplayerSettings) {\r\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\r\n        this.deck = newSettings.deck;\r\n        this.noteType = newSettings.noteType;\r\n        this.sentenceField = newSettings.sentenceField;\r\n        this.definitionField = newSettings.definitionField;\r\n        this.audioField = newSettings.audioField;\r\n        this.imageField = newSettings.imageField;\r\n        this.wordField = newSettings.wordField;\r\n        this.sourceField = newSettings.sourceField;\r\n        this.urlField = newSettings.urlField;\r\n        this.tags = newSettings.tags;\r\n        this.subtitleSize = newSettings.subtitleSize;\r\n        this.subtitleColor = newSettings.subtitleColor;\r\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\r\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\r\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\r\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\r\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\r\n        this.subtitlePreview = newSettings.subtitlePreview;\r\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\r\n        this.customAnkiFields = newSettings.customAnkiFields;\r\n        this.preferMp3 = newSettings.preferMp3;\r\n        this.themeType = newSettings.themeType;\r\n        this.audioPaddingStart = newSettings.audioPaddingStart;\r\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\r\n        this.maxImageWidth = newSettings.maxImageWidth;\r\n        this.maxImageHeight = newSettings.maxImageHeight;\r\n        this.volume = newSettings.volume;\r\n        this.theaterMode = newSettings.theaterMode;\r\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\r\n        this.autoPausePreference = newSettings.autoPausePreference;\r\n    }\r\n\r\n    get subtitleSettings() {\r\n        return {\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n        };\r\n    }\r\n\r\n    get ankiSettings() {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            sourceField: this.sourceField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            preferMp3: this.preferMp3,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n        };\r\n    }\r\n\r\n    get miscSettings() {\r\n        return {\r\n            themeType: this.themeType,\r\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\r\n            autoPausePreference: this.autoPausePreference,\r\n        };\r\n    }\r\n\r\n    _getNumberItem(key: string, defaultValue: number) {\r\n        const value = localStorage.getItem(key);\r\n\r\n        if (value === null) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    _setOptionalItem(key: string, value?: string) {\r\n        if (typeof value === 'undefined') {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n\r\n    get ankiConnectUrl() {\r\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\r\n    }\r\n\r\n    set ankiConnectUrl(url) {\r\n        localStorage.setItem(ankiConnectUrlKey, url);\r\n    }\r\n\r\n    get deck() {\r\n        return localStorage.getItem(deckKey) ?? undefined;\r\n    }\r\n\r\n    set deck(deck) {\r\n        this._setOptionalItem(deckKey, deck);\r\n    }\r\n\r\n    get noteType() {\r\n        return localStorage.getItem(noteTypeKey) ?? undefined;\r\n    }\r\n\r\n    set noteType(noteType) {\r\n        this._setOptionalItem(noteTypeKey, noteType);\r\n    }\r\n\r\n    get sentenceField() {\r\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sentenceField(sentenceField) {\r\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\r\n    }\r\n\r\n    get definitionField() {\r\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\r\n    }\r\n\r\n    set definitionField(definitionField) {\r\n        this._setOptionalItem(definitionFieldKey, definitionField);\r\n    }\r\n\r\n    get audioField() {\r\n        return localStorage.getItem(audioFieldKey) ?? undefined;\r\n    }\r\n\r\n    set audioField(audioField) {\r\n        this._setOptionalItem(audioFieldKey, audioField);\r\n    }\r\n\r\n    get imageField() {\r\n        return localStorage.getItem(imageFieldKey) ?? undefined;\r\n    }\r\n\r\n    set imageField(imageField) {\r\n        this._setOptionalItem(imageFieldKey, imageField);\r\n    }\r\n\r\n    get wordField() {\r\n        return localStorage.getItem(wordFieldKey) ?? undefined;\r\n    }\r\n\r\n    set wordField(wordField) {\r\n        this._setOptionalItem(wordFieldKey, wordField);\r\n    }\r\n\r\n    get sourceField() {\r\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sourceField(sourceField) {\r\n        this._setOptionalItem(sourceFieldKey, sourceField);\r\n    }\r\n\r\n    get urlField() {\r\n        return localStorage.getItem(urlFieldKey) ?? undefined;\r\n    }\r\n\r\n    set urlField(urlField) {\r\n        this._setOptionalItem(urlFieldKey, urlField);\r\n    }\r\n\r\n    get customAnkiFields() {\r\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\r\n\r\n        if (ankiFieldsString) {\r\n            return JSON.parse(ankiFieldsString);\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    set customAnkiFields(customAnkiFields) {\r\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\r\n    }\r\n\r\n    get tags() {\r\n        if (typeof this._tags !== 'undefined') {\r\n            return this._tags;\r\n        }\r\n\r\n        const tagsString = localStorage.getItem(tagsKey);\r\n\r\n        if (tagsString) {\r\n            this._tags = JSON.parse(tagsString) as string[];\r\n            return this._tags;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    set tags(tags) {\r\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\r\n        this._tags = undefined;\r\n    }\r\n\r\n    get subtitleColor() {\r\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\r\n    }\r\n\r\n    set subtitleColor(subtitleColor) {\r\n        localStorage.setItem(subtitleColorKey, subtitleColor);\r\n    }\r\n\r\n    get subtitleSize() {\r\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\r\n    }\r\n\r\n    set subtitleSize(subtitleSize) {\r\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\r\n    }\r\n\r\n    get subtitleOutlineColor() {\r\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\r\n    }\r\n\r\n    set subtitleOutlineColor(subtitleOutlineColor) {\r\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\r\n    }\r\n\r\n    get subtitleOutlineThickness() {\r\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\r\n    }\r\n\r\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\r\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\r\n    }\r\n\r\n    get subtitleBackgroundColor() {\r\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\r\n    }\r\n\r\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\r\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\r\n    }\r\n\r\n    get subtitleBackgroundOpacity() {\r\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\r\n    }\r\n\r\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\r\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\r\n    }\r\n\r\n    get subtitleFontFamily() {\r\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\r\n    }\r\n\r\n    set subtitleFontFamily(subtitleFontFamily) {\r\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\r\n    }\r\n\r\n    get subtitlePreview() {\r\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\r\n    }\r\n\r\n    set subtitlePreview(subtitlePreview) {\r\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\r\n    }\r\n\r\n    get imageBasedSubtitleScaleFactor() {\r\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\r\n    }\r\n\r\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\r\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\r\n    }\r\n\r\n    get volume() {\r\n        return this._getNumberItem(volumeKey, defaultVolume);\r\n    }\r\n\r\n    set volume(volume) {\r\n        localStorage.setItem(volumeKey, String(volume));\r\n    }\r\n\r\n    get theaterMode() {\r\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\r\n    }\r\n\r\n    set theaterMode(theaterMode) {\r\n        localStorage.setItem(theaterModeKey, String(theaterMode));\r\n    }\r\n\r\n    get preferMp3() {\r\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\r\n    }\r\n\r\n    set preferMp3(preferMp3) {\r\n        localStorage.setItem(preferMp3Key, String(preferMp3));\r\n    }\r\n\r\n    get themeType() {\r\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\r\n\r\n        if (themeType === null) {\r\n            return 'dark';\r\n        }\r\n\r\n        return themeType;\r\n    }\r\n\r\n    set themeType(themeType: 'dark' | 'light') {\r\n        localStorage.setItem(themeTypeKey, themeType);\r\n    }\r\n\r\n    get audioPaddingStart() {\r\n        const value = localStorage.getItem(audioPaddingStartKey);\r\n\r\n        if (!value) {\r\n            return defaultAudioPaddingStart;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set audioPaddingStart(audioPaddingStart) {\r\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\r\n    }\r\n\r\n    get audioPaddingEnd() {\r\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\r\n    }\r\n\r\n    set audioPaddingEnd(audioPaddingEnd) {\r\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\r\n    }\r\n\r\n    get maxImageWidth() {\r\n        const value = localStorage.getItem(maxImageWidthKey);\r\n\r\n        if (!value) {\r\n            return defaultMaxImageWidth;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set maxImageWidth(maxImageWidth) {\r\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\r\n    }\r\n\r\n    get maxImageHeight() {\r\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\r\n    }\r\n\r\n    set maxImageHeight(maxImageHeight) {\r\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\r\n    }\r\n\r\n    get surroundingSubtitlesCountRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesCountRadius;\r\n    }\r\n\r\n    get surroundingSubtitlesTimeRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesTimeRadius;\r\n    }\r\n\r\n    get copyToClipboardOnMine() {\r\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\r\n    }\r\n\r\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\r\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\r\n    }\r\n\r\n    get autoPausePreference() {\r\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\r\n    }\r\n\r\n    set autoPausePreference(autoPausePreference) {\r\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\r\n    }\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    PlayMode,\r\n    PlayModeMessage,\r\n    PostMineAction,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\n\r\nexport default class PlayerChannel {\r\n    private channel?: BroadcastChannel;\r\n    private time: number;\r\n    private duration: number;\r\n    private readyCallbacks: ((duration: number) => void)[];\r\n    private playCallbacks: (() => void)[];\r\n    private pauseCallbacks: (() => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\r\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\r\n    private closeCallbacks: (() => void)[];\r\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\r\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private ankiDialogRequestCallbacks: (() => void)[];\r\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\r\n\r\n    constructor(channel: string) {\r\n        this.channel = new BroadcastChannel(channel);\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.closeCallbacks = [];\r\n        this.readyCallbacks = [];\r\n        this.subtitlesCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.finishedAnkiDialogRequestCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.channel.onmessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'init':\r\n                    // ignore, this is for the chrome extension\r\n                    break;\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyToVideoMessage;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.duration);\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'close':\r\n                    for (let callback of that.closeCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'subtitles':\r\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\r\n\r\n                    for (let callback of that.subtitlesCallbacks) {\r\n                        callback(subtitlesMessage.value);\r\n                    }\r\n                    break;\r\n                case 'subtitleSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'playMode':\r\n                    const playModeMessage = event.data as PlayModeMessage;\r\n\r\n                    for (let callback of that.playModeCallbacks) {\r\n                        callback(playModeMessage.playMode);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\r\n\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback(hideSubtitlePlayerToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\r\n\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback(appBarToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'finishedAnkiDialogRequest':\r\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\r\n\r\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\r\n                        callback(finishedAnkiDialogRequestMessage.resume);\r\n                    }\r\n                    break;\r\n                case 'ankiSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'miscSettings':\r\n                    // ignore\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\r\n    }\r\n\r\n    onPlay(callback: () => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: () => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onClose(callback: () => void) {\r\n        this.closeCallbacks.push(callback);\r\n    }\r\n\r\n    onReady(callback: (duration: number) => void) {\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\r\n        this.subtitlesCallbacks.push(callback);\r\n    }\r\n\r\n    onPlayMode(callback: (playMode: PlayMode) => void) {\r\n        this.playModeCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: (hidden: boolean) => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: () => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\r\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    ready(\r\n        duration: number,\r\n        paused: boolean,\r\n        audioTracks: AudioTrackModel[] | undefined,\r\n        selectedAudioTrack: string | undefined\r\n    ) {\r\n        const message: ReadyFromVideoMessage = {\r\n            command: 'ready',\r\n            duration: duration,\r\n            paused: paused,\r\n            currentTime: 0,\r\n            audioTracks: audioTracks,\r\n            selectedAudioTrack: selectedAudioTrack,\r\n            playbackRate: 1,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    readyState(readyState: number) {\r\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    play() {\r\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    pause() {\r\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    offset(offset: number) {\r\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    popOutToggle() {\r\n        this.channel?.postMessage({ command: 'popOutToggle' });\r\n    }\r\n\r\n    copy(\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        postMineAction: PostMineAction,\r\n        preventDuplicate?: boolean\r\n    ) {\r\n        const message: CopyMessage = {\r\n            command: 'copy',\r\n            subtitle: subtitle,\r\n            surroundingSubtitles: surroundingSubtitles,\r\n            preventDuplicate: preventDuplicate,\r\n            postMineAction: postMineAction,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    playMode(playMode: PlayMode) {\r\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\r\n    }\r\n\r\n    hideSubtitlePlayerToggle() {\r\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\r\n    }\r\n\r\n    appBarToggle() {\r\n        this.channel?.postMessage({ command: 'appBarToggle' });\r\n    }\r\n\r\n    ankiDialogRequest(forwardToVideo: boolean) {\r\n        const message: AnkiDialogRequestFromVideoMessage = {\r\n            command: 'ankiDialogRequest',\r\n            forwardToVideo: forwardToVideo,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    toggleSubtitleTrackInList(track: number) {\r\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\r\n            command: 'toggleSubtitleTrackInList',\r\n            track: track,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        if (this.channel) {\r\n            this.channel.postMessage({ command: 'exit' });\r\n            this.channel.close();\r\n            this.channel = undefined;\r\n            this.playCallbacks = [];\r\n            this.pauseCallbacks = [];\r\n            this.currentTimeCallbacks = [];\r\n            this.audioTrackSelectedCallbacks = [];\r\n            this.closeCallbacks = [];\r\n            this.readyCallbacks = [];\r\n            this.subtitlesCallbacks = [];\r\n            this.playModeCallbacks = [];\r\n            this.hideSubtitlePlayerToggleCallbacks = [];\r\n            this.appBarToggleCallbacks = [];\r\n            this.ankiDialogRequestCallbacks = [];\r\n            this.finishedAnkiDialogRequestCallbacks = [];\r\n        }\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { arrayEquals, computeStyles } from '../services/Util';\r\nimport {\r\n    KeyBindings,\r\n    surroundingSubtitles,\r\n    mockSurroundingSubtitles,\r\n    humanReadableTime,\r\n    SubtitleModel,\r\n    AudioTrackModel,\r\n    PostMineAction,\r\n    PlayMode,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport Alert from './Alert';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport PlayerChannel from '../services/PlayerChannel';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\n\r\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\r\n    readonly audioTracks: any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        backgroundColor: 'black',\r\n        height: '100vh',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    video: {\r\n        margin: 'auto',\r\n    },\r\n    cursorHidden: {\r\n        cursor: 'none',\r\n    },\r\n    subtitleContainer: {\r\n        position: 'absolute',\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        bottom: 100,\r\n        textAlign: 'center',\r\n        whiteSpace: 'pre-wrap',\r\n        lineHeight: 'normal',\r\n    },\r\n});\r\n\r\nfunction notifyReady(\r\n    element: ExperimentalHTMLVideoElement,\r\n    playerChannel: PlayerChannel,\r\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\r\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\r\n) {\r\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\r\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\r\n\r\n        window.resizeTo(\r\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\r\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\r\n        );\r\n    }\r\n\r\n    let tracks: AudioTrackModel[] | undefined;\r\n    let selectedTrack: string | undefined;\r\n\r\n    if (element.audioTracks) {\r\n        tracks = [];\r\n\r\n        for (let t of element.audioTracks) {\r\n            tracks.push({\r\n                id: t.id,\r\n                label: t.label,\r\n                language: t.language,\r\n            });\r\n\r\n            if (t.enabled) {\r\n                selectedTrack = t.id;\r\n            }\r\n        }\r\n    } else {\r\n        tracks = undefined;\r\n        selectedTrack = undefined;\r\n    }\r\n\r\n    setAudioTracks(tracks);\r\n    setSelectedAudioTrack(selectedTrack);\r\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\r\n}\r\n\r\nfunction errorMessage(element: HTMLVideoElement) {\r\n    let error;\r\n    switch (element.error?.code) {\r\n        case 1:\r\n            error = 'Aborted';\r\n            break;\r\n        case 2:\r\n            error = 'Network error';\r\n            break;\r\n        case 3:\r\n            error = 'Decoding error';\r\n            break;\r\n        case 4:\r\n            error = 'Source not supported';\r\n            break;\r\n        default:\r\n            error = 'Unknown error';\r\n            break;\r\n    }\r\n\r\n    return error + ': ' + (element.error?.message || '<details missing>');\r\n}\r\n\r\nfunction useFullscreen() {\r\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\r\n\r\n    useEffect(() => {\r\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\r\n        document.addEventListener('fullscreenchange', listener);\r\n\r\n        return () => document.removeEventListener('fullscreenchange', listener);\r\n    }, []);\r\n\r\n    return fullscreen;\r\n}\r\n\r\ninterface Props {\r\n    settingsProvider: SettingsProvider;\r\n    videoFile: string;\r\n    channel: string;\r\n    popOut: boolean;\r\n    onError: (error: string) => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n}\r\n\r\ninterface IndexedSubtitleModel extends SubtitleModel {\r\n    index: number;\r\n}\r\n\r\nexport default function VideoPlayer(props: Props) {\r\n    const classes = useStyles();\r\n    const { settingsProvider, videoFile, channel, popOut, onError, onAutoPauseModeChangedViaBind } = props;\r\n    const poppingInRef = useRef<boolean>();\r\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\r\n    const [windowWidth, windowHeight] = useWindowSize(true);\r\n    if (videoRef.current) {\r\n        videoRef.current.width = windowWidth;\r\n        videoRef.current.height = windowHeight;\r\n    }\r\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const fullscreen = useFullscreen();\r\n    const fullscreenRef = useRef<boolean>();\r\n    fullscreenRef.current = fullscreen;\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [length, setLength] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\r\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\r\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\r\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\r\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(settingsProvider.theaterMode);\r\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\r\n    showSubtitlesRef.current = showSubtitles;\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const [showCursor, setShowCursor] = useState<boolean>(false);\r\n    const lastMouseMovementTimestamp = useRef<number>(0);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\r\n        useState<boolean>(false);\r\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\r\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\r\n\r\n    const videoRefCallback = useCallback(\r\n        (element: HTMLVideoElement) => {\r\n            if (element) {\r\n                const videoElement = element as ExperimentalHTMLVideoElement;\r\n                videoRef.current = videoElement;\r\n\r\n                if (videoElement.readyState === 4) {\r\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                } else {\r\n                    videoElement.onloadeddata = (event) => {\r\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                    };\r\n                }\r\n\r\n                videoElement.oncanplay = (event) => {\r\n                    playerChannel.readyState(4);\r\n\r\n                    if (playingRef.current) {\r\n                        clock.start();\r\n                    }\r\n                };\r\n\r\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\r\n\r\n                videoElement.onerror = (event) => onError(errorMessage(element));\r\n            }\r\n        },\r\n        [clock, playerChannel, onError]\r\n    );\r\n\r\n    function selectAudioTrack(id: string) {\r\n        const audioTracks = videoRef.current?.audioTracks;\r\n\r\n        if (!audioTracks) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        for (const t of audioTracks) {\r\n            if (t.id === id) {\r\n                t.enabled = true;\r\n            } else {\r\n                t.enabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        playerChannel.onReady((duration) => setLength(duration));\r\n\r\n        playerChannel.onPlay(async () => {\r\n            await videoRef.current?.play();\r\n            clock.start();\r\n            setPlaying(true);\r\n        });\r\n\r\n        playerChannel.onPause(() => {\r\n            videoRef.current?.pause();\r\n            clock.stop();\r\n            setPlaying(false);\r\n        });\r\n\r\n        playerChannel.onCurrentTime((currentTime) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime = currentTime;\r\n            }\r\n\r\n            if (videoRef.current?.readyState === 4) {\r\n                playerChannel.readyState(4);\r\n            }\r\n\r\n            clock.stop();\r\n            clock.setTime(currentTime * 1000);\r\n        });\r\n\r\n        playerChannel.onAudioTrackSelected((id) => {\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.audioTrackSelected(id);\r\n        });\r\n\r\n        playerChannel.onClose(() => {\r\n            playerChannel.close();\r\n            window.close();\r\n        });\r\n\r\n        playerChannel.onSubtitles((subtitles) => {\r\n            setSubtitles(subtitles);\r\n\r\n            if (subtitles && subtitles.length > 0) {\r\n                const s = subtitles[0];\r\n                const offset = s.start - s.originalStart;\r\n                setOffset(offset);\r\n            }\r\n        });\r\n\r\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\r\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\r\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\r\n        playerChannel.onAnkiDialogRequest(() => {\r\n            if (fullscreenRef.current && !popOut) {\r\n                document.exitFullscreen();\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\r\n            }\r\n        });\r\n\r\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\r\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\r\n                if (resume) {\r\n                    try {\r\n                        await containerRef.current?.requestFullscreen();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\r\n            }\r\n        });\r\n\r\n        window.onbeforeunload = (e) => {\r\n            if (!poppingInRef.current) {\r\n                playerChannel.close();\r\n            }\r\n        };\r\n\r\n        return () => playerChannel.close();\r\n    }, [clock, playerChannel, popOut]);\r\n\r\n    const handlePlay = useCallback(() => {\r\n        if (videoRef.current) {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel]);\r\n\r\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            const time = progress * length;\r\n            playerChannel.currentTime = time / 1000;\r\n        },\r\n        [length, clock, playerChannel]\r\n    );\r\n\r\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\r\n        lastMouseMovementTimestamp.current = Date.now();\r\n\r\n        if (!containerRef.current) {\r\n            return;\r\n        }\r\n\r\n        var bounds = containerRef.current.getBoundingClientRect();\r\n        mousePositionRef.current.x = e.clientX - bounds.left;\r\n        mousePositionRef.current.y = e.clientY - bounds.top;\r\n    }\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n                playerChannel.pause();\r\n            }\r\n\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.currentTime = 0;\r\n            playerChannel.audioTrackSelected(id);\r\n        },\r\n        [playerChannel, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            const now = clock.time(length);\r\n            let showSubtitles = [];\r\n\r\n            for (let i = 0; i < subtitles.length; ++i) {\r\n                const s = subtitles[i];\r\n\r\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\r\n                    showSubtitles.push({ ...s, index: i });\r\n                }\r\n\r\n                if (now < s.start) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\r\n\r\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\r\n                setShowSubtitles(showSubtitles);\r\n            }\r\n        }, 50);\r\n\r\n        return () => clearTimeout(interval);\r\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            setOffset(offset);\r\n            setSubtitles((subtitles) =>\r\n                subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    track: s.track,\r\n                }))\r\n            );\r\n            playerChannel.offset(offset);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                const timestamp = clock.time(length);\r\n\r\n                if (forward) {\r\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\r\n                } else {\r\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\r\n                }\r\n            },\r\n            () => !videoRef.current\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, length, clock]);\r\n\r\n    const calculateSurroundingSubtitles = useCallback(\r\n        (index: number) => {\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy<IndexedSubtitleModel>(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                const noSubtitles = !subtitles || subtitles.length === 0;\r\n\r\n                playerChannel.copy(\r\n                    subtitle,\r\n                    noSubtitles\r\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\r\n                        : calculateSurroundingSubtitles(subtitle.index),\r\n                    PostMineAction.none\r\n                );\r\n\r\n                if (fullscreen) {\r\n                    setAlert(\r\n                        subtitle.text === ''\r\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\r\n                            : `Copied: \"${subtitle.text}\"`\r\n                    );\r\n                    setAlertOpen(true);\r\n                }\r\n            },\r\n            () => false,\r\n            () => {\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                        index: 0,\r\n                    };\r\n                }\r\n\r\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                return showSubtitlesRef.current[0];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitles(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setSubtitlesEnabled((enabled) => !enabled);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInVideo(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setDisabledSubtitleTracks((tracks) => {\r\n                    const newTracks = { ...tracks };\r\n                    newTracks[track] = !tracks[track];\r\n                    return newTracks;\r\n                });\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                playerChannel.toggleSubtitleTrackInList(track);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles, clock, length]);\r\n\r\n    const extractSubtitles = useCallback(\r\n        (\r\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\r\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\r\n        ) => {\r\n            if (!subtitles || subtitles.length === 0) {\r\n                const timestamp = clock.time(length);\r\n                const end = Math.min(timestamp + 5000, length);\r\n                const subtitle = {\r\n                    text: '',\r\n                    start: timestamp,\r\n                    originalStart: timestamp,\r\n                    end: end,\r\n                    originalEnd: end,\r\n                    track: 0,\r\n                };\r\n\r\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\r\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\r\n                const currentSubtitle = showSubtitlesRef.current[0];\r\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\r\n            }\r\n        },\r\n        [subtitles, calculateSurroundingSubtitles, length, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                extractSubtitles(\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\r\n                );\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, extractSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindUpdateLastCard(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                extractSubtitles(\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\r\n                );\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, extractSubtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    playerChannel.pause();\r\n                } else {\r\n                    playerChannel.play();\r\n                }\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, playerChannel]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAutoPause(\r\n            (event) => {\r\n                event.preventDefault();\r\n                const newPlayMode =\r\n                    playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\r\n                playerChannel.playMode(newPlayMode);\r\n                onAutoPauseModeChangedViaBind(newPlayMode);\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, playMode, onAutoPauseModeChangedViaBind]);\r\n\r\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\r\n\r\n    const handleFullscreenToggle = useCallback(() => {\r\n        if (fullscreen) {\r\n            document.exitFullscreen();\r\n        } else {\r\n            containerRef.current?.requestFullscreen();\r\n        }\r\n    }, [fullscreen]);\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePopOutToggle = useCallback(() => {\r\n        playerChannel.popOutToggle();\r\n        if (popOut) {\r\n            poppingInRef.current = true;\r\n            window.close();\r\n        }\r\n    }, [playerChannel, popOut]);\r\n\r\n    const handlePlayMode = useCallback(\r\n        (playMode: PlayMode) => {\r\n            playerChannel.playMode(playMode);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    const handleClose = useCallback(() => {\r\n        playerChannel.close();\r\n        window.close();\r\n    }, [playerChannel]);\r\n\r\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\r\n        playerChannel.hideSubtitlePlayerToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleTheaterModeToggle = useCallback(() => {\r\n        playerChannel.appBarToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (playing) {\r\n            playerChannel.pause();\r\n        } else {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel, playing]);\r\n\r\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\r\n\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const {\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        imageBasedSubtitleScaleFactor,\r\n    } = settingsProvider.subtitleSettings;\r\n    const subtitleStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleSize,\r\n                subtitleColor,\r\n                subtitleOutlineThickness,\r\n                subtitleOutlineColor,\r\n                subtitleBackgroundColor,\r\n                subtitleBackgroundOpacity,\r\n                subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleSize,\r\n            subtitleColor,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\r\n                if (showCursor) {\r\n                    setShowCursor(false);\r\n                }\r\n            } else if (!showCursor) {\r\n                setShowCursor(true);\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [showCursor]);\r\n\r\n    return (\r\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\r\n            <video\r\n                preload=\"auto\"\r\n                controls={false}\r\n                onClick={handleClick}\r\n                onDoubleClick={handleDoubleClick}\r\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\r\n                ref={videoRefCallback}\r\n                src={videoFile}\r\n            />\r\n            {subtitlesEnabled && (\r\n                <div className={classes.subtitleContainer}>\r\n                    {showSubtitles.map((subtitle, index) => {\r\n                        let content;\r\n\r\n                        if (subtitle.textImage) {\r\n                            content = (\r\n                                <SubtitleTextImage\r\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\r\n                                    subtitle={subtitle}\r\n                                    scale={imageBasedSubtitleScaleFactor}\r\n                                />\r\n                            );\r\n                        } else {\r\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\r\n                        }\r\n\r\n                        if (index < showSubtitles.length - 1) {\r\n                            return (\r\n                                <React.Fragment key={subtitle.index}>\r\n                                    {content}\r\n                                    <br />\r\n                                </React.Fragment>\r\n                            );\r\n                        }\r\n\r\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\r\n                    })}\r\n                </div>\r\n            )}\r\n            {fullscreen && (\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\r\n                    {alert}\r\n                </Alert>\r\n            )}\r\n            <Controls\r\n                mousePositionRef={mousePositionRef}\r\n                playing={playing}\r\n                clock={clock}\r\n                length={length}\r\n                audioTracks={audioTracks}\r\n                selectedAudioTrack={selectedAudioTrack}\r\n                subtitlesToggle={subtitles && subtitles.length > 0}\r\n                subtitlesEnabled={subtitlesEnabled}\r\n                offsetEnabled={true}\r\n                offset={offset}\r\n                fullscreenEnabled={true}\r\n                fullscreen={fullscreen}\r\n                closeEnabled={!popOut}\r\n                popOut={popOut}\r\n                volumeEnabled={true}\r\n                popOutEnabled={!isMobile}\r\n                playModeEnabled={true}\r\n                playMode={playMode}\r\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\r\n                subtitlePlayerHidden={subtitlePlayerHidden}\r\n                onPlay={handlePlay}\r\n                onPause={handlePause}\r\n                onSeek={handleSeek}\r\n                onAudioTrackSelected={handleAudioTrackSelected}\r\n                onSubtitlesToggle={handleSubtitlesToggle}\r\n                onFullscreenToggle={handleFullscreenToggle}\r\n                onVolumeChange={handleVolumeChange}\r\n                onOffsetChange={handleOffsetChange}\r\n                onPopOutToggle={handlePopOutToggle}\r\n                onPlayMode={handlePlayMode}\r\n                onClose={handleClose}\r\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\r\n                settingsProvider={settingsProvider}\r\n                showOnMouseMovement={false}\r\n                theaterModeToggleEnabled={!popOut}\r\n                theaterModeEnabled={appBarHidden}\r\n                onTheaterModeToggle={handleTheaterModeToggle}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\r\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { red } from '@material-ui/core/colors';\r\nimport {\r\n    Anki,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiDialogSliderContext,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n    SubtitleSettingsToVideoMessage,\r\n    AnkiSettingsToVideoMessage,\r\n    MiscSettingsToVideoMessage,\r\n    LegacyPlayerSyncMessage,\r\n    PlayerSyncMessage,\r\n    AudioModel,\r\n    ImageModel,\r\n    AsbplayerSettings,\r\n    PostMineAction,\r\n    PlayMode,\r\n} from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport clsx from 'clsx';\r\nimport Alert from './Alert';\r\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DragOverlay from './DragOverlay';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\nimport Bar from './Bar';\r\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\r\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\r\nimport LandingPage from './LandingPage';\r\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\r\nimport SettingsDialog from './SettingsDialog';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport { Color } from '@material-ui/lab';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst latestExtensionVersion = '0.18.2';\r\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\r\n\r\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginRight: 0,\r\n    },\r\n    contentShift: ({ drawerWidth }) => ({\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: drawerWidth,\r\n    }),\r\n}));\r\n\r\nfunction extractSources(files: FileList | File[]): MediaSources {\r\n    let subtitleFiles = [];\r\n    let audioFile = undefined;\r\n    let videoFile = undefined;\r\n\r\n    for (let i = 0; i < files.length; ++i) {\r\n        const f = files[i];\r\n        const extensionStartIndex = f.name.lastIndexOf('.');\r\n\r\n        if (extensionStartIndex === -1) {\r\n            throw new Error('Unable to determine extension of ' + f.name);\r\n        }\r\n\r\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\r\n        switch (extension) {\r\n            case 'ass':\r\n            case 'srt':\r\n            case 'vtt':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'sup':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'mkv':\r\n            case 'mp4':\r\n            case 'avi':\r\n                if (videoFile) {\r\n                    throw new Error('Cannot open two video files simultaneously');\r\n                }\r\n                videoFile = f;\r\n                break;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'aac':\r\n            case 'flac':\r\n            case 'ogg':\r\n            case 'wav':\r\n            case 'opus':\r\n                if (audioFile) {\r\n                    throw new Error('Cannot open two audio files simultaneously');\r\n                }\r\n                audioFile = f;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported extension ' + extension);\r\n        }\r\n    }\r\n\r\n    if (videoFile && audioFile) {\r\n        throw new Error('Cannot load both an audio and video file simultaneously');\r\n    }\r\n\r\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\r\n}\r\n\r\nfunction audioClipFromItem(\r\n    item: CopyHistoryItem,\r\n    sliderContext: AnkiDialogSliderContext | undefined,\r\n    paddingStart: number,\r\n    paddingEnd: number\r\n) {\r\n    if (item.audio) {\r\n        const start = item.audio.start ?? item.start;\r\n        const end = item.audio.end ?? item.end;\r\n\r\n        return AudioClip.fromBase64(\r\n            item.subtitleFile!.name,\r\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\r\n            end + (item.audio.paddingEnd ?? 0),\r\n            item.audio.base64,\r\n            item.audio.extension\r\n        );\r\n    }\r\n\r\n    if (item.audioFile || item.videoFile) {\r\n        let start;\r\n        let end;\r\n\r\n        if (sliderContext) {\r\n            start = sliderContext.subtitleStart;\r\n            end = sliderContext.subtitleEnd;\r\n        } else {\r\n            start = item.start;\r\n            end = item.end;\r\n        }\r\n\r\n        return AudioClip.fromFile(\r\n            (item.audioFile || item.videoFile)!,\r\n            Math.max(0, start - paddingStart),\r\n            end + paddingEnd,\r\n            item.audioTrack\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\r\n    if (item.image) {\r\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\r\n    }\r\n\r\n    if (item.videoFile) {\r\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\r\n\r\n    if (!source) {\r\n        return undefined;\r\n    }\r\n\r\n    return `${source} (${humanReadableTime(item.start)})`;\r\n}\r\n\r\nfunction itemSliderContext(item: CopyHistoryItem) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        subtitleStart: item.start,\r\n        subtitleEnd: item.end,\r\n        subtitles: item.surroundingSubtitles || [\r\n            { start: item.start, end: item.end, text: item.text, track: item.track },\r\n        ],\r\n    };\r\n}\r\n\r\nfunction revokeUrls(sources: MediaSources) {\r\n    if (sources.audioFileUrl) {\r\n        URL.revokeObjectURL(sources.audioFileUrl);\r\n    }\r\n\r\n    if (sources.videoFileUrl) {\r\n        URL.revokeObjectURL(sources.videoFileUrl);\r\n    }\r\n}\r\n\r\ninterface NavigateToVideoProps {\r\n    searchParams: URLSearchParams;\r\n}\r\n\r\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')!;\r\n\r\n    return (\r\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\r\n    );\r\n}\r\n\r\ninterface RenderVideoProps {\r\n    searchParams: URLSearchParams;\r\n    settingsProvider: SettingsProvider;\r\n    onError: (error: string) => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n}\r\n\r\nfunction RenderVideo({ searchParams, settingsProvider, onError, onAutoPauseModeChangedViaBind }: RenderVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')! === 'true';\r\n\r\n    return (\r\n        <VideoPlayer\r\n            settingsProvider={settingsProvider}\r\n            videoFile={videoFile}\r\n            popOut={popOut}\r\n            channel={channel}\r\n            onError={onError}\r\n            onAutoPauseModeChangedViaBind={onAutoPauseModeChangedViaBind}\r\n        />\r\n    );\r\n}\r\n\r\ninterface ContentProps {\r\n    drawerOpen: boolean;\r\n    drawerWidth: number;\r\n    children: React.ReactNode[];\r\n}\r\n\r\nfunction Content(props: ContentProps) {\r\n    const classes = useContentStyles(props);\r\n\r\n    return (\r\n        <main\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: props.drawerOpen,\r\n            })}\r\n        >\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\r\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\r\n    const theme = useMemo<Theme>(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    primary: {\r\n                        main: '#49007a',\r\n                    },\r\n                    secondary: {\r\n                        main: '#ff1f62',\r\n                    },\r\n                    error: {\r\n                        main: red.A400,\r\n                    },\r\n                    type: settingsProvider.themeType,\r\n                },\r\n            }),\r\n        [settingsProvider.themeType]\r\n    );\r\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\r\n    const location = useLocation();\r\n    const [searchParams] = useSearchParams();\r\n\r\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\r\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(), []);\r\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\r\n    const [width] = useWindowSize(!inVideoPlayer);\r\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\r\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\r\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\r\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\r\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\r\n    copiedSubtitlesRef.current = copiedSubtitles;\r\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\r\n    const [theaterMode, setTheaterMode] = useState<boolean>(settingsProvider.theaterMode);\r\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\r\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\r\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\r\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [dragging, setDragging] = useState<boolean>(false);\r\n    const dragEnterRef = useRef<Element | null>(null);\r\n    const [fileName, setFileName] = useState<string>();\r\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\r\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\r\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\r\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\r\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\r\n        [ankiDialogItem]\r\n    );\r\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            audioClipFromItem(\r\n                ankiDialogItem,\r\n                ankiDialogItemSliderContext,\r\n                settingsProvider.audioPaddingStart,\r\n                settingsProvider.audioPaddingEnd\r\n            ),\r\n        [\r\n            ankiDialogItem,\r\n            ankiDialogItemSliderContext,\r\n            settingsProvider.audioPaddingStart,\r\n            settingsProvider.audioPaddingEnd,\r\n        ]\r\n    );\r\n    const ankiDialogImage = useMemo<Image | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\r\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\r\n    );\r\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\r\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\r\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\r\n        timestamp: 0,\r\n        resume: false,\r\n    });\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\r\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\r\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\r\n    const [image, setImage] = useState<Image>();\r\n    const [tab, setTab] = useState<VideoTabModel>();\r\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const ankiDialogRequestedRef = useRef<boolean>(false);\r\n    ankiDialogRequestedRef.current = ankiDialogRequested;\r\n    const { subtitleFiles } = sources;\r\n\r\n    const handleError = useCallback((message: string) => {\r\n        setAlertSeverity('error');\r\n        setAlert(message);\r\n        setAlertOpen(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean, ankiDialogItem?: CopyHistoryItem) => {\r\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n        setAnkiDialogRequested(true);\r\n\r\n        if (forwardToVideo) {\r\n            setAnkiDialogRequestToVideo(Date.now());\r\n        }\r\n    }, []);\r\n\r\n    const handleAnkiDialogProceed = useCallback(\r\n        async (\r\n            text: string,\r\n            definition: string,\r\n            audioClip: AudioClip | undefined,\r\n            image: Image | undefined,\r\n            word: string,\r\n            source: string,\r\n            url: string,\r\n            customFieldValues: { [key: string]: string },\r\n            tags: string[],\r\n            mode: AnkiExportMode\r\n        ) => {\r\n            setAnkiDialogDisabled(true);\r\n\r\n            try {\r\n                const result = await anki.export(\r\n                    text,\r\n                    definition,\r\n                    audioClip,\r\n                    image,\r\n                    word,\r\n                    source,\r\n                    url,\r\n                    customFieldValues,\r\n                    tags,\r\n                    mode\r\n                );\r\n\r\n                if (mode !== 'gui') {\r\n                    if (mode === 'default') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Exported card: ' + result);\r\n                        setAlertOpen(true);\r\n                    } else if (mode === 'updateLast') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Updated card: ' + result);\r\n                        setAlertOpen(true);\r\n                    }\r\n\r\n                    setAnkiDialogOpen(false);\r\n\r\n                    // We need the ref to avoid causing a state change that would re-init Player\r\n                    // It's a future task to make the Player init hook depend on less state\r\n                    if (ankiDialogRequestedRef.current) {\r\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n                        setAnkiDialogRequested(false);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            } finally {\r\n                setAnkiDialogDisabled(false);\r\n                setDisableKeyEvents(false);\r\n            }\r\n        },\r\n        [anki, handleError]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audioFile: File | undefined,\r\n            videoFile: File | undefined,\r\n            subtitleFile: File | undefined,\r\n            mediaTimestamp: number | undefined,\r\n            audioTrack: string | undefined,\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            postMineAction: PostMineAction | undefined,\r\n            fromVideo: boolean | undefined,\r\n            preventDuplicate: boolean | undefined,\r\n            id: string | undefined\r\n        ) => {\r\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\r\n                navigator.clipboard.writeText(subtitle.text);\r\n            }\r\n\r\n            const newCopiedSubtitle = {\r\n                ...subtitle,\r\n                surroundingSubtitles: surroundingSubtitles,\r\n                timestamp: Date.now(),\r\n                id: id || uuidv4(),\r\n                name: fileName!,\r\n                subtitleFile: subtitleFile,\r\n                audioFile: audioFile,\r\n                videoFile: videoFile,\r\n                mediaTimestamp: mediaTimestamp,\r\n                audioTrack: audioTrack,\r\n                audio: audio,\r\n                image: image,\r\n                url: url,\r\n            };\r\n\r\n            setCopiedSubtitles((copiedSubtitles) => {\r\n                if (preventDuplicate && copiedSubtitles.length > 0) {\r\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\r\n\r\n                    if (\r\n                        subtitle.start === last.start &&\r\n                        subtitle.end === last.end &&\r\n                        subtitle.text === last.text &&\r\n                        subtitleFile?.name === last.subtitleFile?.name\r\n                    ) {\r\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\r\n                            const newCopiedSubtitles = [...copiedSubtitles];\r\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\r\n                            return newCopiedSubtitles;\r\n                        }\r\n\r\n                        return copiedSubtitles;\r\n                    }\r\n                }\r\n\r\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\r\n                return [...copiedSubtitles, newCopiedSubtitle];\r\n            });\r\n\r\n            switch (postMineAction ?? PostMineAction.none) {\r\n                case PostMineAction.none:\r\n                    break;\r\n                case PostMineAction.showAnkiDialog:\r\n                    handleAnkiDialogRequest(fromVideo, newCopiedSubtitle);\r\n                    break;\r\n                case PostMineAction.updateLastCard:\r\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\r\n                    setAnkiDialogRequested(true);\r\n                    handleAnkiDialogProceed(\r\n                        subtitle.text,\r\n                        '',\r\n                        audioClipFromItem(\r\n                            newCopiedSubtitle,\r\n                            undefined,\r\n                            settingsProvider.audioPaddingStart,\r\n                            settingsProvider.audioPaddingEnd\r\n                        ),\r\n                        imageFromItem(\r\n                            newCopiedSubtitle,\r\n                            settingsProvider.maxImageWidth,\r\n                            settingsProvider.maxImageHeight\r\n                        ),\r\n                        '',\r\n                        itemSourceString(newCopiedSubtitle) ?? '',\r\n                        '',\r\n                        {},\r\n                        settingsProvider.tags,\r\n                        'updateLast'\r\n                    );\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown post mine action: ' + postMineAction);\r\n            }\r\n\r\n            if (subtitle) {\r\n                setAlertSeverity('success');\r\n                setAlert(\r\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\r\n                );\r\n                setAlertOpen(true);\r\n            }\r\n        },\r\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\r\n    );\r\n\r\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\r\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\r\n    const handleAppBarToggle = useCallback(() => {\r\n        settingsProvider.theaterMode = !settingsProvider.theaterMode;\r\n        setTheaterMode(settingsProvider.theaterMode);\r\n    }, [settingsProvider]);\r\n    const handleVideoPopOut = useCallback(() => {\r\n        setVideoPopOut((videoPopOut) => !videoPopOut);\r\n    }, []);\r\n    const handleOpenSettings = useCallback(() => {\r\n        setDisableKeyEvents(true);\r\n        setSettingsDialogOpen(true);\r\n    }, []);\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\r\n    const handleCloseSettings = useCallback(\r\n        (newSettings: AsbplayerSettings) => {\r\n            settingsProvider.settings = newSettings;\r\n            setSettingsDialogOpen(false);\r\n\r\n            // ATM only the Anki dialog may appear under the settings dialog,\r\n            // so it's the only one we need to check to re-enable key events\r\n            setDisableKeyEvents(ankiDialogOpen);\r\n\r\n            const subtitleSettingsMessage: SubtitleSettingsToVideoMessage = {\r\n                command: 'subtitleSettings',\r\n                value: settingsProvider.subtitleSettings,\r\n            };\r\n            const ankiSettingsMessage: AnkiSettingsToVideoMessage = {\r\n                command: 'ankiSettings',\r\n                value: settingsProvider.ankiSettings,\r\n            };\r\n            const miscSettingsMessage: MiscSettingsToVideoMessage = {\r\n                command: 'miscSettings',\r\n                value: settingsProvider.miscSettings,\r\n            };\r\n            extension.publishMessage(subtitleSettingsMessage);\r\n            extension.publishMessage(ankiSettingsMessage);\r\n            extension.publishMessage(miscSettingsMessage);\r\n        },\r\n        [extension, settingsProvider, ankiDialogOpen]\r\n    );\r\n\r\n    const handleDeleteCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            const newCopiedSubtitles = [];\r\n\r\n            for (let subtitle of copiedSubtitles) {\r\n                if (item.id !== subtitle.id) {\r\n                    newCopiedSubtitles.push(subtitle);\r\n                }\r\n            }\r\n\r\n            setCopiedSubtitles(newCopiedSubtitles);\r\n        },\r\n        [copiedSubtitles]\r\n    );\r\n\r\n    const handleUnloadAudio = useCallback(\r\n        (audioFileUrl: string) => {\r\n            if (audioFileUrl !== sources.audioFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(audioFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: previous.videoFile,\r\n                    videoFileUrl: previous.videoFileUrl,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleUnloadVideo = useCallback(\r\n        (videoFileUrl: string) => {\r\n            if (videoFileUrl !== sources.videoFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(videoFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: previous.audioFile,\r\n                    audioFileUrl: previous.audioFileUrl,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleClipAudio = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                const clip = await audioClipFromItem(\r\n                    item,\r\n                    undefined,\r\n                    settingsProvider.audioPaddingStart,\r\n                    settingsProvider.audioPaddingEnd\r\n                );\r\n\r\n                if (settingsProvider.preferMp3) {\r\n                    clip!.toMp3().download();\r\n                } else {\r\n                    clip!.download();\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleDownloadImage = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                (await imageFromItem(\r\n                    item,\r\n                    settingsProvider.maxImageWidth,\r\n                    settingsProvider.maxImageHeight\r\n                ))!.download();\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleSelectCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\r\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\r\n                return;\r\n            }\r\n\r\n            setJumpToSubtitle({\r\n                text: item.text,\r\n                start: item.start,\r\n                end: item.end,\r\n                originalStart: item.originalStart,\r\n                originalEnd: item.originalEnd,\r\n                track: item.track,\r\n            });\r\n        },\r\n        [subtitleFiles, handleError]\r\n    );\r\n\r\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogCancel = useCallback(() => {\r\n        setAnkiDialogOpen(false);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(false);\r\n\r\n        if (ankiDialogRequested) {\r\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n            setAnkiDialogRequested(false);\r\n        }\r\n    }, [ankiDialogRequested]);\r\n\r\n    const handleAnkiDialogRewind = useCallback(() => {\r\n        if (!ankiDialogItem) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\r\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\r\n            return;\r\n        }\r\n\r\n        const subtitle = {\r\n            text: ankiDialogItem.text,\r\n            start: ankiDialogItem.start,\r\n            end: ankiDialogItem.end,\r\n            originalStart: ankiDialogItem.originalStart,\r\n            originalEnd: ankiDialogItem.originalEnd,\r\n            track: ankiDialogItem.track,\r\n        };\r\n        setRewindSubtitle(subtitle);\r\n        setJumpToSubtitle(subtitle);\r\n\r\n        handleAnkiDialogCancel();\r\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\r\n\r\n    const handleViewImage = useCallback((image: Image) => {\r\n        setImage(image);\r\n        setImageDialogOpen(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        function onTabs(tabs: VideoTabModel[]) {\r\n            if (tabs.length !== availableTabs.length) {\r\n                setAvailableTabs(tabs);\r\n            } else {\r\n                let update = false;\r\n\r\n                for (let i = 0; i < availableTabs.length; ++i) {\r\n                    const t1 = availableTabs[i];\r\n                    const t2 = tabs[i];\r\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\r\n                        update = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (update) {\r\n                    setAvailableTabs(tabs);\r\n                }\r\n            }\r\n\r\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\r\n\r\n            if (selectedTabMissing) {\r\n                setTab(undefined);\r\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\r\n            }\r\n        }\r\n\r\n        extension.subscribeTabs(onTabs);\r\n\r\n        return () => extension.unsubscribeTabs(onTabs);\r\n    }, [availableTabs, tab, extension, handleError]);\r\n\r\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\r\n\r\n    const handleFiles = useCallback(\r\n        (files: FileList | File[]) => {\r\n            try {\r\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\r\n\r\n                setSources((previous) => {\r\n                    setLoading(true);\r\n\r\n                    let videoFileUrl = undefined;\r\n                    let audioFileUrl = undefined;\r\n\r\n                    if (videoFile || audioFile) {\r\n                        revokeUrls(previous);\r\n\r\n                        if (videoFile) {\r\n                            videoFileUrl = URL.createObjectURL(videoFile);\r\n                        } else if (audioFile) {\r\n                            audioFileUrl = URL.createObjectURL(audioFile);\r\n                        }\r\n\r\n                        setTab(undefined);\r\n                    } else {\r\n                        videoFile = previous.videoFile;\r\n                        videoFileUrl = previous.videoFileUrl;\r\n                        audioFile = previous.audioFile;\r\n                        audioFileUrl = previous.audioFileUrl;\r\n                    }\r\n\r\n                    const sources = {\r\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\r\n                        audioFile: audioFile,\r\n                        audioFileUrl: audioFileUrl,\r\n                        videoFile: videoFile,\r\n                        videoFileUrl: videoFileUrl,\r\n                    };\r\n\r\n                    return sources;\r\n                });\r\n\r\n                if (subtitleFiles.length > 0) {\r\n                    const subtitleFileName = subtitleFiles[0].name;\r\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError]\r\n    );\r\n\r\n    const handleDirectory = useCallback(\r\n        async (items: DataTransferItemList) => {\r\n            if (items.length !== 1) {\r\n                handleError('Cannot load more than one directory at a time');\r\n                return;\r\n            }\r\n\r\n            const fileSystemEntry = items[0].webkitGetAsEntry();\r\n\r\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\r\n                handleError('Failed to load directory');\r\n                return;\r\n            }\r\n\r\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\r\n            \r\n            try {\r\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\r\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\r\n                );\r\n\r\n                if (entries.find((e) => e.isDirectory)) {\r\n                    handleError('Cannot load a directory with subdirectories');\r\n                    return;\r\n                }\r\n\r\n                const filePromises = entries.map(\r\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\r\n                );\r\n                const files: File[] = [];\r\n\r\n                for (const f of filePromises) {\r\n                    files.push(await f);\r\n                }\r\n\r\n                handleFiles(files);\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, handleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (inVideoPlayer) {\r\n            return undefined;\r\n        }\r\n\r\n        async function onMessage(message: ExtensionMessage) {\r\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\r\n                const tabs = extension.tabs.filter((t) => {\r\n                    if (t.id !== message.tabId) {\r\n                        return false;\r\n                    }\r\n\r\n                    return !message.src || t.src === message.src;\r\n                });\r\n\r\n                if (tabs.length === 0) {\r\n                    if (message.src) {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' +\r\n                                message.tabId +\r\n                                ' with src ' +\r\n                                message.src +\r\n                                ' was not found'\r\n                        );\r\n                    } else {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\r\n                        );\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const tab = tabs[0];\r\n                let subtitleFiles: File[];\r\n\r\n                if (message.data.command === 'sync') {\r\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\r\n                    subtitleFiles = [\r\n                        new File(\r\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\r\n                            syncMessage.subtitles.name\r\n                        ),\r\n                    ];\r\n                } else if (message.data.command === 'syncv2') {\r\n                    const syncMessage = message.data as PlayerSyncMessage;\r\n                    subtitleFiles = await Promise.all(\r\n                        syncMessage.subtitles.map(\r\n                            async (s) =>\r\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\r\n                        )\r\n                    );\r\n                } else {\r\n                    console.error('Unknown message ' + message.data.command);\r\n                    return;\r\n                }\r\n\r\n                const subtitleFileName = subtitleFiles[0].name;\r\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                setSources({\r\n                    subtitleFiles: subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                });\r\n                setTab(tab);\r\n            }\r\n        }\r\n\r\n        extension.subscribe(onMessage);\r\n        extension.startHeartbeat();\r\n        return () => extension.unsubscribe(onMessage);\r\n    }, [extension, inVideoPlayer]);\r\n\r\n    const handleAutoPauseModeChangedViaBind = useCallback((playMode: PlayMode) => {\r\n        switch (playMode) {\r\n            case PlayMode.autoPause:\r\n                setAlert('Auto-pause: On');\r\n                setAlertSeverity('info');\r\n                setAlertOpen(true);\r\n                break;\r\n            case PlayMode.normal:\r\n                setAlert('Auto-pause: Off');\r\n                setAlertSeverity('info');\r\n                setAlertOpen(true);\r\n        }\r\n    }, []);\r\n\r\n    const handleDrop = useCallback(\r\n        (e: React.DragEvent) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n\r\n            if (inVideoPlayer) {\r\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\r\n                return;\r\n            }\r\n\r\n            setDragging(false);\r\n            dragEnterRef.current = null;\r\n\r\n            function allDirectories(items: DataTransferItemList) {\r\n                for (let i = 0; i < items.length; ++i) {\r\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\r\n                handleDirectory(e.dataTransfer.items);\r\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n                handleFiles(e.dataTransfer.files);\r\n            }\r\n        },\r\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\r\n    );\r\n\r\n    const handleFileInputChange = useCallback(() => {\r\n        const files = fileInputRef.current?.files;\r\n\r\n        if (files && files.length > 0) {\r\n            handleFiles(files);\r\n        }\r\n    }, [handleFiles]);\r\n\r\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\r\n\r\n    const handleDragOver = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n        },\r\n        [ankiDialogOpen]\r\n    );\r\n\r\n    const handleDragEnter = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!inVideoPlayer) {\r\n                dragEnterRef.current = e.target as Element;\r\n                setDragging(true);\r\n            }\r\n        },\r\n        [inVideoPlayer, ankiDialogOpen]\r\n    );\r\n\r\n    const handleDragLeave = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            e.nativeEvent.preventDefault();\r\n            e.nativeEvent.stopPropagation();\r\n\r\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\r\n                setDragging(false);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\r\n\r\n    if (location.pathname === '/' && searchParams.get('video')) {\r\n        return <NavigateToVideo searchParams={searchParams} />;\r\n    }\r\n\r\n    const nothingLoaded =\r\n        (loading && !videoFrameRef.current) ||\r\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\r\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <div\r\n                onDrop={handleDrop}\r\n                onDragOver={handleDragOver}\r\n                onDragEnter={handleDragEnter}\r\n                onDragLeave={handleDragLeave}\r\n            >\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\r\n                    {alert}\r\n                </Alert>\r\n                <Routes>\r\n                    <Route\r\n                        path=\"/video\"\r\n                        element={\r\n                            <RenderVideo\r\n                                searchParams={searchParams}\r\n                                settingsProvider={settingsProvider}\r\n                                onError={handleError}\r\n                                onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\r\n                            />\r\n                        }\r\n                    />\r\n                    <Route\r\n                        path=\"/\"\r\n                        element={\r\n                            <div>\r\n                                <CopyHistory\r\n                                    items={copiedSubtitles}\r\n                                    open={copyHistoryOpen}\r\n                                    drawerWidth={drawerWidth}\r\n                                    onClose={handleCloseCopyHistory}\r\n                                    onDelete={handleDeleteCopyHistoryItem}\r\n                                    onClipAudio={handleClipAudio}\r\n                                    onDownloadImage={handleDownloadImage}\r\n                                    onSelect={handleSelectCopyHistoryItem}\r\n                                    onAnki={handleAnki}\r\n                                />\r\n                                <AnkiDialog\r\n                                    open={ankiDialogOpen}\r\n                                    disabled={ankiDialogDisabled}\r\n                                    text={ankiDialogItem?.text}\r\n                                    audioClip={ankiDialogAudioClip}\r\n                                    image={ankiDialogImage}\r\n                                    source={itemSourceString(ankiDialogItem)}\r\n                                    url={ankiDialogItem?.url}\r\n                                    sliderContext={ankiDialogItemSliderContext}\r\n                                    customFields={settingsProvider.customAnkiFields}\r\n                                    anki={anki}\r\n                                    settingsProvider={settingsProvider}\r\n                                    onCancel={handleAnkiDialogCancel}\r\n                                    onRewind={handleAnkiDialogRewind}\r\n                                    onProceed={handleAnkiDialogProceed}\r\n                                    onViewImage={handleViewImage}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                />\r\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\r\n                                <SettingsDialog\r\n                                    anki={anki}\r\n                                    open={settingsDialogOpen}\r\n                                    onClose={handleCloseSettings}\r\n                                    settings={settingsProvider.settings}\r\n                                />\r\n                                <Bar\r\n                                    title={fileName || 'asbplayer'}\r\n                                    drawerWidth={drawerWidth}\r\n                                    drawerOpen={copyHistoryOpen}\r\n                                    hidden={appBarHidden}\r\n                                    onOpenCopyHistory={handleOpenCopyHistory}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                    onFileSelector={handleFileSelector}\r\n                                />\r\n                                <input\r\n                                    ref={fileInputRef}\r\n                                    onChange={handleFileInputChange}\r\n                                    type=\"file\"\r\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\r\n                                    multiple\r\n                                    hidden\r\n                                />\r\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\r\n                                    {nothingLoaded && (\r\n                                        <LandingPage\r\n                                            latestExtensionVersion={latestExtensionVersion}\r\n                                            extensionUrl={extensionUrl}\r\n                                            extension={extension}\r\n                                            loading={loading}\r\n                                            dragging={dragging}\r\n                                            appBarHidden={appBarHidden}\r\n                                            onFileSelector={handleFileSelector}\r\n                                        />\r\n                                    )}\r\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\r\n                                    <Player\r\n                                        subtitleReader={subtitleReader}\r\n                                        settingsProvider={settingsProvider}\r\n                                        onCopy={handleCopy}\r\n                                        onError={handleError}\r\n                                        onUnloadAudio={handleUnloadAudio}\r\n                                        onUnloadVideo={handleUnloadVideo}\r\n                                        onLoaded={handleSourcesLoaded}\r\n                                        onTabSelected={handleTabSelected}\r\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\r\n                                        onAppBarToggle={handleAppBarToggle}\r\n                                        onVideoPopOut={handleVideoPopOut}\r\n                                        onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\r\n                                        tab={tab}\r\n                                        availableTabs={availableTabs}\r\n                                        sources={sources}\r\n                                        jumpToSubtitle={jumpToSubtitle}\r\n                                        rewindSubtitle={rewindSubtitle}\r\n                                        videoFrameRef={videoFrameRef}\r\n                                        extension={extension}\r\n                                        drawerOpen={copyHistoryOpen}\r\n                                        appBarHidden={appBarHidden}\r\n                                        videoPopOut={videoPopOut}\r\n                                        disableKeyEvents={disableKeyEvents}\r\n                                        ankiDialogRequested={ankiDialogRequested}\r\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\r\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\r\n                                    />\r\n                                </Content>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Routes>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import '@fontsource/roboto';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\ncreateRoot(document.querySelector('#root')!).render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}