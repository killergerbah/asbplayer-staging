{"version":3,"sources":["../../node_modules/@project/common/locales lazy /^/.//.*/.json$/ groupOptions: {} namespace object","components/i18n.ts","hooks/use-window-size.ts","../../common/src/key-binder.ts","../../common/src/mp3-encoder.ts","../../common/src/mp3-encoder-worker.js","../../common/src/util.ts","../../common/src/audio-clip.ts","../../common/src/image-transformer.ts","../../common/src/image.ts","../../common/src/fetcher.ts","../../common/src/anki.ts","../../common/src/model.ts","../../common/src/subtitle-collection.ts","../../common/src/auto-pause-context.ts","../../common/index.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/subtitle-reader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/playback-preferences.ts","services/broadcast-channel-video-protocol.ts","services/chrome-tab-video-protocol.ts","services/clock.ts","services/cached-local-storage.ts","components/Controls.tsx","services/media-adapter.ts","components/SubtitlePlayer.tsx","services/video-channel.ts","components/Player.tsx","components/SettingsDialog.tsx","hooks/use-outside-click-listener.ts","services/settings-provider.ts","services/player-channel.ts","services/app-key-binder.ts","components/VideoPlayer.tsx","hooks/use-chrome-extension.ts","services/copy-history-repository.ts","components/localized-error.ts","services/chrome-extension.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","i18nInit","i18n","use","LanguageDetector","resourcesToBackend","language","initReactI18next","init","partialBundledLanguages","resources","fallbackLng","debug","process","ns","defaultNS","interpolation","escapeValue","detection","order","lookupLocalStorage","caches","useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","capture","shortcut","copySubtitle","handler","copyHandler","_bind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onTakeScreenshot","takeScreenshot","onSeekToSubtitle","timeGetter","subtitlesGetter","unbindPrevious","unbindNext","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","unbindBack","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","unbindDecrease","unbindIncrease","onResetOffset","resetOffset","onAdjustPlaybackRate","increasePlaybackRate","decreasePlaybackRate","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","unbindHandlers","push","unbindHandler","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","wrappedHandler","type","preventDefault","stopImmediatePropagation","hotkeys","keydown","keyup","unbind","Mp3Encoder","blob","workerFactory","reject","a","reader","FileReader","onload","audioContext","AudioContext","target","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","direction","next","abs","subtitleIntersectsTimeInterval","interval","overlapStart","joinSubtitles","trim","join","extractText","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","defaultMp3WorkerFactory","recorderConfiguration","AUDIO_TYPES","MediaRecorder","isTypeSupported","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","_blob","stopAudio","clearTimeout","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","Mp3AudioData","encode","isSliceable","isPlayable","MissingFileAudioData","fileName","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","resizeCanvas","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","MissingFileImageData","Image","available","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","PostMineAction","AutoPausePreference","PlayMode","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","exec","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","supportedLanguages","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onCancel","onViewImage","onOpenSettings","onRerecord","onCopyToClipboard","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","useTranslation","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","count","field","audioHelperText","imageHelperText","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","minimumChange","handleCopyImageToClipboard","pngBlob","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","minRows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","textFilter","_textFilter","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","node","n1","n2","parseSrt","cue","_filterText","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","write","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","innerText","XMLParser","ignoreAttributes","regex","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","noWrap","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","navigator","clipboard","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","extensionUpdateAvailable","gt","i18nKey","Link","installed","SubtitleAlignment","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","CachedLocalStorage","_cache","cached","fromStorage","localStorage","getItem","setItem","removeItem","volumeKey","theaterModeKey","offsetKey","subtitleAlignmentKey","subtitlePositionOffetKey","PlaybackPreferences","storage","get","volume","set","theaterMode","rememberSubtitleOffset","val","bottom","alignment","useControlStyles","left","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","subtitleAlignment","subtitleAlignmentEnabled","onSubtitleAlignment","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","handleSubtitleAlignment","newAlignment","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindResetOffet","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","currentMockSubtitle","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","mediaTimestamp","toggleSubtitleTrackInListMessage","_remove","videoFileName","subtitleFileNames","names","settings","msg","callbacks","splice","videoFrame","border","trackLength","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","ankiDialogOpen","onError","onLoaded","onAnkiDialogRequest","onAnkiDialogRewind","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","setSubtitles","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setChannel","setResumeOnFinishedAnkiDialogRequest","setDisabledSubtitleTracks","audioRef","mediaAdapter","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","lte","onReady","uuidv4","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","mediaTimetamp","onCurrentTime","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","encodeURIComponent","handlePlay","handlePause","handleSeekToTimestamp","shouldPlay","handleCopyFromSubtitlePlayer","copy","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","bindPlay","bindAdjustPlaybackRate","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","bindTakeScreenshot","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","extensionOverridden","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","clickHandler","contains","useOutsideClickListener","xs","contentEditable","AddCustomField","onAddCustomField","setFieldName","SettingsDialog","scrollToId","keyBindProperties","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","setRememberSubtitleOffset","miningHistoryStorageLimit","setMiningHistoryStorageLimit","setAutoCopyCurrentSubtitle","subtitleRegexFilter","setSubtitleRegexFilter","subtitleRegexFilterTextReplacement","setSubtitleRegexFilterTextReplacement","setLanguage","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","handleMiningHistoryStorageLimit","handleSubtitleRegexFilter","handleSubtitleRegexFilterTextReplacement","handleLanguage","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","validRegex","regexIsValid","origin","location","hostname","DialogTitle","FormLabel","FormGroup","FormHelperText","values","components","FormControlLabel","control","Switch","labelPlacement","inputProps","select","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","subtitleRegexFilterKey","subtitleRegexFilterTextReplacementKey","miningHistoryStorageLimitKey","languageKey","SettingsProvider","_tags","_keyBindSet","_storage","newSettings","delete","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","takeScreenshotHandlers","onExtensionMessage","handlers","h","KeyboardEvent","useCapture","takeScreenshotHandler","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","seekRequest","poppingInRef","videoRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","setSubtitleAlignment","subtitlePositionOffset","setSubtitlePositionOffset","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","lastMinedRecord","setLastMinedRecord","changeLanguage","videoRefCallback","videoElement","onloadeddata","ontimeupdate","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","toggleSubtitleTrackInList","extractSubtitles","mineSubtitle","mineCurrentSubtitle","extracted","currentTimestamp","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","onWheel","deltaY","shouldIncreaseOffset","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","realExtension","CopyHistoryDatabase","copyHistoryItems","stores","Dexie","CopyHistoryRepository","limit","_db","_limit","reverse","toArray","audioTrack","filePlaybackRate","record","audioFileName","put","_prune","lastIndex","where","belowOrEqual","primaryKeys","bulkDelete","LocalizedError","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","keyBindNameMap","initialExtension","listenForVersion","versionListener","translatedCommands","extensionCommandName","unbindInitialListener","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","calculateInterval","fromFile","fromMissingFile","imageFromItem","itemSourceString","NavigateToVideo","searchParams","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","setExtension","useChromeExtension","setVideoFullscreen","videoPlayerSeekRequest","setVideoPlayerSeekRequest","drawerRatio","minDrawerSize","copyHistoryRepository","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","locKey","locParams","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","handleTakeScreenshot","lastCopyHistoryItem","newCopyHistoryItem","save","subtitleFile","newCopiedSubtitle","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","publishSharedGlobalSettings","handleDeleteCopyHistoryItem","newCopiedSubtitles","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","handleAnkiDialogRewindFromVideoPlayer","subscribeTabs","t1","t2","selectedTabMissing","tabName","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","handleCopyToClipboard","ClipboardItem","i18nInitialized","setI18nInitialized","on","off","useI18nInitialized","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.cb615cba.chunk.js","sourcesContent":["var map = {\n\t\"./de.json\": [\n\t\t414,\n\t\t3\n\t],\n\t\"./en.json\": [\n\t\t415,\n\t\t4\n\t],\n\t\"./ja.json\": [\n\t\t416,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 293;\nmodule.exports = webpackAsyncContext;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { useEffect, useState } from 'react';\n\nconst i18nInit = i18n\n    .use(LanguageDetector)\n    .use(resourcesToBackend((language: string) => import(`@project/common/locales/${language}.json`)))\n    .use(initReactI18next)\n    .init({\n        partialBundledLanguages: true,\n        resources: {},\n        fallbackLng: 'en',\n        debug: process.env.NODE_ENV === 'development',\n        ns: 'translation',\n        defaultNS: 'translation',\n        interpolation: {\n            escapeValue: false,\n        },\n        detection: {\n            order: ['localStorage'],\n            lookupLocalStorage: 'i18nextLng',\n            caches: ['localStorage'],\n        },\n    });\n\nconst useI18nInitialized = () => {\n    const [i18nInitialized, setI18nInitialized] = useState<boolean>(false);\n    const [language, setLanguage] = useState<string>(i18n.language);\n\n    useEffect(() => {\n        i18nInit.then(() => setI18nInitialized(true));\n    }, []);\n\n    useEffect(() => {\n        i18n.on('languageChanged', setLanguage);\n        return () => i18n.off('languageChanged', setLanguage);\n    }, []);\n\n    return { i18nInitialized, language };\n};\n\nexport { useI18nInitialized, i18n };\n","import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.takeScreenshot.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onTakeScreenshot, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    takeScreenshotHandler(onTakeScreenshot: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onTakeScreenshot(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindBack: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (backShortcut) {\n            unbindBack = this._bind(backShortcut, capture, backHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindBack?.();\n            unbindNext?.();\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        const unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        const unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        return () => {\n            unbindDecrease();\n            unbindIncrease();\n        };\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean | undefined\n    ) {\n        const shortcut = this.keyBindSet.resetOffset.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onResetOffset(event);\n        };\n\n        return this._bind(shortcut, capture ?? false, handler);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n        let unbindDecrease: (() => void) | undefined;\n        let unbindIncrease: (() => void) | undefined;\n\n        if (decreaseShortcut) {\n            unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        }\n\n        return () => {\n            unbindDecrease?.();\n            unbindIncrease?.();\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            unbindHandlers.push(this._bind(shortcuts[i], capture, handler));\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            const unbindHandler = this._bind(shortcuts[i], capture, handler);\n            unbindHandlers.push(unbindHandler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindCondensedPlayback(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    private _bind(shortcut: string, capture: boolean, handler: (event: KeyboardEvent) => void) {\n        const wrappedHandler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                handler(event);\n            } else if (event.type === 'keyup') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        };\n        hotkeys(shortcut, { capture, keydown: true, keyup: true }, wrappedHandler);\n        return () => hotkeys.unbind(shortcut, wrappedHandler);\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder-worker.cb82d5b8.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\nexport function joinSubtitles(subtitles: SubtitleModel[]) {\n    return subtitles\n        .filter((s) => s.text.trim() !== '')\n        .map((s) => s.text)\n        .join('\\n');\n}\n\nexport function extractText(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) {\n    if (surroundingSubtitles.length === 0) {\n        return subtitle.text;\n    }\n\n    const interval = [subtitle.start, subtitle.end];\n    return joinSubtitles(surroundingSubtitles.filter((s) => subtitleIntersectsTimeInterval(s, interval)));\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './mp3-encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder-worker.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n    isPlayable: () => boolean;\n}\n\nfunction recorderConfiguration() {\n    const AUDIO_TYPES: { [key: string]: string } = {\n        'audio/ogg;codecs=opus': 'ogg',\n        'audio/webm;codecs=opus': 'webm',\n    };\n    return Object.keys(AUDIO_TYPES)\n        .filter(MediaRecorder.isTypeSupported)\n        .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n\nclass MissingFileAudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly _extension: string;\n\n    constructor(fileName: string, start: number, end: number) {\n        this._name = `${fileName}_${start}_${end}`;\n        this._start = start;\n        this._end = end;\n        [, this._extension] = recorderConfiguration();\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    async play() {\n        throw new Error('Not supported');\n    }\n\n    async blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not  supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return false;\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    static fromMissingFile(fileName: string, start: number, end: number) {\n        return new AudioClip(new MissingFileAudioData(fileName, start, end));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n","import { RectModel } from \"./model\";\n\nexport const resizeCanvas = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    maxWidth: number,\n    maxHeight: number\n): Promise<HTMLCanvasElement> => {\n    return new Promise((resolve, reject) => {\n        const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n        const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n        const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n        if (ratio < 1) {\n            const newWidth = canvas.width * ratio;\n            const newHeight = canvas.height * ratio;\n            createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight, resizeQuality: 'high' })\n                .then((sprite) => {\n                    canvas.width = newWidth;\n                    canvas.height = newHeight;\n                    ctx.drawImage(sprite, 0, 0);\n                    resolve(canvas);\n                })\n                .catch((e) => reject(e));\n        } else {\n            resolve(canvas);\n        }\n    });\n};\n\nexport const cropAndResize = async (\n    maxWidth: number,\n    maxHeight: number,\n    rect: RectModel,\n    imageDataUrl: string\n): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = async () => {\n            const canvas = document.createElement('canvas');\n            const r = window.devicePixelRatio;\n            const width = rect.width * r;\n            const height = rect.height * r;\n            canvas.width = width;\n            canvas.height = height;\n            const ctx = canvas.getContext('2d')!;\n            ctx.drawImage(image, rect.left * r, rect.top * r, width, height, 0, 0, width, height);\n\n            if (maxWidth > 0 || maxHeight > 0) {\n                try {\n                    await resizeCanvas(canvas, ctx, maxWidth, maxHeight);\n                    resolve(canvas.toDataURL('image/jpeg'));\n                } catch (e) {\n                    console.error('Failed to crop and resize image: ' + e);\n                    reject(e);\n                }\n            } else {\n                resolve(canvas.toDataURL('image/jpeg'));\n            }\n        };\n\n        image.src = imageDataUrl;\n    });\n};","import { resizeCanvas } from './image-transformer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    await resizeCanvas(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\nclass MissingFileImageData implements ImageData {\n    private readonly _name: string;\n\n    constructor(fileName: string, timestamp: number) {\n        this._name = `${fileName}_${Math.floor(timestamp)}`;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return false;\n    }\n\n    base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    dataUrl(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n    available: boolean;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    static fromMissingFile(fileName: string, timestamp: number) {\n        return new Image(new MissingFileImageData(fileName, timestamp));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    get available() {\n        return this.data.available;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './audio-clip';\nimport Image from './image';\nimport { HttpFetcher, Fetcher } from './fetcher';\nimport { AnkiSettings } from './settings';\nimport sanitize from 'sanitize-filename';\nimport { AudioModel, ImageModel, SubtitleModel } from './model';\nimport { extractText } from './util';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport async function updateLastCard(\n    ankiSettings: AnkiSettings,\n    subtitle: SubtitleModel,\n    surroundingSubtitles: SubtitleModel[],\n    audioModel: AudioModel | undefined,\n    imageModel: ImageModel | undefined,\n    sourceString: string,\n    url: string | undefined\n) {\n    const anki = new Anki(ankiSettings);\n    let audioClip =\n        audioModel === undefined\n            ? undefined\n            : AudioClip.fromBase64(\n                  sourceString,\n                  subtitle.start,\n                  subtitle.end,\n                  audioModel.playbackRate ?? 1,\n                  audioModel.base64,\n                  audioModel.extension\n              );\n\n    return await anki.export(\n        extractText(subtitle, surroundingSubtitles),\n        undefined,\n        audioClip,\n        imageModel === undefined\n            ? undefined\n            : Image.fromBase64(sourceString, subtitle.start, imageModel.base64, imageModel.extension),\n        undefined,\n        sourceString,\n        url,\n        {},\n        ankiSettings.tags,\n        'updateLast'\n    );\n}\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip && audioClip.isPlayable()) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image && image.available) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { AnkiSettings } from './settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n    openedFromMiningCommand?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { SubtitleModel } from './model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","export * from './src/key-binder';\nexport { default as AudioClip } from './src/audio-clip';\nexport { default as Mp3Encoder } from './src/mp3-encoder';\nexport { default as Image } from './src/image';\nexport * from './src/anki';\nexport * from './src/image-transformer';\nexport * from './src/command';\nexport * from './src/util';\nexport * from './src/settings';\nexport * from './src/model';\nexport * from './src/message';\nexport * from './src/extension-settings';\nexport * from './src/subtitle-collection';\nexport { default as AutoPauseContext } from './src/auto-pause-context';\nexport const supportedLanguages = ['en', 'ja', 'de'];\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextFieldProps } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n    subtitleIntersectsTimeInterval,\n    joinSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    onCopyToClipboard: (blob: Blob) => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    onCopyToClipboard,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n    const { t } = useTranslation();\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return joinSubtitles(\n                sliderContext!.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n            );\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(initialText ?? joinSubtitles(selectedSubtitles));\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!audioClip?.isPlayable()) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? t('ankiDialog.foundDuplicateNotes', {\n                      count: duplicateNotes.length,\n                      word: word,\n                      field: settingsProvider.wordField,\n                  })\n                : t('ankiDialog.foundNoDuplicateNote', { word: word, field: settingsProvider.wordField });\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!image?.available) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const currentLength = timestampBoundaryInterval[1] - timestampBoundaryInterval[0];\n        const minimumChange = currentLength / 4;\n        const newMin = Math.max(\n            0,\n            Math.min(\n                timestampBoundaryInterval[0] - minimumChange,\n                2 * timestampBoundaryInterval[0] - timestampInterval[0]\n            )\n        );\n        const newMax = Math.max(\n            timestampBoundaryInterval[1] + minimumChange,\n            2 * timestampBoundaryInterval[1] - timestampInterval[1]\n        );\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            onCopyToClipboard(await image.pngBlob());\n        },\n        [image, onCopyToClipboard]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title={t('ankiDialog.rerecord')!}>\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    let audioHelperText: string | undefined;\n\n    if (audioClip) {\n        if (!audioClip.isPlayable()) {\n            audioHelperText = t('ankiDialog.audioFileLinkLost') ?? undefined;\n        } else if (onRerecord === undefined && !audioClip.isSliceable()) {\n            audioHelperText = t('ankiDialog.cannotUpdateAudio') ?? undefined;\n        }\n    }\n\n    let imageHelperText: string | undefined;\n\n    if (image) {\n        if (!image.available) {\n            imageHelperText = t('ankiDialog.imageFileLinkLost') ?? undefined;\n        }\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {t('ankiDialog.title')}\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n                {onCancel && (\n                    <IconButton edge=\"end\" onClick={() => onCancel()}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label={t('ankiDialog.sentence')}\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title={t('ankiDialog.applySelection')!}>\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        minRows={8}\n                        label={t('ankiDialog.definition')!}\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label={t('ankiDialog.word')}\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title={t('ankiDialog.searchInAnki')!}>\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label={t('ankiDialog.audio')}\n                                helperText={audioHelperText}\n                                disabled={!audioClip.isPlayable()}\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label={t('ankiDialog.image')}\n                                helperText={imageHelperText}\n                                disabled={!image.available}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title={t('ankiDialog.copyToClipboard')!}>\n                                                <span>\n                                                    <IconButton\n                                                        disabled={!image.available}\n                                                        onClick={handleCopyImageToClipboard}\n                                                        edge=\"end\"\n                                                    >\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label={t('ankiDialog.source')}\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label={t('ankiDialog.url')}\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText={t('ankiDialog.tagList')}\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.resetSlider')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.zoomIn')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.zoomOut')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    {t('ankiDialog.openInAnki')}\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    {t('ankiDialog.updateLastCard')}\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    {t('ankiDialog.export')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport interface TextFilter {\n    regex: RegExp;\n    replacement: string;\n}\n\nexport default class SubtitleReader {\n    private readonly _textFilter?: TextFilter;\n    private xmlParser?: XMLParser;\n\n    constructor(textFilter?: TextFilter) {\n        this._textFilter = textFilter;\n    }\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .filter((node) => node.textImage !== undefined || node.text !== '')\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: this._filterText(cue.text).replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = this._filterText(c.text).replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: this._filterText(\n                        dialogue.slices.flatMap((slice) => slice.fragments.map((fragment) => fragment.text)).join('')\n                    ).replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._filterText(this._decodeHTML(String(elm['#text'])).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: this._filterText(elm.textContent ?? ''),\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    private _filterText(text: string): string {\n        if (this._textFilter === undefined) {\n            return text;\n        }\n\n        return text.replace(this._textFilter.regex, this._textFilter.replacement).trim();\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n    const { t } = useTranslation();\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            {t('action.openFiles')}\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            {t('action.downloadSubtitlesAsSrt')}\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title={t('action.openFiles')!}\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" noWrap className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title={t('bar.donate')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.submitIssue')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.help')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.settings')!}>\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title={t('bar.miningHistory')!} show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioFileName?: string;\n    audioTrack?: string;\n    videoFile?: File;\n    videoFileName?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const { t } = useTranslation();\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.copy')} />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.jumpTo')} />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText\n                            primaryTypographyProps={{ variant: 'body2' }}\n                            primary={t('action.downloadAudio')}\n                        />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText\n                            primaryTypographyProps={{ variant: 'body2' }}\n                            primary={t('action.downloadImage')}\n                        />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.delete')} />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n    const { t } = useTranslation();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title={t('copyHistory.downloadMinedSubsAsSrt')!}>\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title={t('copyHistory.exportToAnki')!}>\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <NoteAddIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? t('copyHistory.blank') : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">{t('copyHistory.miningHistoryEmpty')}</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const extensionUpdateAvailable = extension.version && gt(latestExtensionVersion, extension.version);\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        <Trans i18nKey={'landing.cta'}>\n                            Drag and drop subtitle and media files, or\n                            <Link\n                                target=\"#\"\n                                className={classes.browseLink}\n                                onClick={onFileSelector}\n                                color=\"secondary\"\n                                component=\"label\"\n                            >\n                                browse\n                            </Link>\n                            .\n                        </Trans>\n                        <br />\n                        {!extension.installed && (\n                            <Trans i18nKey=\"landing.extensionNotInstalled\">\n                                Install the\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>\n                                to sync subtitles with streaming video.\n                            </Trans>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <Trans i18nKey=\"landing.extensionUpdateAvailable\">\n                                An extension\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </Trans>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import CachedLocalStorage from './cached-local-storage';\nimport SettingsProvider from './settings-provider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst subtitleAlignmentKey = 'subtitleAlignment';\nconst subtitlePositionOffetKey = 'subtitlePositionOffset';\nconst defaultVolume = 100;\n\nexport enum SubtitleAlignment {\n    bottom = 0,\n    top = 1,\n}\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n    private readonly storage = new CachedLocalStorage();\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = this.storage.get(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        this.storage.set(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return this.storage.get(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        this.storage.set(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = this.storage.get(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        this.storage.set(offsetKey, String(offset));\n    }\n\n    get subtitleAlignment() {\n        const val = this.storage.get(subtitleAlignmentKey);\n\n        if (val === undefined) {\n            return SubtitleAlignment.bottom;\n        }\n\n        return Number(val) as SubtitleAlignment;\n    }\n\n    set subtitleAlignment(alignment: SubtitleAlignment) {\n        this.storage.set(subtitleAlignmentKey, String(alignment));\n    }\n\n    get subtitlePositionOffset() {\n        const val = this.storage.get(subtitlePositionOffetKey);\n\n        if (val === null) {\n            return 100;\n        }\n\n        return Number(val);\n    }\n\n    set subtitlePositionOffset(offset: number) {\n        this.storage.set(subtitlePositionOffetKey, String(offset));\n    }\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./video-protocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\nimport { VideoProtocol, VideoProtocolMessage } from './video-protocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","export default class CachedLocalStorage {\n    private readonly _cache: { [key: string]: string | null } = {};\n\n    get(key: string): string | null {\n        let cached = this._cache[key];\n\n        if (cached === undefined) {\n            const fromStorage = localStorage.getItem(key);\n            this._cache[key] = fromStorage;\n            return fromStorage;\n        }\n\n        return cached;\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n        this._cache[key] = value;\n    }\n\n    delete(key: string) {\n        delete this._cache[key];\n        localStorage.removeItem(key);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop';\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/clock';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    const { t } = useTranslation();\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        {t('controls.normalMode')}\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        {t('controls.condensedMode')}\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        {t('controls.autoPauseMode')}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n    subtitleAlignmentEnabled?: boolean;\n    subtitleAlignment?: SubtitleAlignment;\n    onSubtitleAlignment?: (alignment: SubtitleAlignment) => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n    subtitleAlignment,\n    subtitleAlignmentEnabled,\n    onSubtitleAlignment,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const { t } = useTranslation();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const handleSubtitleAlignment = useCallback(() => {\n        if (!subtitleAlignmentEnabled || subtitleAlignment === undefined || onSubtitleAlignment === undefined) {\n            return;\n        }\n\n        const newAlignment =\n            subtitleAlignment === SubtitleAlignment.top ? SubtitleAlignment.bottom : SubtitleAlignment.top;\n        onSubtitleAlignment(newAlignment);\n    }, [subtitleAlignment, subtitleAlignmentEnabled, onSubtitleAlignment]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title={t('controls.subtitleOffset')!}>\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title={t('controls.playbackRate')!}>\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitleAlignmentEnabled && subtitleAlignment !== undefined && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleSubtitleAlignment}>\n                                        {subtitleAlignment === SubtitleAlignment.top ? (\n                                            <VerticalAlignTopIcon />\n                                        ) : (\n                                            <VerticalAlignBottomIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n    AutoPauseContext,\n    mockSurroundingSubtitles,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], postMineAction: PostMineAction) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const { t } = useTranslation();\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(0);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const currentMockSubtitle = useCallback(() => {\n        const timestamp = clock.time(length);\n        const end = Math.min(timestamp + 5000, length);\n        return {\n            text: '',\n            start: timestamp,\n            originalStart: timestamp,\n            end: end,\n            originalEnd: end,\n            track: 0,\n        };\n    }, [clock, length]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!subtitles || subtitles.length === 0) {\n                return mockSurroundingSubtitles(currentMockSubtitle(), length, 5000);\n            }\n\n            if (!selectedSubtitleIndexesRef.current || Object.keys(selectedSubtitleIndexesRef.current).length === 0) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [\n            length,\n            subtitles,\n            currentMockSubtitle,\n            settingsProvider.surroundingSubtitlesCountRadius,\n            settingsProvider.surroundingSubtitlesTimeRadius,\n        ]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        if (!subtitles || subtitles.length === 0) {\n            const timestamp = clock.time(length);\n            const end = Math.min(timestamp + 5000, length);\n            return {\n                text: '',\n                start: timestamp,\n                originalStart: timestamp,\n                end: end,\n                originalEnd: end,\n                track: 0,\n            };\n        }\n\n        if (!selectedSubtitleIndexesRef.current) {\n            return undefined;\n        }\n\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none);\n            },\n            () => disableKeyEvents,\n            () => calculateCurrentSubtitle()\n        );\n    }, [keyBinder, disableKeyEvents, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const currentSubtitle = calculateCurrentSubtitle();\n\n                if (currentSubtitle) {\n                    onCopy(currentSubtitle, calculateSurroundingSubtitles(), PostMineAction.showAnkiDialog);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateCurrentSubtitle, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const currentSubtitle = calculateCurrentSubtitle();\n\n                if (currentSubtitle) {\n                    onCopy(currentSubtitle, calculateSurroundingSubtitles(), PostMineAction.updateLastCard);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateCurrentSubtitle, calculateSurroundingSubtitles]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{t('landing.noSubtitles')}</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CopyToVideoMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    TakeScreenshotToVideoPlayerMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './video-protocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        id: string | undefined,\n        mediaTimestamp: number | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.id,\n                            copyMessage.mediaTimestamp\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n        return () => this._remove(callback, this.readyCallbacks);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n        return () => this._remove(callback, this.playCallbacks);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n        return () => this._remove(callback, this.pauseCallbacks);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n        return () => this._remove(callback, this.currentTimeCallbacks);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n        return () => this._remove(callback, this.audioTrackSelectedCallbacks);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n        return () => this._remove(callback, this.exitCallbacks);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n        return () => this._remove(callback, this.offsetCallbacks);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n        return () => this._remove(callback, this.playbackRateCallbacks);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.popOutToggleCallbacks);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            id: string | undefined,\n            mediaTimestamp: number | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n        return () => this._remove(callback, this.copyCallbacks);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n        return () => this._remove(callback, this.playModeCallbacks);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.hideSubtitlePlayerToggleCallbacks);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.appBarToggleCallbacks);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.fullscreenToggleCallbacks);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n        return () => this._remove(callback, this.ankiDialogRequestCallbacks);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n        return () => this._remove(callback, this.toggleSubtitleTrackInListCallbacks);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    copy(postMineAction: PostMineAction) {\n        const message: CopyToVideoMessage = { command: 'copy', postMineAction };\n        this.protocol.postMessage(message);\n    }\n\n    takeScreenshot() {\n        const message: TakeScreenshotToVideoPlayerMessage = { command: 'takeScreenshot' };\n        this.protocol.postMessage(message);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/broadcast-channel-video-protocol';\nimport ChromeTabVideoProtocol from '../services/chrome-tab-video-protocol';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/media-adapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/video-channel';\nimport ChromeExtension from '../services/chrome-extension';\nimport SubtitleReader from '../services/subtitle-reader';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audio: HTMLAudioElement | null,\n    video: MediaElement | undefined,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n): number {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audio && audio.duration ? 1000 * audio.duration : 0;\n    const videoLength = video && video.duration ? 1000 * video.duration : 0;\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogOpen: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: any) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAnkiDialogRewind: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    onTakeScreenshot: (mediaTimestamp: number) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    ankiDialogOpen,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAnkiDialogRewind,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    onTakeScreenshot,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitlesRef = useRef<DisplaySubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [channel, setChannel] = useState<VideoChannel>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter({ current: channel });\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [channel, audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef.current, channel, subtitles);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (channel !== undefined) {\n                        channel.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            channel.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab, channel]\n    );\n\n    useEffect(() => {\n        async function init() {\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setPlayMode((playMode) => (!subtitles || subtitles.length === 0 ? PlayMode.normal : playMode));\n                } catch (e) {\n                    onError(e);\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n                setPlayMode(PlayMode.normal);\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n            }\n        }\n\n        init().then(() => onLoaded());\n    }, [\n        subtitleReader,\n        playbackPreferences,\n        mediaAdapter,\n        onLoaded,\n        onError,\n        subtitleFiles,\n        audioFileUrl,\n        flattenSubtitleFiles,\n    ]);\n\n    useEffect(() => {\n        setPlaying(false);\n        clock.setTime(0);\n        clock.stop();\n\n        if (audioRef.current) {\n            audioRef.current.pause();\n            audioRef.current.currentTime = 0;\n        }\n    }, [clock, audioFileUrl]);\n\n    useEffect(() => {\n        if (!videoFileUrl && !tab) {\n            return;\n        }\n\n        let channel: VideoChannel;\n\n        if (videoFileUrl) {\n            const channelId = uuidv4();\n            channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n            setChannelId(channelId);\n        } else {\n            channel = new VideoChannel(new ChromeTabVideoProtocol(tab!.id, tab!.src, extension));\n            channel.init();\n        }\n\n        videoChannelRef.current = channel;\n        setChannel(channel);\n\n        return () => {\n            clock.setTime(0);\n            clock.stop();\n            setPlaying(false);\n            channel.close();\n        };\n    }, [clock, videoFileUrl, tab, extension, videoChannelRef]);\n\n    useEffect(\n        () => channel?.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl)),\n        [channel, onUnloadVideo, videoFileUrl]\n    );\n    useEffect(() => channel?.onPopOutToggle(() => onVideoPopOut()), [channel, onVideoPopOut]);\n    useEffect(() => channel?.onHideSubtitlePlayerToggle(onHideSubtitlePlayer), [channel, onHideSubtitlePlayer]);\n    useEffect(() => channel?.onAppBarToggle(onAppBarToggle), [channel, onAppBarToggle]);\n    useEffect(() => channel?.onFullscreenToggle(onFullscreenToggle), [channel, onFullscreenToggle]);\n    useEffect(\n        () =>\n            channel?.onReady(() => {\n                return channel?.ready(trackLength(audioRef.current, channel, subtitles));\n            }),\n        [channel, subtitles]\n    );\n    useEffect(\n        () => channel?.onReady(() => channel?.subtitleSettings(settingsProvider.subtitleSettings)),\n        [channel, settingsProvider]\n    );\n    useEffect(() => {\n        if (channel === undefined || subtitles === undefined) {\n            return;\n        }\n\n        return channel.onReady(() =>\n            channel.subtitles(\n                subtitles,\n                flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n            )\n        );\n    }, [subtitles, channel, flattenSubtitleFiles, subtitleFiles]);\n    useEffect(() => channel?.ankiSettings(settingsProvider.ankiSettings), [channel, settingsProvider]);\n    useEffect(() => channel?.miscSettings(settingsProvider.miscSettings), [channel, settingsProvider]);\n    useEffect(() => channel?.playMode(playMode), [channel, playMode]);\n    useEffect(() => channel?.hideSubtitlePlayerToggle(hideSubtitlePlayer), [channel, hideSubtitlePlayer]);\n    useEffect(\n        () =>\n            channel?.onReady(() => {\n                if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                    setAudioTracks(channel?.audioTracks);\n                    setSelectedAudioTrack(channel?.selectedAudioTrack);\n                } else {\n                    setAudioTracks(undefined);\n                    setSelectedAudioTrack(undefined);\n                }\n            }),\n        [channel]\n    );\n    useEffect(\n        () =>\n            channel?.onReady((paused) => {\n                if (channel) {\n                    clock.setTime(channel.currentTime * 1000);\n                }\n\n                if (paused) {\n                    clock.stop();\n                } else {\n                    clock.start();\n                }\n\n                setPlaying(!paused);\n\n                if (channel?.playbackRate) {\n                    clock.rate = channel.playbackRate;\n                    setPlaybackRate(channel.playbackRate);\n                }\n            }),\n        [channel, clock]\n    );\n    useEffect(\n        () => channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia)),\n        [channel, mediaAdapter, clock]\n    );\n    useEffect(\n        () => channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia)),\n        [channel, mediaAdapter, clock]\n    );\n    useEffect(() => {\n        const length = lengthRef.current;\n        return channel?.onOffset((offset) => applyOffset(Math.max(-length ?? 0, offset), false));\n    }, [channel, applyOffset]);\n    useEffect(() => channel?.onPlaybackRate(updatePlaybackRate), [channel, updatePlaybackRate]);\n    useEffect(\n        () =>\n            channel?.onCopy((subtitle, surroundingSubtitles, audio, image, url, postMineAction, id, mediaTimetamp) =>\n                onCopy(\n                    subtitle,\n                    surroundingSubtitles,\n                    audioFile,\n                    videoFile,\n                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                    mediaTimetamp,\n                    channel?.selectedAudioTrack,\n                    channel?.playbackRate,\n                    audio,\n                    image,\n                    url,\n                    postMineAction,\n                    id\n                )\n            ),\n        [channel, onCopy, audioFile, videoFile, subtitleFiles]\n    );\n    useEffect(\n        () =>\n            channel?.onPlayMode((playMode) => {\n                setPlayMode(playMode);\n                channel?.playMode(playMode);\n            }),\n        [channel, playMode]\n    );\n    useEffect(\n        () =>\n            channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                if (playing) {\n                    clock.stop();\n                }\n\n                await seek(currentTime * 1000, clock, forwardToMedia);\n\n                if (playing) {\n                    clock.start();\n                }\n            }),\n        [channel, clock, playing, seek]\n    );\n    useEffect(\n        () =>\n            channel?.onAudioTrackSelected(async (id) => {\n                if (playing) {\n                    clock.stop();\n                }\n\n                await mediaAdapter.onReady();\n                if (playing) {\n                    clock.start();\n                }\n\n                setSelectedAudioTrack(id);\n            }),\n        [channel, clock, mediaAdapter, playing]\n    );\n    useEffect(() => channel?.onAnkiDialogRequest(() => onAnkiDialogRequest()), [channel, onAnkiDialogRequest]);\n    useEffect(\n        () =>\n            channel?.onToggleSubtitleTrackInList((track) =>\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                })\n            ),\n        [channel]\n    );\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playing) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter, playing]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const timestamp = clock.time(lengthRef.current);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playing) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playing) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek, playing]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (playing) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playing) {\n                clock.start();\n            }\n        },\n        [clock, seek, playing]\n    );\n\n    const handleSeekToTimestamp = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playing) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter, playing]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], postMineAction: PostMineAction) => {\n            if (videoFileUrl) {\n                // Let VideoPlayer do the copying to ensure copied subtitle is consistent with the VideoPlayer clock\n                channel?.copy(postMineAction);\n                return;\n            }\n\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                undefined\n            );\n        },\n        [channel, onCopy, clock, audioFile, videoFile, videoFileUrl, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            channel?.audioTrackSelected(id);\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playing) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [channel, clock, mediaAdapter, seek, playing]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            const length = lengthRef.current;\n            applyOffset(Math.max(-length ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const progress = clock.progress(lengthRef.current);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n            channel?.playMode(newPlayMode);\n        },\n        [channel, playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if (!videoFileUrl) {\n            return;\n        }\n\n        return keyBinder.bindTakeScreenshot(\n            (event) => {\n                event.preventDefault();\n\n                if (ankiDialogOpen) {\n                    onAnkiDialogRewind();\n                } else {\n                    onTakeScreenshot(clock.time(lengthRef.current));\n                }\n            },\n            () => false\n        );\n    }, [videoFileUrl, clock, onTakeScreenshot, onAnkiDialogRewind, keyBinder, disableKeyEvents, ankiDialogOpen]);\n\n    useEffect(() => channel?.appBarToggle(appBarHidden), [channel, appBarHidden]);\n    useEffect(() => channel?.hideSubtitlePlayerToggle(hideSubtitlePlayer), [channel, hideSubtitlePlayer]);\n    useEffect(() => channel?.fullscreenToggle(videoFullscreen), [channel, videoFullscreen]);\n\n    useEffect(() => {\n        if (rewindSubtitle?.start === undefined) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n        seek(rewindSubtitle.start, clock, true);\n    }, [clock, rewindSubtitle?.start, mediaAdapter, seek]);\n\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n\n                <Grid\n                    item\n                    style={{\n                        flexGrow: videoInWindow ? 0 : 1,\n                        width:\n                            videoInWindow && (hideSubtitlePlayer || !subtitles || subtitles?.length === 0) ? 0 : 'auto',\n                    }}\n                >\n                    {loaded && !(videoFileUrl && !videoPopOut) && (\n                        <Controls\n                            mousePositionRef={mousePositionRef}\n                            playing={playing}\n                            clock={clock}\n                            length={lengthRef.current}\n                            displayLength={trackLength(audioRef.current, channel, subtitles, false)}\n                            audioTracks={audioTracks}\n                            selectedAudioTrack={selectedAudioTrack}\n                            tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                            selectedTab={tab}\n                            audioFile={audioFile?.name}\n                            videoFile={videoFile?.name}\n                            offsetEnabled={true}\n                            offset={offset}\n                            playbackRate={playbackRate}\n                            playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                            onPlaybackRateChange={handlePlaybackRateChange}\n                            volumeEnabled={Boolean(audioFileUrl)}\n                            playModeEnabled={playModeEnabled}\n                            playMode={playMode}\n                            onPlay={handlePlay}\n                            onPause={handlePause}\n                            onSeek={handleSeek}\n                            onAudioTrackSelected={handleAudioTrackSelected}\n                            onTabSelected={onTabSelected}\n                            onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                            onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                            onOffsetChange={handleOffsetChange}\n                            onVolumeChange={handleVolumeChange}\n                            onPlayMode={handlePlayMode}\n                            disableKeyEvents={disableKeyEvents}\n                            playbackPreferences={playbackPreferences}\n                            showOnMouseMovement={true}\n                        />\n                    )}\n                    <SubtitlePlayer\n                        playing={playing}\n                        subtitles={subtitles}\n                        subtitleCollection={subtitleCollection}\n                        clock={clock}\n                        length={lengthRef.current}\n                        jumpToSubtitle={jumpToSubtitle}\n                        drawerOpen={drawerOpen}\n                        appBarHidden={appBarHidden}\n                        compressed={Boolean(videoFileUrl && !videoPopOut)}\n                        copyButtonEnabled={tab === undefined}\n                        loading={loadingSubtitles}\n                        displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                        disableKeyEvents={disableKeyEvents}\n                        lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                        hidden={videoInWindow && hideSubtitlePlayer}\n                        disabledSubtitleTracks={disabledSubtitleTracks}\n                        onSeek={handleSeekToTimestamp}\n                        onCopy={handleCopyFromSubtitlePlayer}\n                        onOffsetChange={handleOffsetChange}\n                        onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                        onSubtitlesSelected={handleSubtitlesSelected}\n                        autoPauseContext={autoPauseContext}\n                        settingsProvider={settingsProvider}\n                        keyBinder={keyBinder}\n                    />\n                </Grid>\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport AddIcon from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AsbplayerSettings,\n    AutoPausePreference,\n    KeyBindSet,\n    KeyBindName,\n    supportedLanguages,\n} from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { useOutsideClickListener } from '../hooks/use-outside-click-listener';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        marginLeft: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\nfunction regexIsValid(regex: string) {\n    try {\n        new RegExp(regex.trim());\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const { t } = useTranslation();\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useOutsideClickListener(\n        ref,\n        useCallback(() => {\n            if (editing) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        }, [editing, onKeysChange])\n    );\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = t('settings.recordingBind');\n    } else if (extensionOverridden) {\n        placeholder = t('settings.extensionOverriddenBind');\n    } else {\n        placeholder = t('settings.unboundBind');\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? t('settings.extensionShortcut') : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface AddCustomFieldProps {\n    onAddCustomField: (fieldName: string) => void;\n}\n\nfunction AddCustomField({ onAddCustomField }: AddCustomFieldProps) {\n    const { t } = useTranslation();\n    const [fieldName, setFieldName] = useState<string>('');\n\n    return (\n        <TextField\n            label={t('settings.addCustomField')}\n            fullWidth\n            value={fieldName}\n            color=\"secondary\"\n            onChange={(e) => setFieldName(e.target.value)}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton\n                            disabled={fieldName.trim() === ''}\n                            onClick={() => {\n                                onAddCustomField(fieldName.trim());\n                                setFieldName('');\n                            }}\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const keyBindProperties = useMemo<{ [key in KeyBindName]: KeyBindProperties }>(\n        () => ({\n            copySubtitle: { label: t('binds.copySubtitle')!, extensionOverridden: true },\n            ankiExport: { label: t('binds.ankiExport')!, extensionOverridden: true },\n            updateLastCard: {\n                label: t('binds.updateLastCard')!,\n                extensionOverridden: true,\n            },\n            takeScreenshot: {\n                label: t('binds.takeScreenshot')!,\n                extensionOverridden: true,\n            },\n            togglePlay: { label: t('binds.togglePlay')!, extensionOverridden: false },\n            toggleAutoPause: { label: t('binds.toggleAutoPause')!, extensionOverridden: false },\n            toggleCondensedPlayback: { label: t('binds.toggleCondensedPlayback')!, extensionOverridden: false },\n            toggleSubtitles: { label: t('binds.toggleSubtitles')!, extensionOverridden: false },\n            toggleVideoSubtitleTrack1: { label: t('binds.toggleVideoSubtitleTrack1')!, extensionOverridden: false },\n            toggleVideoSubtitleTrack2: { label: t('binds.toggleVideoSubtitleTrack2')!, extensionOverridden: false },\n            toggleAsbplayerSubtitleTrack1: {\n                label: t('binds.toggleAsbplayerSubtitleTrack1')!,\n                extensionOverridden: false,\n            },\n            toggleAsbplayerSubtitleTrack2: {\n                label: t('binds.toggleAsbplayerSubtitleTrack2')!,\n                extensionOverridden: false,\n            },\n            seekBackward: { label: t('binds.seekBackward')!, extensionOverridden: false },\n            seekForward: { label: t('binds.seekForward')!, extensionOverridden: false },\n            seekToPreviousSubtitle: { label: t('binds.seekToPreviousSubtitle')!, extensionOverridden: false },\n            seekToNextSubtitle: { label: t('binds.seekToNextSubtitle')!, extensionOverridden: false },\n            seekToBeginningOfCurrentSubtitle: {\n                label: t('binds.seekToBeginningOfCurrentSubtitle')!,\n                extensionOverridden: false,\n            },\n            adjustOffsetToPreviousSubtitle: {\n                label: t('binds.adjustOffsetToPreviousSubtitle')!,\n                extensionOverridden: false,\n            },\n            adjustOffsetToNextSubtitle: {\n                label: t('binds.adjustOffsetToNextSubtitle')!,\n                extensionOverridden: false,\n            },\n            increaseOffset: { label: t('binds.increaseOffset')!, extensionOverridden: false },\n            decreaseOffset: { label: t('binds.decreaseOffset')!, extensionOverridden: false },\n            resetOffset: { label: t('binds.resetOffset')!, extensionOverridden: false },\n            increasePlaybackRate: { label: t('binds.increasePlaybackRate')!, extensionOverridden: false },\n            decreasePlaybackRate: { label: t('binds.decreasePlaybackRate')!, extensionOverridden: false },\n        }),\n        [t]\n    );\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [miningHistoryStorageLimit, setMiningHistoryStorageLimit] = useState<number>(\n        settings.miningHistoryStorageLimit\n    );\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n    const [subtitleRegexFilter, setSubtitleRegexFilter] = useState<string>(settings.subtitleRegexFilter);\n    const [subtitleRegexFilterTextReplacement, setSubtitleRegexFilterTextReplacement] = useState<string>(\n        settings.subtitleRegexFilterTextReplacement\n    );\n    const [language, setLanguage] = useState<string>(settings.language);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n    const handleMiningHistoryStorageLimit = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setMiningHistoryStorageLimit(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleRegexFilter = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleRegexFilter(e.target.value.trim()),\n        []\n    );\n    const handleSubtitleRegexFilterTextReplacement = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleRegexFilterTextReplacement(e.target.value),\n        []\n    );\n    const handleLanguage = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setLanguage(e.target.value as string),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n            miningHistoryStorageLimit: miningHistoryStorageLimit,\n            subtitleRegexFilter: subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: subtitleRegexFilterTextReplacement,\n            language: language,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n        miningHistoryStorageLimit,\n        subtitleRegexFilter,\n        subtitleRegexFilterTextReplacement,\n        language,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    const validRegex = regexIsValid(subtitleRegexFilter);\n    const origin = `${window.location.protocol}//${window.location.hostname}`;\n    return (\n        <React.Fragment>\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>{t('settings.title')}</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki-settings\">\n                            <FormLabel>{t('settings.anki')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label={t('settings.ankiConnectUrl')}\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    <Trans\n                                        i18nKey={'settings.corsHelperText'}\n                                        values={{ origin }}\n                                        components={[\n                                            <Link\n                                                color=\"secondary\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                                href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                            >\n                                                video\n                                            </Link>,\n                                        ]}\n                                    ></Trans>\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label={t('settings.deck')}\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.noteType')}\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.sentenceField')}\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.definitionField')}\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.wordField')}\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.audioField')}\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.imageField')}\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.sourceField')}\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.urlField')}\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <AddCustomField onAddCustomField={handleAddCustomField} />\n                                <TagsTextField\n                                    label={t('settings.tags')}\n                                    helperText={t('settings.tagsHelperText')}\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining-settings\">\n                            <FormLabel>{t('settings.mining')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label={t('settings.mp3Preference')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label={t('settings.copyOnMine')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.audioPaddingStart')}\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.audioPaddingEnd')}\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.maxImageWidth')}\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.maxImageHeight')}\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.surroundingSubtitlesCountRadius')}\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.surroundingSubtitlesTimeRadius')}\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"misc-settings\">\n                            <FormLabel>{t('settings.misc')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label={t('settings.rememberSubtitleOffset')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label={t('settings.autoCopy')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.miningHistoryStorageLimit')}\n                                    fullWidth\n                                    value={miningHistoryStorageLimit}\n                                    color=\"secondary\"\n                                    onChange={handleMiningHistoryStorageLimit}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    label={t('settings.subtitleRegexFilter')}\n                                    fullWidth\n                                    value={subtitleRegexFilter}\n                                    color=\"secondary\"\n                                    error={!validRegex}\n                                    helperText={validRegex ? undefined : 'Invalid regular expression'}\n                                    onChange={handleSubtitleRegexFilter}\n                                />\n                                <TextField\n                                    label={t('settings.subtitleRegexFilterTextReplacement')}\n                                    fullWidth\n                                    value={subtitleRegexFilterTextReplacement}\n                                    color=\"secondary\"\n                                    onChange={handleSubtitleRegexFilterTextReplacement}\n                                />\n                                <TextField\n                                    select\n                                    label={t('settings.language')}\n                                    value={language}\n                                    color=\"secondary\"\n                                    onChange={handleLanguage}\n                                >\n                                    {supportedLanguages.map((s) => (\n                                        <MenuItem key={s} value={s}>\n                                            {s}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause-settings\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>{t('settings.autoPausePreference')}</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip title={t('settings.autoPausePreferenceHelperText')!} placement=\"top\">\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label={t('settings.autoPauseAtSubtitleStart')}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label={t('settings.autoPauseAtSubtitleEnd')}\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>{t('settings.subtitleAppearance')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleColor')}\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleSize')}\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleOutlineColor')}\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleOutlineThickness')}\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleBackgroundColor')}\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleBackgroundOpacity')}\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label={t('settings.subtitleFontFamily')}\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.imageBasedSubtitleScaleFactor')}\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme-settings\">\n                            <FormLabel>{t('settings.theme')}</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label={t('settings.themeLight')}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label={t('settings.themeDark')}\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>{t('settings.keyboardShortcuts')}</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>{t('action.ok')}</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { RefObject, useEffect } from 'react';\n\nexport const useOutsideClickListener = (ref: RefObject<HTMLElement>, handler: (event: MouseEvent) => void) => {\n    useEffect(() => {\n        const clickHandler = (event: MouseEvent) => {\n            if (!ref.current?.contains(event.target as Node)) {\n                handler(event);\n            }\n        };\n        window.document.addEventListener('click', clickHandler);\n        return () => window.document.removeEventListener('click', clickHandler);\n    }, [ref, handler]);\n};\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\nimport CachedLocalStorage from './cached-local-storage';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    resetOffset: { keys: isMacOs ? '⇧+⌃+down' : 'ctrl+shift+down' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    takeScreenshot: { keys: isMacOs ? '⇧+⌃+V' : 'ctrl+shift+V' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\nconst defaultMiningHistoryStorageLimit = 25;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\nconst subtitleRegexFilterKey = 'subtitleRegexFilter';\nconst subtitleRegexFilterTextReplacementKey = 'subtitleRegexFilterTextReplacement';\nconst miningHistoryStorageLimitKey = 'miningHistoryStorageLimit';\nconst languageKey = 'i18nextLng';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n    private _storage = new CachedLocalStorage();\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n            language: this.language,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n        this.miningHistoryStorageLimit = newSettings.miningHistoryStorageLimit;\n        this.subtitleRegexFilter = newSettings.subtitleRegexFilter;\n        this.subtitleRegexFilterTextReplacement = newSettings.subtitleRegexFilterTextReplacement;\n        this.language = newSettings.language;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n            language: this.language,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = this._storage.get(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            this._storage.delete(key);\n        } else {\n            this._storage.set(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return this._storage.get(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        this._storage.set(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return this._storage.get(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return this._storage.get(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return this._storage.get(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return this._storage.get(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return this._storage.get(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return this._storage.get(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return this._storage.get(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return this._storage.get(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return this._storage.get(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = this._storage.get(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        this._storage.set(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = this._storage.get(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        this._storage.set(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return this._storage.get(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        this._storage.set(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        this._storage.set(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return this._storage.get(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        this._storage.set(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        this._storage.set(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return this._storage.get(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        this._storage.set(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        this._storage.set(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return this._storage.get(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        this._storage.set(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return this._storage.get(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        this._storage.set(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        this._storage.set(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = this._storage.get(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        this._storage.set(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = this._storage.get(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        this._storage.set(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = this._storage.get(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        this._storage.set(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        this._storage.set(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = this._storage.get(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        this._storage.set(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        this._storage.set(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        this._storage.set(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        this._storage.set(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return this._storage.get(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        this._storage.set(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        this._storage.set(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = this._storage.get(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        this._storage.set(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return this._storage.get(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        this._storage.set(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return this._storage.get(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        this._storage.set(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n\n    get subtitleRegexFilter() {\n        return this._storage.get(subtitleRegexFilterKey) ?? '';\n    }\n\n    set subtitleRegexFilter(subtitleRegexFilter: string) {\n        this._storage.set(subtitleRegexFilterKey, subtitleRegexFilter);\n    }\n\n    get subtitleRegexFilterTextReplacement() {\n        return this._storage.get(subtitleRegexFilterTextReplacementKey) ?? '';\n    }\n\n    set subtitleRegexFilterTextReplacement(subtitleRegexFilterTextReplacement: string) {\n        this._storage.set(subtitleRegexFilterTextReplacementKey, subtitleRegexFilterTextReplacement);\n    }\n\n    get miningHistoryStorageLimit() {\n        return this._getNumberItem(miningHistoryStorageLimitKey, defaultMiningHistoryStorageLimit);\n    }\n\n    set miningHistoryStorageLimit(miningHistoryStorageLimit: number) {\n        this._storage.set(miningHistoryStorageLimitKey, String(miningHistoryStorageLimit));\n    }\n\n    get language() {\n        return this._storage.get(languageKey) ?? 'en';\n    }\n\n    set language(language: string) {\n        this._storage.set(languageKey, language);\n    }\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CopyToVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n    private copyCallbacks: ((postMineAction: PostMineAction) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n        this.copyCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                case 'copy':\n                    const copyMessage = event.data as CopyToVideoMessage;\n\n                    for (const callback of that.copyCallbacks) {\n                        callback(copyMessage.postMineAction);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n        return () => this._remove(callback, this.playCallbacks);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n        return () => this._remove(callback, this.pauseCallbacks);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n        return () => this._remove(callback, this.currentTimeCallbacks);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n        return () => this._remove(callback, this.audioTrackSelectedCallbacks);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n        return () => this._remove(callback, this.closeCallbacks);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n        return () => this._remove(callback, this.readyCallbacks);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n        return () => this._remove(callback, this.subtitlesCallbacks);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n        return () => this._remove(callback, this.offsetCallbacks);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n        return () => this._remove(callback, this.playbackRateCallbacks);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n        return () => this._remove(callback, this.playModeCallbacks);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.hideSubtitlePlayerToggleCallbacks);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.appBarToggleCallbacks);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.fullscreenToggleCallbacks);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.subtitleSettingsCallbacks);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.miscSettingsCallbacks);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.ankiSettingsCallbacks);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n        return () => this._remove(callback, this.alertCallbacks);\n    }\n\n    onCopy(callback: (postMineAction: PostMineAction) => void) {\n        this.copyCallbacks.push(callback);\n        return () => this._remove(callback, this.copyCallbacks);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        mediaTimestamp: number,\n        postMineAction: PostMineAction\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            postMineAction: postMineAction,\n            mediaTimestamp,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n            this.copyCallbacks = [];\n        }\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly takeScreenshotHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n            } else if (message.data.command === 'take-screenshot') {\n                handlers = this.takeScreenshotHandlers;\n            }\n\n            if (handlers !== undefined) {\n                for (const h of handlers) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.takeScreenshotHandler(onTakeScreenshot, disabledGetter);\n            this.takeScreenshotHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.takeScreenshotHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindTakeScreenshot(onTakeScreenshot, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindResetOffet(onResetOffset, disabledGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/player-channel';\nimport SettingsProvider from '../services/settings-provider';\nimport AppKeyBinder from '../services/app-key-binder';\nimport ChromeExtension from '../services/chrome-extension';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\nimport { i18n } from './i18n';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'MEDIA_ERR_ABORTED';\n            break;\n        case 2:\n            error = 'MEDIA_ERR_ABORTED';\n            break;\n        case 3:\n            error = 'MEDIA_ERR_DECODE';\n            break;\n        case 4:\n            error = 'MEDIA_ERR_SRC_NOT_SUPPORTED';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\nexport interface SeekRequest {\n    timestamp: number;\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    ankiDialogOpen: boolean;\n    seekRequest?: SeekRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onAnkiDialogRewind: () => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\ninterface MinedRecord {\n    videoFileUrl: string;\n    videoFileName: string;\n    selectedAudioTrack: string | undefined;\n    playbackRate: number;\n    subtitle: SubtitleModel;\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    ankiDialogOpen,\n    seekRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n    onAnkiDialogRewind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const [subtitleAlignment, setSubtitleAlignment] = useState<SubtitleAlignment>(\n        playbackPreferences.subtitleAlignment\n    );\n    const [subtitlePositionOffset, setSubtitlePositionOffset] = useState<number>(\n        playbackPreferences.subtitlePositionOffset\n    );\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const [lastMinedRecord, setLastMinedRecord] = useState<MinedRecord>();\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n\n    useEffect(() => {\n        if (i18n.language !== miscSettings.language) {\n            i18n.changeLanguage(miscSettings.language);\n        }\n    }, [miscSettings]);\n\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            setShowSubtitles([]);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    useEffect(() => {\n        if (seekRequest !== undefined) {\n            handleSeek(seekRequest.timestamp / length);\n        }\n    }, [handleSeek, seekRequest, length]);\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                handleOffsetChange(0);\n            },\n            () => false\n        );\n    }, [keyBinder, handleOffsetChange]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(() => {\n        if (!subtitles || subtitles.length === 0) {\n            const timestamp = clock.time(length);\n            const end = Math.min(timestamp + 5000, length);\n            const currentSubtitle = {\n                text: '',\n                start: timestamp,\n                originalStart: timestamp,\n                end: end,\n                originalEnd: end,\n                track: 0,\n            };\n\n            return { currentSubtitle, surroundingSubtitles: mockSurroundingSubtitles(currentSubtitle, length, 5000) };\n        } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n            const currentSubtitle = showSubtitlesRef.current[0];\n            return { currentSubtitle, surroundingSubtitles: calculateSurroundingSubtitles(currentSubtitle.index) };\n        }\n\n        return undefined;\n    }, [subtitles, calculateSurroundingSubtitles, length, clock]);\n\n    const mineSubtitle = useCallback(\n        (\n            postMineAction: PostMineAction,\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            switch (postMineAction) {\n                case PostMineAction.showAnkiDialog:\n                    if (popOut) {\n                        playerChannel.copy(subtitle, surroundingSubtitles, timestamp, PostMineAction.none);\n                        onAnkiDialogRequest(\n                            videoFileUrl,\n                            videoFileName ?? '',\n                            selectedAudioTrack,\n                            playbackRate,\n                            subtitle,\n                            surroundingSubtitles,\n                            timestamp\n                        );\n\n                        if (playing) {\n                            playerChannel.pause();\n                            setResumeOnFinishedAnkiDialogRequest(true);\n                        }\n                    } else {\n                        playerChannel.copy(subtitle, surroundingSubtitles, timestamp, PostMineAction.showAnkiDialog);\n                    }\n                    break;\n                default:\n                    playerChannel.copy(subtitle, surroundingSubtitles, timestamp, postMineAction);\n            }\n\n            setLastMinedRecord({\n                videoFileUrl,\n                videoFileName: videoFileName ?? '',\n                selectedAudioTrack,\n                playbackRate,\n                subtitle,\n                surroundingSubtitles,\n                timestamp,\n            });\n        },\n        [onAnkiDialogRequest, playerChannel, playing, popOut]\n    );\n\n    const mineCurrentSubtitle = useCallback(\n        (postMineAction: PostMineAction) => {\n            const extracted = extractSubtitles();\n\n            if (extracted === undefined) {\n                return;\n            }\n\n            const { currentSubtitle, surroundingSubtitles } = extracted;\n            mineSubtitle(\n                postMineAction,\n                videoFile,\n                videoFileName ?? '',\n                selectedAudioTrack,\n                playbackRate,\n                currentSubtitle,\n                surroundingSubtitles,\n                clock.time(length)\n            );\n        },\n        [mineSubtitle, extractSubtitles, clock, length, playbackRate, selectedAudioTrack, videoFile, videoFileName]\n    );\n\n    useEffect(() => {\n        return playerChannel.onCopy(mineCurrentSubtitle);\n    }, [playerChannel, mineCurrentSubtitle]);\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                mineCurrentSubtitle(PostMineAction.showAnkiDialog);\n            },\n            () => false\n        );\n    }, [mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                mineCurrentSubtitle(PostMineAction.updateLastCard);\n            },\n            () => false\n        );\n    }, [mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindTakeScreenshot(\n            (event) => {\n                event.preventDefault();\n\n                if (popOut && ankiDialogOpen) {\n                    onAnkiDialogRewind();\n                } else if (lastMinedRecord) {\n                    const currentTimestamp = clock.time(length);\n                    mineSubtitle(\n                        PostMineAction.showAnkiDialog,\n                        lastMinedRecord.videoFileUrl,\n                        lastMinedRecord.videoFileName,\n                        lastMinedRecord.selectedAudioTrack,\n                        lastMinedRecord.playbackRate,\n                        lastMinedRecord.subtitle,\n                        lastMinedRecord.surroundingSubtitles,\n                        currentTimestamp\n                    );\n                }\n            },\n            () => false\n        );\n    }, [clock, length, keyBinder, lastMinedRecord, mineSubtitle, popOut, ankiDialogOpen, onAnkiDialogRewind]);\n\n    useEffect(() => {\n        return keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                mineCurrentSubtitle(PostMineAction.none);\n            },\n            () => false,\n            () => {\n                const extracted = extractSubtitles();\n\n                if (extracted === undefined) {\n                    return undefined;\n                }\n\n                return extracted.currentSubtitle;\n            }\n        );\n    }, [extractSubtitles, mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleSubtitleAlignment = useCallback(\n        (alignment: SubtitleAlignment) => {\n            setSubtitleAlignment(alignment);\n            playbackPreferences.subtitleAlignment = alignment;\n        },\n        [playbackPreferences]\n    );\n\n    useEffect(() => {\n        const onWheel = (event: WheelEvent) => {\n            if (!subtitlesEnabled || !showSubtitlesRef.current?.length) {\n                return;\n            }\n\n            if (Math.abs(event.deltaY) < 10) {\n                return;\n            }\n\n            let shouldIncreaseOffset: boolean;\n\n            switch (subtitleAlignment) {\n                case SubtitleAlignment.bottom:\n                    shouldIncreaseOffset = event.deltaY > 0;\n                    break;\n                case SubtitleAlignment.top:\n                    shouldIncreaseOffset = event.deltaY < 0;\n                    break;\n            }\n\n            setSubtitlePositionOffset((offset) => {\n                const newOffset = shouldIncreaseOffset ? --offset : ++offset;\n                playbackPreferences.subtitlePositionOffset = newOffset;\n                return newOffset;\n            });\n        };\n\n        window.addEventListener('wheel', onWheel);\n        return () => window.removeEventListener('wheel', onWheel);\n    }, [subtitleAlignment, subtitlesEnabled, playbackPreferences]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div\n                    style={\n                        subtitleAlignment === SubtitleAlignment.bottom\n                            ? { bottom: subtitlePositionOffset }\n                            : { top: subtitlePositionOffset }\n                    }\n                    className={classes.subtitleContainer}\n                >\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n                subtitleAlignment={subtitleAlignment}\n                subtitleAlignmentEnabled={true}\n                onSubtitleAlignment={handleSubtitleAlignment}\n            />\n        </div>\n    );\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from '../services/chrome-extension';\nimport { useEffect, useState } from 'react';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n    'take-screenshot': 'takeScreenshot',\n};\n\nconst initialExtension = new ChromeExtension();\nlet realExtension: ChromeExtension | undefined;\n\nconst listenForVersion = (callback: (extension: ChromeExtension) => void) => {\n    const versionListener = (event: MessageEvent) => {\n        if (event.source !== window) {\n            return;\n        }\n\n        if (event.data.sender === 'asbplayer-extension-to-player') {\n            if (event.data.message.command === 'version') {\n                const message = event.data.message as ExtensionVersionMessage;\n                const translatedCommands: { [key: string]: string | undefined } = {};\n                const extensionCommands = message.extensionCommands ?? {};\n\n                for (const extensionCommandName of Object.keys(extensionCommands)) {\n                    translatedCommands[keyBindNameMap[extensionCommandName]] = extensionCommands[extensionCommandName];\n                }\n\n                callback(new ChromeExtension(message.version, translatedCommands));\n            }\n        }\n    };\n\n    window.addEventListener('message', versionListener);\n\n    return () => {\n        window.removeEventListener('message', versionListener);\n    };\n};\n\nconst unbindInitialListener = listenForVersion((extension) => (realExtension = extension));\n\nexport const useChromeExtension = () => {\n    const [extension, setExtension] = useState<ChromeExtension>(initialExtension);\n\n    useEffect(() => {\n        if (realExtension) {\n            setExtension(realExtension);\n        } else {\n            unbindInitialListener();\n            return listenForVersion(setExtension);\n        }\n    }, []);\n\n    return extension;\n};\n","import { AudioModel, ImageModel, SubtitleModel } from '@project/common';\nimport Dexie from 'dexie';\nimport { CopyHistoryItem } from '../components/CopyHistory';\n\nclass CopyHistoryDatabase extends Dexie {\n    copyHistoryItems!: Dexie.Table<CopyHistoryRecord, number>;\n\n    constructor() {\n        super('CopyHistoryDatabase');\n        this.version(1).stores({\n            copyHistoryItems: '++index,id,timestamp',\n        });\n    }\n}\n\ninterface CopyHistoryRecord extends SubtitleModel {\n    index?: number;\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioTrack?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    videoFileName?: string;\n    audioFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\nexport default class CopyHistoryRepository {\n    private readonly _db = new CopyHistoryDatabase();\n    private _limit: number;\n\n    constructor(limit: number) {\n        this._limit = limit;\n    }\n\n    set limit(limit: number) {\n        this._limit = limit;\n    }\n\n    async fetch(count: number): Promise<CopyHistoryItem[]> {\n        if (count <= 0) {\n            return [];\n        }\n\n        const result = await await this._db.copyHistoryItems.reverse().limit(count).toArray();\n        result.reverse();\n        return result;\n    }\n\n    async save(item: CopyHistoryItem) {\n        if (this._limit <= 0) {\n            return;\n        }\n\n        const {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFile,\n            audioFile,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        } = item;\n        const record = {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFileName: videoFile?.name,\n            audioFileName: audioFile?.name,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        };\n        const index = await this._db.copyHistoryItems.put(record);\n        await this._prune(index);\n    }\n\n    private async _prune(lastIndex: number) {\n        const size = await this._db.copyHistoryItems.count();\n\n        if (size > this._limit) {\n            const keys = await this._db.copyHistoryItems\n                .where('index')\n                .belowOrEqual(lastIndex - this._limit)\n                .primaryKeys();\n\n            if (keys.length > 0) {\n                await this._db.copyHistoryItems.bulkDelete(keys);\n            }\n        }\n    }\n\n    async delete(id: string) {\n        const keys = await this._db.copyHistoryItems.where('id').equals(id).primaryKeys();\n        await this._db.copyHistoryItems.bulkDelete(keys);\n    }\n}\n","export default class LocalizedError extends Error {\n    private readonly key: string;\n    private readonly params: { [key: string]: string };\n\n    constructor(key: string, params: { [key: string]: string } = {}) {\n        super(key);\n        this.key = key;\n        this.params = params;\n    }\n\n    get locKey() {\n        return this.key;\n    }\n\n    get locParams() {\n        return this.params;\n    }\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    Command,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    SharedGlobalSettings,\n    SharedSettingsUpdatedMessage,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer,\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishSharedGlobalSettings(settings: SharedGlobalSettings) {\n        const command: Command<SharedSettingsUpdatedMessage> = {\n            sender: 'asbplayerv2',\n            message: {\n                command: 'shared-settings-updated',\n                settings: {\n                    language: settings.language,\n                    themeType: settings.themeType,\n                },\n            },\n        };\n        window.postMessage(command, '*');\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { i18n, useI18nInitialized } from './i18n';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    extractText,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/subtitle-reader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/chrome-extension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/settings-provider';\nimport VideoPlayer, { SeekRequest } from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/key-binder';\nimport AppKeyBinder from '../services/app-key-binder';\nimport VideoChannel from '../services/video-channel';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport CopyHistoryRepository from '../services/copy-history-repository';\nimport './i18n';\nimport { useTranslation } from 'react-i18next';\nimport LocalizedError from './localized-error';\nimport { useChromeExtension } from '../hooks/use-chrome-extension';\n\nconst latestExtensionVersion = '0.26.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new LocalizedError('error.unknownExtension', { fileName: f.name });\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new LocalizedError('error.onlyOneVideoFile');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new LocalizedError('error.onlyOneAudioFile');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new LocalizedError('error.unsupportedExtension', { extension });\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new LocalizedError('error.bothAudioAndVideNotAllowed');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFileName!,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    const calculateInterval = () => {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return [start, end];\n    };\n\n    if (item.audioFile || item.videoFile) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    if (item.audioFileName || item.videoFileName) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromMissingFile((item.audioFileName || item.videoFileName)!, start, end);\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFileName!, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    if (item.videoFileName) {\n        return Image.fromMissingFile(item.videoFileName, item.mediaTimestamp ?? item.start);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFileName ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    ankiDialogOpen: boolean;\n    seekRequest?: SeekRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onAnkiDialogRewind: () => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({ searchParams, ...props }: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return <VideoPlayer videoFile={videoFile} channel={channel} popOut={popOut} {...props} />;\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const { t } = useTranslation();\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const subtitleReader = useMemo<SubtitleReader>(() => {\n        let regex: RegExp | undefined;\n\n        try {\n            regex =\n                settingsProvider.subtitleRegexFilter.trim() === ''\n                    ? undefined\n                    : new RegExp(settingsProvider.subtitleRegexFilter, 'g');\n        } catch (e) {\n            regex = undefined;\n        }\n\n        if (regex !== undefined) {\n            return new SubtitleReader({ regex, replacement: settingsProvider.subtitleRegexFilterTextReplacement });\n        }\n\n        return new SubtitleReader();\n    }, [settingsProvider.subtitleRegexFilter, settingsProvider.subtitleRegexFilterTextReplacement]);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extension = useChromeExtension();\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [videoPlayerSeekRequest, setVideoPlayerSeekRequest] = useState<SeekRequest>();\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const copyHistoryRepository = useMemo(\n        () => new CopyHistoryRepository(settingsProvider.miningHistoryStorageLimit),\n        [settingsProvider]\n    );\n    useEffect(() => {\n        copyHistoryRepository.limit = settingsProvider.miningHistoryStorageLimit;\n    }, [copyHistoryRepository, settingsProvider.miningHistoryStorageLimit]);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback(\n        (message: any) => {\n            console.error(message);\n\n            setAlertSeverity('error');\n\n            if (message instanceof LocalizedError) {\n                setAlert(t(message.locKey, message.locParams) ?? '<failed to localize error>');\n            } else if (message instanceof Error) {\n                setAlert(message.message);\n            } else if (typeof message === 'string') {\n                setAlert(message);\n            } else {\n                setAlert(String(message));\n            }\n\n            setAlertOpen(true);\n        },\n        [t]\n    );\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert(t('info.exportedCard', { result })!);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert(t('info.updatedCard', { result })!);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                handleError(e);\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError, t]\n    );\n\n    const handleTakeScreenshot = useCallback(\n        (mediaTimestamp: number) => {\n            if (sources.videoFile === undefined || copiedSubtitles.length === 0) {\n                return;\n            }\n\n            const lastCopyHistoryItem = copiedSubtitles[copiedSubtitles.length - 1];\n            const newCopyHistoryItem = {\n                ...lastCopyHistoryItem,\n                id: uuidv4(),\n                image: undefined,\n                videoFile: sources.videoFile,\n                mediaTimestamp,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => [...copiedSubtitles, newCopyHistoryItem]);\n            copyHistoryRepository.save(newCopyHistoryItem);\n            handleAnkiDialogRequest(newCopyHistoryItem);\n        },\n        [sources.videoFile, copiedSubtitles, handleAnkiDialogRequest, copyHistoryRepository]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName ?? subtitleFile?.name ?? videoFile?.name ?? audioFile?.name ?? '',\n                subtitleFileName: subtitleFile?.name,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        extractText(subtitle, surroundingSubtitles),\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === ''\n                        ? t('info.savedTimestamp', { timestamp: humanReadableTime(subtitle.start) })!\n                        : t('info.copiedSubtitle', { text: subtitle.text })!\n                );\n                setAlertOpen(true);\n            }\n\n            copyHistoryRepository.save(newCopiedSubtitle);\n        },\n        [fileName, settingsProvider, copyHistoryRepository, handleAnkiDialogProceed, handleAnkiDialogRequest, t]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return;\n        }\n\n        (async () => {\n            setCopiedSubtitles(await copyHistoryRepository.fetch(settingsProvider.miningHistoryStorageLimit));\n        })();\n    }, [inVideoPlayer, copyHistoryRepository, settingsProvider]);\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n        setHideSubtitlePlayer(false);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n\n            if (i18n.language !== settingsProvider.language) {\n                i18n.changeLanguage(settingsProvider.language);\n            }\n\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n            extension.publishSharedGlobalSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen, extension]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n            copyHistoryRepository.delete(item.id);\n        },\n        [copiedSubtitles, copyHistoryRepository]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                handleError(e);\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                handleError(e);\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFileName)) {\n                handleError(t('error.subtitleFileNotOpen', { fileName: item.subtitleFileName }));\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError, t]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFileName)) {\n            handleError(t('error.subtitleFileNotOpen', { fileName: ankiDialogItem.subtitleFileName }));\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError, t]);\n\n    const handleAnkiDialogRewindFromVideoPlayer = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setVideoPlayerSeekRequest({ timestamp: subtitle.start });\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, handleAnkiDialogCancel]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError(t('error.lostTabConnection', { tabName: tab!.id + ' ' + tab!.title }));\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError, t]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                handleError(e);\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError(t('error.onlyOneDirectoryAllowed'));\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError(t('error.failedToLoadDirectory'));\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError(t('error.subdirectoriesNotAllowed'));\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                handleError(e);\n            }\n        },\n        [handleError, handleFiles, t]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            } else if (message.data.command === 'open-asbplayer-settings') {\n                setSettingsDialogOpen(true);\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback(\n        (oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n            switch (newPlayMode) {\n                case PlayMode.autoPause:\n                    setAlert(t('info.enabledAutoPause')!);\n                    break;\n                case PlayMode.condensed:\n                    setAlert(t('info.enabledCondensedPlayback')!);\n                    break;\n                case PlayMode.normal:\n                    if (oldPlayMode === PlayMode.autoPause) {\n                        setAlert(t('info.disabledAutoPause')!);\n                    } else if (oldPlayMode === PlayMode.condensed) {\n                        setAlert(t('info.disabledCondensedPlayback')!);\n                    }\n                    break;\n            }\n\n            setAlertSeverity('info');\n            setAlertOpen(true);\n        },\n        [t]\n    );\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError(t('error.videoPlayerDragAndDropNotAllowed'));\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen, t]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    const handleCopyToClipboard = useCallback((blob: Blob) => {\n        navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]).catch(console.error);\n    }, []);\n\n    const { i18nInitialized } = useI18nInitialized();\n\n    if (!i18nInitialized) {\n        return null;\n    }\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    ankiDialogOpen={ankiDialogOpen}\n                                    seekRequest={videoPlayerSeekRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onAnkiDialogRewind={handleAnkiDialogRewindFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onCopyToClipboard={handleCopyToClipboard}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                    onCopyToClipboard={handleCopyToClipboard}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n                                        {nothingLoaded && (\n                                            <LandingPage\n                                                latestExtensionVersion={latestExtensionVersion}\n                                                extensionUrl={extensionUrl}\n                                                extension={extension}\n                                                loading={loading}\n                                                dragging={dragging}\n                                                appBarHidden={appBarHidden}\n                                                onFileSelector={handleFileSelector}\n                                            />\n                                        )}\n                                        <DragOverlay\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            loading={loading}\n                                        />\n                                    </div>\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAnkiDialogRewind={handleAnkiDialogRewind}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        onTakeScreenshot={handleTakeScreenshot}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                        ankiDialogOpen={ankiDialogOpen}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}