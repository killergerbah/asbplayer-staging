{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeyBinder.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/Util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/pgs-parser/segment.ts","services/pgs-parser/buffer.ts","services/pgs-parser/parser.ts","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","services/AppKeyBinder.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","useCapture","shortcut","copySubtitle","keys","handler","copyHandler","hotkeys","capture","unbind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","handlers","push","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","sign","next","abs","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","_blob","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","_recorderConfiguration","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","recorder","MediaRecorder","mimeType","chunks","ondataavailable","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","t","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","AUDIO_TYPES","Object","isTypeSupported","map","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","replacement","action","version","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","interval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","SegmentType","Uint8ArrayBuffer","subarray","CompositeBuffer","buffers","previousBuffersLength","bufferIndex","at","startBufferIndex","endBufferIndex","CompositeBufferReader","bytes","accumulated","shift","required","c","BufferGenerator","accumulatedBuffer","requestedBytes","getReader","read","done","add","BufferReader","_index","limit","number","digit","from","CompositionState","segmentTypeValues","values","segmentTypeFromByte","byte","LastInSequenceFlag","compositionStateValues","lastInSequenceFlagValues","RunLengthEncodedBuffer","encodedBuffer","callback","encodedIndex","decodedLineIndex","currentLine","encodedLength","firstByte","runLength","increment","secondByte","thirdByte","x","DisplaySet","presentationCompositionSegment","windowDefinitionSegments","paletteDefinitionSegments","objectDefinitionSegments","endDefinitionSegment","previousDisplaySet","find","ods","lastInSequenceFlag","firstInSequence","firstAndLastInSequence","paletteId","pds","compositionState","normal","paletteDefinitionSegment","firstOds","imageDataArray","Uint8ClampedArray","rgbaPalette","paletteEntries","ycrcbToRgba","objectData","decode","y","paletteIndex","imageDataOffset","r","g","b","ImageData","luminance","cb","colorDifferenceBlue","cr","colorDifferenceRed","clamp","transparency","parseDisplaySets","bufferGenerator","header","segmentType","pcs","wds","parsePcsSegment","parseWdsSegment","parsePdsSegment","parseOdsSegment","lastDisplaySet","magicNumber","readHex","presentationTimestamp","decodingTimestamp","segmentSize","compositionNumber","state","compositionStateFromByte","paletteUpdateFlag","paletteUpdateFlagFromByte","compositionObjectCount","objectId","windowId","objectCroppedFlag","objectCroppedFlagFromByte","objectHorizontalPosition","objectVerticalPosition","objectCroppingHorizontalPosition","objectCroppingVerticalPosition","objectCroppingWidth","objectCroppingHeightPosition","windowCount","windowDefinitions","windowHorizontalPosition","windowVerticalPosition","paletteVersionNumber","paletteEntryId","objectVersionNumber","flag","lastInSequenceFlagFromByte","objectDataLength","readBuffer","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","parsePgsDisplaySets","displaySet","currentImageDisplaySet","screenWidth","screenHeight","imageData","putImageData","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","ChromeExtension","tabs","installed","onMessageCallbacks","onTabsCallbacks","versionPromise","versionResolve","heartbeatStarted","uuidv4","sender","tabsCommand","ackRequested","receivedTabs","tabId","_sendHeartbeat","setInterval","tab","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","parseInt","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","startedShowingSubtitle","willStopShowingSubtitle","smallestIndex","fallbackIndex","startedShowing","willStopShowing","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","postMineAction","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onVideoPopOut","onAutoPauseModeChangedViaBind","rewindSubtitle","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setPlayMode","playModeRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","onOffset","fromVideo","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlayMode","handleToggleSubtitleTrack","bindPlay","bindAutoPause","newPlayMode","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","log","isAModifier","isBModifier","keyup","contains","xs","contentEditable","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","theaterMode","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","properties","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","volumeKey","theaterModeKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","SettingsProvider","_tags","_keyBindSet","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","ankiSettingsMessage","miscSettingsMessage","playbackRate","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","h","KeyboardEvent","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","setMiscSettings","setSubtitleSettings","setAnkiSettings","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onSubtitleSettings","onMiscSettings","onAnkiSettings","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogProceed","export","newCopiedSubtitle","last","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","startHeartbeat","syncMessage","File","handleAutoPauseModeChangedViaBind","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"8VAGO,SAASA,EAAcC,GAC1B,MAAwBC,mBAAS,CAAC,EAAG,IAArC,mBAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,2BAAgB,WACZ,SAASC,IACDL,GACAG,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAO3C,OAHAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,CAACL,IAEGE,E,oCCyDES,EAAb,WAGI,WAAYC,GAAyB,yBAFpBA,gBAEmB,EAChCC,KAAKD,WAAaA,EAJ1B,4CAMI,SACIE,EACAC,EACAC,GAED,IADCC,EACF,wDACQC,EAAWL,KAAKD,WAAWO,aAAaC,KAE9C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAUR,KAAKS,YAAYR,EAAQC,EAAgBC,GAEzD,OADAO,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MApB9C,yBAuBI,SACIP,EACAC,EACAC,GAEA,OAAO,SAACU,GACJ,IAAIX,IAAJ,CAIA,IAAMY,EAAWX,IAEZW,GAILb,EAAOY,EAAOC,OAvC1B,4BA2CI,SAAeC,EAA8Cb,GAAoD,IAArBE,EAAoB,wDACtGC,EAAWL,KAAKD,WAAWiB,WAAWT,KAE5C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAUR,KAAKiB,kBAAkBF,EAAcb,GAErD,OADAQ,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MApD9C,+BAuDI,SAAkBO,EAA8Cb,GAC5D,OAAO,SAACW,GACAX,KAIJa,EAAaF,MA7DzB,gCAiEI,SACIK,EACAhB,GAED,IADCE,EACF,wDACQC,EAAWL,KAAKD,WAAWoB,eAAeZ,KAEhD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAUR,KAAKoB,sBAAsBF,EAAkBhB,GAE7D,OADAQ,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MA9E9C,mCAiFI,SAAsBU,EAAkDhB,GACpE,OAAO,SAACW,GACAX,KAIJgB,EAAiBL,MAvF7B,gCA2FI,SACIQ,EACAnB,EACAoB,EACAC,GAED,IAAD,OADEnB,EACF,wDACQoB,EAAW,SAACX,EAAsBY,GACpC,IAAIvB,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMb,EAAW,EAAKc,kBAAkBH,EAASH,IAAcI,GAE9C,OAAbZ,GAAqBA,EAASe,OAAS,GAAKf,EAASgB,KAAO,GAC5DT,EAAiBR,EAAOC,MAG1BiB,EAAmB/B,KAAKD,WAAWiC,uBAAuBzB,KAC1D0B,EAAejC,KAAKD,WAAWmC,mBAAmB3B,KAClD4B,EAAkB,SAACtB,GAAD,OAA0BW,EAASX,GAAO,IAC5DuB,EAAc,SAACvB,GAAD,OAA0BW,EAASX,GAAO,IAU9D,OARIkB,GACArB,YAAQqB,EAAkB,CAAEpB,QAASP,GAAc+B,GAGnDF,GACAvB,YAAQuB,EAAc,CAAEtB,QAASP,GAAcgC,GAG5C,WACCL,GACArB,IAAQE,OAAOmB,EAAkBI,GAGjCF,GACAvB,IAAQE,OAAOqB,EAAcG,MAtI7C,kDA2II,SACIC,EACAnC,EACAoB,EACAC,GAED,IAAD,OADEnB,EACF,wDACQC,EAAWL,KAAKD,WAAWuC,iCAAiC/B,KAElE,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACb,IAAIX,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMb,EAAW,EAAKyB,iBAAiBjB,IAAcI,QAEpCc,IAAb1B,GAA0BA,EAASe,OAAS,GAAKf,EAASgB,KAAO,GACjEO,EAAmCxB,EAAOC,MAIlD,OADAJ,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MA1K9C,8BA6KI,SAAiBiC,EAAcf,GAK3B,IAJA,IACIgB,EADEC,EAAMF,EAERG,EAAUC,OAAOC,iBAEZC,EAAI,EAAGA,EAAIrB,EAAUC,SAAUoB,EAAG,CACvC,IAAMC,EAAItB,EAAUqB,GAEpB,KAAIC,EAAEnB,MAAQ,GAAKmB,EAAElB,IAAM,GAA3B,CAIA,IAAMmB,EAAON,EAAMK,EAAEnB,MAEjBc,GAAOK,EAAEnB,OAASc,EAAMK,EAAElB,KACtBmB,EAAOL,IACPF,EAAkBM,EAClBJ,EAAUK,IAKtB,OAAOP,IAnMf,uCAsMI,SACIQ,EACAhD,GAED,IADCE,EACF,wDACQoB,EAAW,SAACX,EAAsBY,GAChCvB,KAIJgD,EAAwBrC,EAAOY,IAE7B0B,EAAenD,KAAKD,WAAWqD,aAAa7C,KAC5C0B,EAAejC,KAAKD,WAAWsD,YAAY9C,KAC3C+C,EAAc,SAACzC,GAAD,OAA0BW,EAASX,GAAO,IACxDuB,EAAc,SAACvB,GAAD,OAA0BW,EAASX,GAAO,IAU9D,OARIsC,GACAzC,YAAQyC,EAAc,CAAExC,QAASP,GAAckD,GAG/CrB,GACAvB,YAAQuB,EAAc,CAAEtB,QAASP,GAAcgC,GAG5C,WACCe,GACAzC,IAAQE,OAAOuC,EAAcG,GAG7BrB,GACAvB,IAAQE,OAAOqB,EAAcG,MArO7C,kCA0OI,SACImB,EACArD,EACAoB,EACAC,GAED,IAAD,OADEnB,EACF,wDACQoB,EAAW,SAACX,EAAsBY,GACpC,IAAIvB,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMc,EAAOnB,IACPR,EAAW,EAAKc,kBAAkBH,EAASgB,EAAMf,GAEvD,GAAiB,OAAbZ,EAAmB,CACnB,IAAM0C,EAAgB1C,EAAS2C,cAE/BF,EAAe1C,EADG4B,EAAOe,OAI3BzB,EAAmB/B,KAAKD,WAAW2D,+BAA+BnD,KAClE0B,EAAejC,KAAKD,WAAW4D,2BAA2BpD,KAC1D4B,EAAkB,SAACtB,GAAD,OAA0BW,EAASX,GAAO,IAC5DuB,EAAc,SAACvB,GAAD,OAA0BW,EAASX,GAAO,IAU9D,OARIkB,GACArB,YAAQqB,EAAkB,CAAEpB,QAASP,GAAc+B,GAGnDF,GACAvB,YAAQuB,EAAc,CAAEtB,QAASP,GAAcgC,GAG5C,WACCL,GACArB,IAAQE,OAAOmB,EAAkBI,GAGjCF,GACAvB,IAAQE,OAAOqB,EAAcG,MAxR7C,+BA6RI,SAAkBX,EAAkBgB,EAAcf,GAK9C,IAJA,IAAMiB,EAAMF,EACRmB,GAAyB,EACzBhB,EAAUC,OAAOC,iBAEZC,EAAI,EAAGA,EAAIrB,EAAUC,SAAUoB,EAAG,CACvC,IAAMC,EAAItB,EAAUqB,GACdE,EAAOxB,EAAUuB,EAAEnB,MAAQc,EAAMA,EAAMK,EAAEnB,MAE3Ce,GAAWK,IAIXxB,GAAWkB,EAAMK,EAAEnB,OACnBe,EAAUK,EACVW,EAAwBb,IAChBtB,GAAWkB,EAAMK,EAAEnB,QAC3Be,EAAUK,EACVW,EAAwBjB,EAAMK,EAAElB,IAAM+B,KAAKC,IAAI,EAAGf,EAAI,GAAKA,IAInE,OAA+B,IAA3Ba,EACOlC,EAAUkC,GAGd,OAvTf,8BA0TI,SACIL,EACArD,EACAqB,GAED,IADCnB,EACF,wDACQoB,EAAW,SAACX,EAAsBkD,GACpC,IAAI7D,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMqC,EAAgBtC,EAAU,GAAGG,MAAQH,EAAU,GAAG+B,cAExDF,EAAe1C,EADGmD,GAAiBD,EAAW,KAAO,SAInDE,EAAmBjE,KAAKD,WAAWmE,eAAe3D,KAClD4D,EAAmBnE,KAAKD,WAAWqE,eAAe7D,KAClD8D,EAAkB,SAACxD,GAAD,OAA0BW,EAASX,GAAO,IAC5DyD,EAAkB,SAACzD,GAAD,OAA0BW,EAASX,GAAO,IAIlE,OAFAH,YAAQuD,EAAkB,CAAEtD,QAASP,GAAciE,GACnD3D,YAAQyD,EAAkB,CAAExD,QAASP,GAAckE,GAC5C,WACH5D,IAAQE,OAAOqD,EAAkBI,GACjC3D,IAAQE,OAAOuD,EAAkBG,MAzV7C,iCA6VI,SACIC,EACArE,GAED,IADCE,EACF,wDACQC,EAAWL,KAAKD,WAAWyE,gBAAgBjE,KAEjD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJqE,EAAkB1D,IAGtB,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,MAjXrC,4CAqXI,SACIiE,EACAvE,GAED,IADCE,EACF,wDACQsE,EAAY,CACd1E,KAAKD,WAAW4E,0BAA0BpE,KAC1CP,KAAKD,WAAW6E,0BAA0BrE,MAC5CsE,QAAO,SAAC7B,GAAD,OAAOA,KAEhB,GAAyB,IAArB0B,EAAU/C,OACV,OAAO,aAYX,IATA,IAAMH,EAAW,SAACX,EAAsBiE,GAChC5E,KAIJuE,EAAsB5D,EAAOiE,IAE7BC,EAA+C,GAjBrD,WAmBWhC,GACL,IAAMvC,EAAU,SAACK,GAAD,OAA0BW,EAASX,EAAOkC,IAC1DgC,EAASC,KAAKxE,GACdE,YAAQgE,EAAU3B,GAAI,CAAEpC,QAASP,GAAcI,IAH1CuC,EAAI,EAAGA,EAAI2B,EAAU/C,SAAUoB,EAAI,EAAnCA,GAMT,OAAO,WACH,IAAK,IAAIA,EAAI,EAAGA,EAAI2B,EAAU/C,SAAUoB,EAAG,CACvC,IAAMvC,EAAUuE,EAAShC,GACzBrC,IAAQE,OAAO8D,EAAU3B,GAAIvC,OArZ7C,2CA0ZI,SACIyE,EACA/E,GAED,IADCE,EACF,wDACQsE,EAAY,CACd1E,KAAKD,WAAWmF,8BAA8B3E,KAC9CP,KAAKD,WAAWoF,8BAA8B5E,MAChDsE,QAAO,SAAC7B,GAAD,OAAOA,KAEhB,GAAyB,IAArB0B,EAAU/C,OACV,OAAO,aAaX,IAVA,IAAMH,EAAW,SAACX,EAAsBiE,GAChC5E,KAIJ+E,EAA4BpE,EAAOiE,IAGnCC,EAA+C,GAlBrD,WAoBWhC,GACL,IAAMvC,EAAU,SAACK,GAAD,OAA0BW,EAASX,EAAOkC,IAC1DgC,EAASC,KAAKxE,GACdE,YAAQgE,EAAU3B,GAAI,CAAEpC,QAASP,GAAcI,IAH1CuC,EAAI,EAAGA,EAAI,IAAKA,EAAI,EAApBA,GAMT,OAAO,WACH,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAMvC,EAAUuE,EAAShC,GACzBrC,IAAQE,OAAO8D,EAAU3B,GAAIvC,OA3b7C,sBAgcI,SAAS4E,EAAwClF,GAAoD,IAArBE,EAAoB,wDAC1FC,EAAWL,KAAKD,WAAWsF,WAAW9E,KAE5C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJkF,EAAOvE,IAIX,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,MAjdrC,2BAqdI,SAAc8E,EAA6CpF,GAAoD,IAArBE,EAAoB,wDACpGC,EAAWL,KAAKD,WAAWwF,gBAAgBhF,KAEjD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJoF,EAAYzE,IAGhB,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,QArerC,KC5EqBgF,E,kIACjB,WAAoBC,EAAYC,GAAhC,0FACW,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,uDACXC,EAAS,IAAIC,YACVC,OAAP,uCAAgB,WAAOC,GAAP,uBAAAJ,EAAA,kEAEFK,EAAe,IAAIC,aAER,OAAbF,EAAEG,OAJE,uBAKJR,EAAO,IAAIS,MAAM,sCALb,0CASkBH,EAAaI,gBAAgBL,EAAEG,OAAOG,QATxD,OAYR,IAHMC,EATE,OAUFC,EAAW,GAER3D,EAAI,EAAGA,EAAI0D,EAAYE,mBAAoB5D,EAChD2D,EAAS1B,KAAKyB,EAAYG,eAAe7D,KAGvC8D,EAASnB,KACRoB,YAAY,CACfC,QAAS,SACTN,YAAa,CACTC,SAAUA,EACVC,iBAAkBF,EAAYE,iBAC9BhF,OAAQ8E,EAAY9E,OACpBqF,WAAYP,EAAYO,cAGhCH,EAAOI,UAAY,SAACf,GAChBN,EAAQ,IAAIsB,KAAKhB,EAAEiB,KAAKC,OAAQ,CAAEC,KAAM,eACxCR,EAAOS,aAEXT,EAAOU,QAAU,SAACrB,GAAO,IAAD,EACdsB,EAAK,iBAAGtB,QAAH,IAAGA,OAAH,EAAGA,EAAGsB,aAAN,QAAe,IAAIlB,MAAM,gCAA0BJ,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAGuB,UACjE5B,EAAO2B,GACPX,EAAOS,aAjCH,kDAoCRzB,EAAO,EAAD,IApCE,0DAAhB,sDAuCAE,EAAO2B,kBAAkBjC,GAzCV,2CAAZ,0DADX,2C,gECDW,SAASkC,IACtB,OAAO,IAAIC,OAAO,IAA0B,4C,qBCEvC,SAASC,EAAkBC,GAAkD,IAE5EC,EAF6CC,EAA8B,wDACzEC,EAAepE,KAAKqE,MAAMJ,EAAY,KAIxCC,EADAC,EACUnE,KAAKsE,MAAQL,EAAY,IAAQ,GAAM,IAAM,GAE7CG,EAAe,GAG7B,IAAMG,EAAUvE,KAAKqE,MAAMD,EAAe,IAAM,GAC1CI,EAAQxE,KAAKqE,MAAMD,EAAe,MAExC,OAAII,EAAQ,EACDA,EAAQ,IAAMC,OAAOF,GAASG,SAAS,EAAG,KAAO,IAAMD,OAAOP,GAASQ,SAAS,EAAG,KAAO,IAG9FH,EAAU,IAAME,OAAOP,GAASQ,SAAS,EAAG,KAAO,IAGvD,SAASC,EACZ9G,EACA+G,EACAC,EACAC,GAIA,IAFA,IAAIC,EAAaH,EAER1F,EAAI0F,EAAO1F,GAAK,IAGjB8F,EAAWnH,EAFfkH,EAAa7F,EAEyB0F,EAAOC,EAAaC,GAAY,KAH5C5F,GAU9B,IAFA,IAAI+F,EAAWF,EAEN7F,EAAI0F,EAAO1F,GAAKrB,EAAUC,OAAS,IAGpCkH,EAAWnH,EAFfoH,EAAW/F,EAEyB0F,EAAOC,EAAaC,GAAY,KAHvB5F,GAQjD,OAAOrB,EAAUqH,MAAMH,EAAYE,EAAW,GAG3C,SAASE,EACZC,EACAC,EACAP,GAEA,IAAMjH,EAAY,CAACuH,GACbE,EAASF,EAAepH,MAAQoH,EAAexF,cAErD,GAAIwF,EAAenH,IAAMoH,EAAc,CACnC,IAAME,EAAiBvF,KAAKwF,IAAIH,EAAcD,EAAenH,IAAM6G,GACnEjH,EAAUsD,KAAK,CACXsE,KAAM,GACNzH,MAAOoH,EAAenH,IACtBA,IAAKsH,EACL3F,cAAewF,EAAenH,IAAMqH,EACpCI,YAAaH,EAAiBD,EAC9BrE,MAAOmE,EAAenE,QAI9B,GAAImE,EAAepH,MAAQ,EAAG,CAC1B,IAAM2H,EAAkB3F,KAAKC,IAAI,EAAGmF,EAAepH,MAAQ8G,GAC3DjH,EAAU+H,QAAQ,CACdH,KAAM,GACNzH,MAAO2H,EACP1H,IAAKmH,EAAepH,MACpB4B,cAAe+F,EAAkBL,EACjCI,YAAaN,EAAepH,MAAQsH,EACpCrE,MAAOmE,EAAenE,QAI9B,OAAOpD,EAGX,SAASmH,EACLnH,EACA+G,EACAiB,EACAhB,EACAC,EACAgB,GAEA,IAAIC,EAQJ,OALIA,EADAD,EACOlB,EAAQ,EAAI/G,EAAUC,OAASD,EAAU+G,EAAQ,GAAK,KAEtDA,EAAQ,GAAK,EAAI/G,EAAU+G,EAAQ,GAAK,KAI/C5E,KAAKgG,IAAIH,EAAejB,IAAUC,IACxB,OAATkB,GAAiB/F,KAAKgG,IAAID,EAAK/H,MAAQH,EAAUgI,GAAc7H,QAAU8G,GAQ3E,SAASmB,EAASrE,EAAYsE,GACjC,IAAMC,EAAMvK,OAAOwK,IAAIC,gBAAgBzE,GACjCK,EAAIqE,SAASC,cAAc,KACjCD,SAASE,KAAKC,YAAYxE,GAC1BA,EAAEyE,MAAMC,QAAU,OAClB1E,EAAE2E,KAAOT,EACTlE,EAAEgE,SAAWY,IAASX,GACtBjE,EAAE6E,QACFV,IAAIW,gBAAgBZ,GACpBlE,EAAE+E,SCrHN,IC8JYC,EAMAC,EAKAC,EDzKNC,EAA0B,kBAAM,IAAIrD,GAkBpCsD,E,WASF,WAAYC,EAAkBtJ,EAAeC,EAAasJ,EAAgBC,GAAoB,yBAR7EC,WAQ4E,OAP5EzJ,WAO4E,OAN5EC,SAM4E,OAL5EyJ,aAK4E,OAJ5EC,gBAI4E,OAFrFC,gBAEqF,EACzFzL,KAAKsL,MAAQH,EAAW,IAAMtH,KAAKqE,MAAMrG,GAAS,IAAMgC,KAAKqE,MAAMpG,GACnE9B,KAAK6B,MAAQA,EACb7B,KAAK8B,IAAMA,EACX9B,KAAKuL,QAAUH,EACfpL,KAAKwL,WAAaH,E,sCAGtB,WACI,OAAOrL,KAAKsL,Q,qBAGhB,WACI,OAAOtL,KAAKwL,a,2DAGhB,sBAAA1F,EAAA,+EACW9F,KAAKuL,SADhB,gD,+GAIA,sBAAAzF,EAAA,sEACiB9F,KAAK0L,QADtB,wF,+GAIA,qCAAA5F,EAAA,sEACuB9F,KAAK0L,QAD5B,cACUjG,EADV,QAEUkG,EAAQ,IAAIC,OACZC,IAAM5B,IAAIC,gBAAgBzE,GAChCkG,EAAMG,QAAU,OAChBH,EAAMI,OALV,SAOUJ,EAAMK,OAPhB,gCASW,IAAIrG,SAAQ,SAACC,EAASC,GACzBoG,YAAW,WACPN,EAAMO,QACN,IAAML,EAAMF,EAAME,IAClBF,EAAME,IAAM,GACZ5B,IAAIW,gBAAgBiB,GACpBjG,OAAQpD,KACT,EAAKV,IAAM,EAAKD,MAAQ,SAhBnC,iD,gHAoBA,sBAAAiE,EAAA,yDACS9F,KAAKyL,WADd,gCAEuCU,MAAM,cAAgBnM,KAAKqL,UAAY,WAAarL,KAAKuL,SAFhG,8BAE0G9F,OAF1G,OAEQzF,KAAKyL,WAFb,uCAKWzL,KAAKyL,YALhB,gD,yEAQA,SAAM5J,EAAeC,GAEjB,OAAO9B,O,yBAGX,WACI,OAAO,M,KAIToM,E,WAWF,WAAYC,EAAYxK,EAAeC,EAAawK,GAAmB,yBAVtDD,UAUqD,OATrDf,WASqD,OARrDzJ,WAQqD,OAPrDC,SAOqD,OANrDwK,aAMqD,OALrDd,gBAKqD,OAJrDe,sBAIqD,OAF9Db,WAE8D,EAClE,MAA8CU,EAAcI,yBAA5D,mBAAOD,EAAP,KAAyBE,EAAzB,KACAzM,KAAKuM,iBAAmBA,EACxBvM,KAAKqM,KAAOA,EACZrM,KAAKsL,MAAQe,EAAKtC,KAAO,IAAMlI,EAAQ,IAAMC,EAC7C9B,KAAK6B,MAAQA,EACb7B,KAAK8B,IAAMA,EACX9B,KAAKsM,QAAUA,EACftM,KAAKwL,WAAaiB,E,sCAatB,WACI,OAAOzM,KAAKsL,Q,qBAGhB,WACI,OAAOtL,KAAKwL,a,2DAGhB,iCAAA1F,EAAA,+EACW,IAAIH,QAAJ,uCAAoB,WAAOC,EAASC,GAAhB,eAAAC,EAAA,6DACnBC,EAAS,IAAIC,WADM,KAEvBD,EAFuB,SAEI,EAAKN,OAFT,wBAEhBiH,cAFgB,gBAGvB3G,EAAO4G,UAAY,WACf,IAAMnG,EAAST,EAAOS,OAChB4E,EAAS5E,EAAOoG,UAAUpG,EAAOqG,QAAQ,KAAO,GACtDjH,EAAQwF,IANW,2CAApB,0DADX,2C,+GAYA,4BAAAtF,EAAA,yDACS9F,KAAK0L,MADd,gCAE2B1L,KAAK8M,aAFhC,cAEQ9M,KAAK0L,MAFb,iDAMwB1L,KAAK+M,cAAc/M,KAAK0L,OAAO,GANvD,cAMUC,EANV,QAOUqB,YAAc,EAPxB,UAQUrB,EAAMK,OARhB,yBASUhM,KAAKiN,WAAWtB,GAT1B,iD,+GAYA,sBAAA7F,EAAA,yDACS9F,KAAK0L,MADd,gCAE2B1L,KAAK8M,aAFhC,OAEQ9M,KAAK0L,MAFb,uCAKW1L,KAAK0L,OALhB,gD,qHAQA,iCAAA5F,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,sEACK,EAAKiH,cAAc,EAAKV,MAAM,GADnC,QACTV,EADS,QAGTuB,UAAN,+BAAApH,EAAA,MAAkB,WAAOI,GAAP,uBAAAJ,EAAA,sEAEV6F,EAAMK,OACAmB,EAAS,EAAKC,eAAezB,GAC7B0B,EAAW,IAAIC,cAAcH,EAAQ,CAAEI,SAAU,EAAKhB,mBACtDiB,EAAqB,GAE3BH,EAASI,gBAAkB,SAACvH,GACxBsH,EAAOxI,KAAKkB,EAAEiB,OAGlBkG,EAASK,OAAS,SAACxH,GACfN,EAAQ,IAAIsB,KAAKsG,EAAQ,CAAEnG,KAAM,EAAKkF,qBAG1Cc,EAASxL,QAfC,UAgBJ,EAAKoL,WAAWtB,GAhBZ,QAiBV0B,EAASM,OAjBC,cAkBUR,EAAOS,kBAlBjB,IAkBV,2BAA6C,QACnCD,OAnBA,gFAsBV9H,EAAO,EAAD,IAtBI,0DAAlB,sDAHe,2CAAZ,0DADX,2C,iFAgCA,SAAcgI,EAAcC,GAA0D,IAAD,OAC3EnC,EAAQ,IAAIC,MAGlB,OAFAD,EAAME,IAAM5B,IAAIC,gBAAgB2D,GAEzB,IAAIlI,SAAQ,SAACC,EAASC,GACzB8F,EAAMoC,iBAAmB,SAAC7H,GACtB,GAAI4H,GAAe,EAAKxB,SAAWX,EAAMqC,aAAerC,EAAMqC,YAAYrM,OAAS,EAAG,qBAElEgK,EAAMqC,aAF4D,IAElF,2BAAmC,CAAC,IAAzBC,EAAwB,QAC/BA,EAAE9O,QAAU,EAAKmN,UAAY2B,EAAEC,IAH+C,+BAOtFvC,EAAMqB,YAAc,EAAKnL,MAAQ,IACjC+D,EAAQ+F,S,4BAKpB,SAAeA,GACX,IAAIwB,EAUJ,GARmC,oBAAxBxB,EAAMwC,gBACbhB,EAASxB,EAAMwC,iBAGmB,oBAA3BxC,EAAMyC,mBACbjB,EAASxB,EAAMyC,yBAGJ5L,IAAX2K,EACA,MAAM,IAAI7G,MAAM,uCAGpB,IAf4C,EAetC+H,EAAc,IAAIC,YAfoB,cAiBxBnB,EAAOoB,kBAjBiB,IAiB5C,2BAA6C,SACnCZ,QAlBkC,kDAqBxBR,EAAOS,kBArBiB,IAqB5C,2BAA6C,CAAC,IAAnC9I,EAAkC,QACrCA,EAAM3F,SACNkP,EAAYG,SAAS1J,IAvBe,8BA2B5C,OAAOuJ,I,+DAGX,WAAiB1C,GAAjB,oBAAA7F,EAAA,+EACW,IAAIH,SAAQ,SAACC,EAASC,GACzBoG,YAAW,WACPN,EAAMO,QACN,IAAML,EAAMF,EAAME,IAClBF,EAAME,IAAM,GACZ5B,IAAIW,gBAAgBiB,GACpBjG,OAAQpD,KACT,EAAKV,IAAM,EAAKD,MAAQ,SARnC,2C,0EAYA,SAAMA,EAAeC,GACjB,OAAO,IAAIsK,EAAcpM,KAAKqM,KAAMxK,EAAOC,EAAK9B,KAAKsM,W,yBAGzD,WACI,OAAO,K,qCApJX,WACI,IAAMmC,EAAyC,CAC3C,wBAAyB,MACzB,yBAA0B,QAE9B,OAAOC,OAAOnO,KAAKkO,GACd5J,OAAOyI,cAAcqB,iBACrBC,KAAI,SAACX,GAAD,MAAO,CAACA,EAAaQ,EAAYR,OAAe,O,KAiJ3DY,E,WAKF,WAAY1H,EAAiBzB,GAA8B,yBAJ1CyB,UAIyC,OAHzCzB,mBAGyC,OAFlDgG,WAEkD,EACtD1L,KAAKmH,KAAOA,EACZnH,KAAK0F,cAAgBA,E,sCAGzB,WACI,OAAO1F,KAAKmH,KAAK4C,O,qBAGrB,WACI,MAAO,Q,2DAGX,iCAAAjE,EAAA,+EACW,IAAIH,QAAJ,uCAAoB,WAAOC,EAASC,GAAhB,eAAAC,EAAA,sEAEfC,EAAS,IAAIC,WAFE,KAGnBD,EAHmB,SAGQ,EAAKN,OAHb,wBAGZiH,cAHY,gBAInB3G,EAAO4G,UAAY,WACf,IAAMnG,EAAST,EAAOS,OAChB4E,EAAS5E,EAAOoG,UAAUpG,EAAOqG,QAAQ,KAAO,GACtDjH,EAAQwF,IAPO,kDAUnBvF,EAAO,EAAD,IAVa,0DAApB,0DADX,2C,+GAgBA,sBAAAC,EAAA,sEACU9F,KAAKmH,KAAK6E,OADpB,gD,+GAIA,sBAAAlG,EAAA,yDACS9F,KAAK0L,MADd,4BAE2BlG,EAF3B,SAEmDxF,KAAKmH,KAAK1B,OAF7D,+BAEqEzF,KAAK0F,cAF1E,cAEsCoJ,OAFtC,4BAEQ9O,KAAK0L,MAFb,uCAKW1L,KAAK0L,OALhB,iD,yEAQA,SAAM7J,EAAeC,GACjB,OAAO,IAAI+M,EAAa7O,KAAKmH,KAAK4B,MAAMlH,EAAOC,GAAM9B,KAAK0F,iB,yBAG9D,WACI,OAAO1F,KAAKmH,KAAK4H,kB,KAIJC,E,WAGjB,WAAY7H,GAAkB,yBAFbA,UAEY,EACzBnH,KAAKmH,KAAOA,E,sCAmBhB,WACI,OAAOnH,KAAKmH,KAAK4C,KAAO,IAAM/J,KAAKmH,KAAKkE,Y,yDAG5C,sBAAAvF,EAAA,sEACU9F,KAAKmH,KAAK6E,OADpB,gD,iHAIA,sBAAAlG,EAAA,sEACiB9F,KAAKmH,KAAKiE,SAD3B,wF,mHAIA,sBAAAtF,EAAA,sEACuB9F,KAAKmH,KAAK1B,OADjC,OAEIqE,EAFJ,OAEmB9J,KAAK+J,MAFxB,gD,yEAKA,WAAmD,IAA7CkF,EAA4C,uDAAzBhE,EACrB,OAAIjL,KAAKmH,gBAAgB0H,GAIG,QAAxB7O,KAAKmH,KAAKkE,UAHHrL,KAOJ,IAAIgP,EAAU,IAAIH,EAAa7O,KAAKmH,KAAM8H,M,mBAGrD,SAAMpN,EAAeC,GACjB,OAAO,IAAIkN,EAAUhP,KAAKmH,KAAK4B,MAAMlH,EAAOC,M,yBAGhD,WACI,OAAO9B,KAAKmH,KAAK4H,iB,yBAlDrB,SAAkBG,EAA0BrN,EAAeC,EAAasJ,EAAgBC,GACpF,OAAO,IAAI2D,EACP,IAAI9D,EACAgE,EAAiBtC,UAAU,EAAGsC,EAAiBC,YAAY,MAC3DtN,EACAC,EACAsJ,EACAC,M,sBAKZ,SAAgBgB,EAAYxK,EAAeC,EAAawK,GACpD,OAAO,IAAI0C,EAAU,IAAI5C,EAAcC,EAAMxK,EAAOC,EAAKwK,Q,KEvV5C8C,E,sFACjB,SACIC,EACAC,EACAC,EACAC,GAEA,OAAO,IAAI7J,SAAQ,SAACC,EAASC,GACzB,IAAM4J,EAAaF,GAAY,EAAI,EAAIA,EAAWF,EAAOK,MACnDC,EAAcH,GAAa,EAAI,EAAIA,EAAYH,EAAOO,OACtDC,EAAQhM,KAAKwF,IAAI,EAAGxF,KAAKwF,IAAIoG,EAAYE,IAE/C,GAAIE,EAAQ,EAAG,CACX,IAAMC,EAAWT,EAAOK,MAAQG,EAC1BE,EAAYV,EAAOO,OAASC,EAClCG,kBAAkBX,EAAQ,CAAEY,YAAaH,EAAUI,aAAcH,IAC5DI,MAAK,SAACC,GACHf,EAAOK,MAAQI,EACfT,EAAOO,OAASG,EAChBT,EAAIe,UAAUD,EAAQ,EAAG,GACzBxK,EAAQyJ,MAEXiB,OAAM,SAACpK,GAAD,OAAOL,EAAOK,WAEzBN,EAAQyJ,U,KCnBlBkB,E,WAOF,WAAYxG,EAAcqB,EAAgBC,GAAoB,yBAN7CC,WAM4C,OAL5CC,aAK4C,OAJ5CC,gBAI4C,OAFrDC,gBAEqD,EACzDzL,KAAKsL,MAAQvB,EACb/J,KAAKuL,QAAUH,EACfpL,KAAKwL,WAAaH,E,sCAGtB,WACI,OAAOrL,KAAKsL,Q,qBAGhB,WACI,OAAOtL,KAAKwL,a,2DAGhB,sBAAA1F,EAAA,+EACW9F,KAAKuL,SADhB,gD,+GAIA,sBAAAzF,EAAA,sEACiB9F,KAAK0L,QADtB,wF,gHAIA,sBAAA5F,EAAA,yDACS9F,KAAKyL,WADd,gCAEuCU,MAAMnM,KAAKwQ,YAFlD,8BAE+D/K,OAF/D,OAEQzF,KAAKyL,WAFb,uCAKWzL,KAAKyL,YALhB,gD,kHAQA,sBAAA3F,EAAA,+EACW9F,KAAKwQ,YADhB,gD,4EAIA,WACI,MAAO,cAAgBxQ,KAAKqL,UAAY,WAAarL,KAAKuL,Y,KAI5DkF,E,WAOF,WAAYpE,EAAYvE,EAAmByH,EAAkBC,GAAoB,yBANhEnD,UAM+D,OAL/DvE,eAK+D,OAJ/DyH,cAI+D,OAH/DC,eAG+D,OAF/DlE,WAE+D,EAC5EtL,KAAKqM,KAAOA,EACZrM,KAAKsL,MAAQe,EAAKtC,KAAO,IAAMlG,KAAKqE,MAAMJ,GAAa,QACvD9H,KAAK8H,UAAYA,EACjB9H,KAAKuP,SAAWA,EAChBvP,KAAKwP,UAAYA,E,sCAGrB,WACI,OAAOxP,KAAKsL,Q,qBAGhB,WACI,MAAO,S,2DAGX,iCAAAxF,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAC,EAAA,sEACM,EAAK4K,UADX,OACTrB,EADS,OAETsB,EAAUtB,EAAOuB,UAAU,cACjChL,EAAQ+K,EAAQ/D,UAAU+D,EAAQ9D,QAAQ,KAAO,IAHlC,2CAAZ,0DADX,2C,+GAQA,iCAAA/G,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAC,EAAA,sEACM,EAAK4K,UADX,cAERG,QAAO,SAACpL,GACE,OAATA,EACAI,EAAO,IAAIS,MAAM,0BAEjBV,EAAQH,KAEb,cARY,2CAAZ,0DADX,2C,kHAaA,4BAAAK,EAAA,sEACyB9F,KAAK0Q,UAD9B,cACUrB,EADV,yBAEWA,EAAOuB,aAFlB,gD,kHAKA,iCAAA9K,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,uDACTgL,EAAQ,EAAKC,cAAc,EAAK1E,OAEhCa,UAAN,uCAAkB,WAAOhH,GAAP,mBAAAJ,EAAA,0DACRuJ,EAASlF,SAASC,cAAc,WAC/BsF,MAAQoB,EAAME,WACrB3B,EAAOO,OAASkB,EAAMG,aAChB3B,EAAMD,EAAO6B,WAAW,OACzBb,UAAUS,EAAO,EAAG,EAAGzB,EAAOK,MAAOL,EAAOO,UAC7C,EAAKL,SAAW,GAAK,EAAKC,UAAY,GAN5B,wBAOJ2B,EAAU,IAAI/B,EAPV,SAQJ+B,EAAQC,OAAO/B,EAAQC,EAAM,EAAKC,SAAU,EAAKC,WAR7C,OASV5J,EAAQyJ,GATE,wBAWVzJ,EAAQyJ,GAXE,QAadpF,IAAIW,gBAAgBkG,EAAMjF,KAbZ,4CAAlB,sDAHe,2CAAZ,0DADX,2C,iFAsBA,SAAcgC,GACV,IAAMiD,EAAQ3G,SAASC,cAAc,SAMrC,OALA0G,EAAMjF,IAAM5B,IAAIC,gBAAgB2D,GAChCiD,EAAMhF,QAAU,OAChBgF,EAAM9D,YAAchN,KAAK8H,UAAY,IACrCgJ,EAAM/E,OAEC+E,M,KAYMO,E,WAGjB,WAAYlK,GAAkB,yBAFbA,UAEY,EACzBnH,KAAKmH,KAAOA,E,sCAiBhB,WACI,OAAOnH,KAAKmH,KAAK4C,O,qBAGrB,WACI,OAAO/J,KAAKmH,KAAKkE,Y,2DAGrB,sBAAAvF,EAAA,sEACiB9F,KAAKmH,KAAKiE,SAD3B,wF,kHAIA,sBAAAtF,EAAA,sEACiB9F,KAAKmH,KAAKwJ,UAD3B,wF,+GAIA,sBAAA7K,EAAA,sEACiB9F,KAAKmH,KAAK1B,OAD3B,wF,kHAIA,iCAAAK,EAAA,+EACW,IAAIH,QAAJ,uCAAkB,WAAOC,EAASC,GAAhB,SAAAC,EAAA,2EAEjBkK,kBAFiB,SAEO,EAAKvK,OAFZ,kCAEoB0K,MAAK,SAACmB,GACvC,IAAMjC,EAASlF,SAASC,cAAc,UACtCiF,EAAOK,MAAQ4B,EAAO5B,MACtBL,EAAOO,OAAS0B,EAAO1B,OACvBP,EAAO6B,WAAW,MAAOb,UAAUiB,EAAQ,EAAG,GAC9CjC,EAAOwB,QAAO,SAACpL,GACPA,EACAG,EAAQH,GAERI,EAAO,8BAEZ,gBAbU,gDAgBjBA,EAAO,EAAD,IAhBW,yDAAlB,0DADX,2C,mHAsBA,sBAAAC,EAAA,sEACuB9F,KAAKmH,KAAK1B,OADjC,OAEIqE,EAFJ,OAEmB9J,KAAKmH,KAAK4C,MAF7B,gD,gFAxDA,SAAkBmF,EAA0BpH,EAAmBsD,EAAgBC,GAC3E,IAAMkG,EACFrC,EAAiBtC,UAAU,EAAGsC,EAAiBC,YAAY,MAC3D,IACAtL,KAAKqE,MAAMJ,GACX,IACAuD,EACJ,OAAO,IAAIgG,EAAM,IAAId,EAAgBgB,EAAWnG,EAAQC,M,sBAG5D,SAAgBgB,EAAYvE,EAAmByH,EAAkBC,GAC7D,OAAO,IAAI6B,EAAM,IAAIZ,EAAcpE,EAAMvE,EAAWyH,EAAUC,Q,KC3JzDgC,EAAb,4OACI,WAAYxH,EAAaK,GAAzB,eAAAvE,EAAA,sEAC2BqG,MAAMnC,EAAK,CAC9ByH,OAAQ,OACRpH,KAAMqH,KAAKC,UAAUtH,KAH7B,cACUuH,EADV,gBAKiBA,EAASC,OAL1B,mFADJ,iECEMC,EAA6B,CAAC,IAAK,IAAK,IAAK,KAAM,KAI5CC,EAAb,WAII,WAAYC,GAA8D,IAA9BC,EAA6B,uDAAnB,IAAIT,EAAe,yBAHxDQ,sBAGwD,OAFxDC,aAEwD,EACrEjS,KAAKgS,iBAAmBA,EACxBhS,KAAKiS,QAAUA,EANvB,oFASI,WAAgBC,GAAhB,eAAApM,EAAA,sEAC2B9F,KAAKmS,eAAe,YAAa,KAAMD,GADlE,cACUN,EADV,yBAEWA,EAASpL,QAFpB,gDATJ,sHAcI,WAAiB0L,GAAjB,eAAApM,EAAA,sEAC2B9F,KAAKmS,eAAe,aAAc,KAAMD,GADnE,cACUN,EADV,yBAEWA,EAASpL,QAFpB,gDAdJ,2HAmBI,WAAsB4L,EAAmBF,GAAzC,eAAApM,EAAA,sEAC2B9F,KAAKmS,eAAe,kBAAmB,CAAEC,UAAWA,GAAaF,GAD5F,cACUN,EADV,yBAEWA,EAASpL,QAFpB,gDAnBJ,+HAwBI,WAAwB6L,EAAcH,GAAtC,eAAApM,EAAA,sEAC2B9F,KAAKmS,eACxB,YACA,CAAEG,MAAOtS,KAAKgS,iBAAiBO,UAAY,IAAMvS,KAAKwS,aAAaH,IACnEH,GAJR,cACUN,EADV,yBAMWA,EAASpL,QANpB,gDAxBJ,kIAiCI,WAA2B6L,EAAcH,GAAzC,eAAApM,EAAA,sEAC2B9F,KAAKmS,eACxB,YACA,CAAEG,MAAOtS,KAAKgS,iBAAiBO,UAAY,IAAMvS,KAAKwS,aAAaH,IACnEH,GAJR,cACUN,EADV,yBAMWA,EAASpL,QANpB,gDAjCJ,mFA0CI,SAAa8L,GAGT,IAFA,IAAIG,EAAU,GAEL1P,EAAI,EAAGA,EAAIuP,EAAM3Q,SAAUoB,EAAG,CACnC,IAAM2P,EAAOJ,EAAMvP,GACf+O,EAA2Ba,SAASD,GACpCD,GAAO,YAASC,GAEhBD,GAAWC,EAInB,MAAM,IAAN,OAAWD,EAAX,OAtDR,sEAyDI,WAAwBP,GAAxB,eAAApM,EAAA,sEAC2B9F,KAAKmS,eAAe,oBAAqB,KAAMD,GAD1E,cACUN,EADV,yBAEWA,EAASpL,QAFpB,gDAzDJ,kHA8DI,WACI8C,EACAsJ,EACAC,EACAC,EACAT,EACAxE,EACA7D,EACA+I,EACAC,EACAC,EACAf,GAXJ,6CAAApM,EAAA,sDAqBI,GARMoN,EAAS,GAEflT,KAAKmT,aAAaD,EAAQlT,KAAKgS,iBAAiBoB,cAAe9J,GAAM,GACrEtJ,KAAKmT,aAAaD,EAAQlT,KAAKgS,iBAAiBqB,gBAAiBT,GAAY,GAC7E5S,KAAKmT,aAAaD,EAAQlT,KAAKgS,iBAAiBO,UAAWF,GAAM,GACjErS,KAAKmT,aAAaD,EAAQlT,KAAKgS,iBAAiBsB,YAAazF,GAAQ,GACrE7N,KAAKmT,aAAaD,EAAQlT,KAAKgS,iBAAiBuB,SAAUvJ,GAAK,GAE3D+I,EACA,UAA8BrE,OAAOnO,KAAKwS,GAA1C,eAAWS,EAAmD,KAC1DxT,KAAKmT,aACDD,EACAlT,KAAKgS,iBAAiByB,iBAAiBD,GACvCT,EAAkBS,IAClB,GA3BhB,GAgCUE,EAAc,CAChBC,KAAM,CACFC,SAAU5T,KAAKgS,iBAAiB6B,KAChCzB,UAAWpS,KAAKgS,iBAAiB8B,SACjCd,KAAMA,EACNe,QAAS,CACLC,gBAAgB,EAChBC,eAAgB,OAChBC,sBAAuB,CACnBN,SAAU5T,KAAKgS,iBAAiB6B,KAChCM,eAAe,MAMzBC,EAAe,QAATnB,EACNoB,EAAsB,eAATpB,GAEfjT,KAAKgS,iBAAiBsC,aAAczB,EAnD5C,oBAoDc0B,EAAgBvU,KAAKwU,kBAAkB3B,EAAU9I,OAEnDqK,IAAOC,EAtDnB,6BAuDoCrU,KAvDpC,KAuDyDuU,EAvDzD,UAuD8E1B,EAAUzH,SAvDxF,gCAuDkG8G,EAvDlG,eAuDyCuC,gBAvDzC,kCAuDkBC,EAvDlB,OAwDiBlO,OACLxG,KAAKmT,aAAaD,EAAQlT,KAAKgS,iBAAiBsC,WAAhD,iBAAsEI,EAAtE,MAAmF,GAzD/F,oCA4D0BH,EA5D1B,UA6D4B1B,EAAUzH,SA7DtC,yBA8DwB,CAACpL,KAAKgS,iBAAiBsC,YAHnCZ,EAAOC,KAAP,MA3DZ,CA4DgBgB,SA5DhB,KA6DgBxN,KA7DhB,KA8DgB+L,OA9DhB,kBAmEQlT,KAAKgS,iBAAiB4C,aAAc9B,EAnE5C,oBAoEcyB,EAAgBvU,KAAKwU,kBAAkB1B,EAAM/I,OAE/CqK,IAAOC,EAtEnB,6BAuEoCrU,KAvEpC,KAuEyDuU,EAvEzD,UAuE8EzB,EAAM1H,SAvEpF,iCAuE8F8G,EAvE9F,eAuEyCuC,gBAvEzC,mCAuEkBC,EAvElB,OAwEiBlO,OACLxG,KAAKmT,aACDD,EACAlT,KAAKgS,iBAAiB4C,WAF1B,yBAGsBF,EAHtB,aAII,GA7EhB,qCAiF0BH,EAjF1B,UAkF4BzB,EAAM1H,SAlFlC,2BAmFwB,CAACpL,KAAKgS,iBAAiB4C,YAHnClB,EAAOC,KAAP,QAhFZ,CAiFgBgB,SAjFhB,MAkFgBxN,KAlFhB,MAmFgB+L,OAnFhB,eAwFIQ,EAAOC,KAAP,OAAwBT,EAxF5B,MA0FYD,EA1FZ,OA2Fa,QA3Fb,SA6Fa,eA7Fb,SA4Ha,YA5Hb,2CA4F0BjT,KAAKmS,eAAe,cAAeuB,EAAQxB,GA5FrE,wCA4FsF1L,QA5FtF,yBA+FsBxG,KAAKmS,eAAe,YAAa,CAAEG,MAAO,WAAaJ,GA/F7E,WAkGuC,KAJrB2C,EA9FlB,OAgGcrO,OAAOsO,QAEOnT,OAlG5B,uBAmGsB,IAAI2E,MAAM,iCAnGhC,eAsGkByO,EAAaF,EAAYA,EAAYlT,OAAS,GACpD+R,EAAOC,KAAP,GAAoBoB,EAvGhC,UAwGuC/U,KAAKmS,eAAe,YAAa,CAAE6C,MAAO,CAACD,KAxGlF,cAwGkBE,EAxGlB,QA0G6BzO,OAAO7E,OAAS,GAAKsT,EAAazO,OAAO,GAAG0O,SAAWH,GA1GpF,wBA2GsBI,EAAOF,EAAazO,OAAO,GA3GjD,UA4GsBxG,KAAKmS,eAAe,mBAAoBuB,EAAQxB,GA5GtE,WA8GqBlS,KAAKgS,iBAAiBO,WAAc4C,EAAKjC,OA9G9D,0CA+G2BiC,EAAKD,QA/GhC,YAkHsB3C,EAAY4C,EAAKjC,OAAOlT,KAAKgS,iBAAiBO,aAEjCA,EAAU6C,MApH7C,0CAqH2BD,EAAKD,QArHhC,iCAwHuB3C,EAAU6C,OAxHjC,cA2HkB,IAAI9O,MAAM,yEA3H5B,yBA6H0BtG,KAAKmS,eAAe,UAAWuB,EAAQxB,GA7HjE,wCA6HkF1L,QA7HlF,cA+HkB,IAAIF,MAAM,wBAA0B2M,GA/HtD,iDA9DJ,qGAiMI,SAAaC,EAAamC,EAA+BD,EAA2BE,GAChF,GAAKD,GAAcD,EAAnB,CAIA,IAAIG,EAAWD,EAAYF,EAAMI,MAAM,MAAMC,KAAK,QAAUL,EACtDM,EAAgBxC,EAAOmC,GAEzBK,IACAH,EAAWG,EAAgB,OAASH,GAGxCrC,EAAOmC,GAAaE,KA7M5B,+BAgNI,SAAkBxL,GACd,OAAOW,IAASX,EAAM,CAAE4L,YAAa,QAjN7C,oEAoNI,WAAsB5L,EAAcqB,EAAgB8G,GAApD,SAAApM,EAAA,+EACW9F,KAAKmS,eAAe,iBAAkB,CAAEwC,SAAU5K,EAAM5C,KAAMiE,GAAU8G,IADnF,gDApNJ,8HAwNI,WAAqB0D,EAAgBlC,EAAaxB,GAAlD,iBAAApM,EAAA,6DACUuE,EAAY,CACduL,OAAQA,EACRC,QAAS,GAGTnC,IACArJ,EAAI,OAAaqJ,GAPzB,SAUuB1T,KAAKiS,QAAQ9F,MAAM+F,GAAkBlS,KAAKgS,iBAAiBE,eAAgB7H,GAVlG,YAUUwH,EAVV,QAYarK,MAZb,sBAac,IAAIlB,MAAMuL,EAAKrK,OAb7B,gCAgBWqK,GAhBX,gDAxNJ,mE,SJyJY/G,O,eAAAA,I,mCAAAA,I,oCAAAA,M,cAMAC,O,qBAAAA,I,kBAAAA,M,cAKAC,O,mBAAAA,I,yBAAAA,I,0BAAAA,M,kDKzKN8K,GAAiBC,YAAW,CAC9BC,KAAM,CACFxL,QAAS,OACTyL,eAAgB,SAChBC,SAAU,QACVC,IAAK,GACLzG,MAAO,OACP0G,cAAe,OACfC,OAAQ,OAYD,SAASC,GAAMC,GAC1B,IAAMC,EAAUV,KAShB,OAPAW,qBAAU,WACN,GAAIF,EAAMG,KAAM,CACZ,IAAMC,EAAU1K,WAAWsK,EAAMK,QAASL,EAAMM,kBAChD,OAAO,kBAAMC,aAAaH,OAE/B,CAACJ,EAAMG,KAAMH,EAAMM,iBAAkBN,EAAMK,UAG1C,qBAAKG,UAAWP,EAAQR,KAAxB,SACI,cAACgB,EAAA,EAAD,CAAMC,GAAIV,EAAMG,KAAhB,SACI,cAAC,IAAD,CAAUQ,SAAUX,EAAMW,SAA1B,SAAqCX,EAAMY,e,iDCnB5C,SAASC,GAAT,GAAgF,IAAxDpE,EAAuD,EAAvDA,KAAMqE,EAAiD,EAAjDA,aAAiBd,EAAgC,mBAC1F,EAA0BnX,mBAAS,IAAnC,mBAAOgW,EAAP,KAAckC,EAAd,KAEAb,qBAAU,WACazD,EAAKyC,KAAK,QAEVL,GACfkC,EAAStE,EAAKyC,KAAK,SAExB,CAACL,EAAOpC,IAEX,IAAMuE,EAAeC,uBAAY,SAACtR,GAC9B,IAAIuR,EAAevR,EAAEG,OAAO+O,MAGxBA,EAAMzT,OAAS8V,EAAa9V,QAC5ByT,EAAMzC,SAAS8E,IACfA,EAAaC,SAAS,OAGtBD,EAAeA,EAAa7K,UAAU,EAAG6K,EAAa9V,OAAS,IAInE,IAAMgW,EAxCd,SAA+BvC,GAC3B,IAD0C,EACpCwC,EAAYxC,EAAMI,MAAM,KAAKC,KAAK,IAAID,MAAM,KAC5CxC,EAAO,GAF6B,cAIxB4E,GAJwB,IAI1C,2BAA6B,CAAC,IAAnBC,EAAkB,QACzB7E,EAAKhO,KAAK6S,EAAIC,SALwB,8BAQ1C,OAAO9E,EAgCa+E,CAAsBN,GACtCH,EAASK,EAAQlC,KAAK,OACtB4B,EAAaM,KACd,CAACvC,EAAOiC,IAEX,OACI,cAACW,GAAA,EAAD,2BACQzB,GADR,IAEInB,MAAOA,EACP6C,SAAUV,K,4CCxChBW,GAAYnC,cAAW,SAACoC,GAAD,MAAY,CACrCrF,MAAO,kBAAyC,CAC5CpD,MADG,EAAGA,MAENE,OAFG,EAAUA,OAGbwI,eAAgB,gBA4BT,SAASC,GAAT,GAAuD,IAM9DC,EAN8B5B,EAA+B,EAA/BA,KAAM5D,EAAyB,EAAzBA,MAAO8D,EAAkB,EAAlBA,QAC/C,EAA8BxX,qBAA9B,mBAAOuR,EAAP,KAAgB4H,EAAhB,KACA,EAA0BnZ,mBAAiB,GAA3C,mBAAOsQ,EAAP,KAAc8I,EAAd,KACA,EAA4BpZ,mBAAiB,GAA7C,mBAAOwQ,EAAP,KAAe6I,EAAf,KACA,EA3BJ,WACI,MAAwBrZ,mBAAS,CAAC,EAAG,IAArC,mBAAOC,EAAP,KAAaC,EAAb,KAaA,OAXAC,2BAAgB,WACZ,SAASC,IACLF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAMvC,OAHAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IAEIH,EAa6BH,GAApC,mBAAOwZ,EAAP,KAAoBC,EAApB,KAKIL,EADA5I,EAAQ,GAAKE,EAAS,EACR/L,KAAKwF,IAAI,EAAGxF,KAAKwF,IAAIqP,GAAe,EAAIhJ,GAAQiJ,GAAgB,EAAI/I,KAEpE,EAGlB,IAAM4G,EAAU0B,GAAU,CAAExI,MAAOA,EAAQ4I,EAAa1I,OAAQA,EAAS0I,IAsBzE,OApBA7B,qBAAU,WAAM,4CAEZ,8BAAA3Q,EAAA,yDACSgN,EADT,iEAK0BA,EAAMnC,UALhC,OAKUA,EALV,QAMUiI,EAAM,IAAIvH,OACZpL,OAAS,WACTuS,EAASI,EAAIlJ,OACb+I,EAAUG,EAAIhJ,QACd2I,EAAW5H,IAEfiI,EAAI/M,IAAM8E,EAZd,2CAFY,wBACZ4H,OAAW/V,GADC,mCAiBZqW,KACD,CAAC/F,IAECA,GAAUnC,EAKX,cAACmI,GAAA,EAAD,CAAQpC,KAAMA,EAAME,QAASA,EAASrH,SAAS,KAA/C,SACI,cAACwJ,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CACIjC,UAAWP,EAAQ1D,MACnBA,MAAOnC,EACPsI,MAAOnG,EAAM/I,KACbQ,MAAO,CAAEmF,MAAOA,EAAQ4I,EAAa1I,OAAQA,EAAS0I,SAV3D,K,8RCxEA,SAASY,GAAT,GAAwE,IAA3CpY,EAA0C,EAA1CA,SAAUqY,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,MAClE,QAA2B5W,IAAvB1B,EAASuY,UACT,OAAO,KAGX,IACM3J,EADc0J,EAAQD,EAAkBrY,EAASuY,UAAUC,OAAO5J,MAC7C5O,EAASuY,UAAUvG,MAAMpD,MAEpD,OACI,qBAAKnF,MAAO,CAAEgF,SAAUG,GAAxB,SACI,qBAAKnF,MAAO,CAAEmF,MAAO,QAAU6J,IAAI,WAAW1N,IAAK/K,EAASuY,UAAU1I,YCmBlF,IAAMuH,GAAYnC,aAAW,SAACoC,GAAD,MAAY,CACrCnC,KAAM,CACF,uBAAwB,CACpBwD,aAAcrB,EAAMsB,QAAQ,KAGpCR,MAAO,CACHS,SAAU,GAEdC,WAAY,CACRC,OAAQ,UACR,UAAW,CACPA,OAAQ,YAGhBC,kBAAmB,CACf,yBAA0B,CACtBC,UAAW,wBAmCvB,SAASC,GAA6BC,EAAwCC,GAC1E,IAAMC,EAAsB,GAE5B,OAAOF,EAActY,UAChBmD,QAAO,SAAC7B,GAAD,MAAyB,KAAlBA,EAAEsG,KAAKwO,aAAiCtV,IAAhBQ,EAAEqW,aACxCzK,KAAI,SAAC5L,GACF,OAAIA,EAAEnB,SAASqY,EACJ,MAGXA,EAAelX,EAAEnB,QAAS,EAEnB,CACHuT,MAAOpS,EAAEnB,MACTsY,MAAM,GAAD,OAAKnX,EAAEsG,KAAKwO,OAAOlL,UAAU,EAAG/I,KAAKwF,IAAIrG,EAAEsG,KAAK3H,OAAQ,IAAxD,YAGZkD,QAAO,SAACuV,GAAD,OAAgC,OAATA,KAC9BvV,QAAO,SAACuV,GAAD,OAAuBA,EAAMhF,OAAS6E,EAAS,IAAMG,EAAMhF,OAAS6E,EAAS,MAG7F,SAASI,GAAuBC,GAC5B,OAAOzS,EAAkByS,GAAI,GAGjC,SAASC,GAA+BzZ,EAAyB0Z,GAC7D,OACK1Z,EAASe,OAAS2Y,EAAS,IAAM1Z,EAASe,OAAS2Y,EAAS,IAC5D1Z,EAASgB,KAAO0Y,EAAS,IAAM1Z,EAASgB,KAAO0Y,EAAS,IACxDA,EAAS,IAAM1Z,EAASe,OAAS2Y,EAAS,IAAM1Z,EAASgB,KACzD0Y,EAAS,IAAM1Z,EAASe,OAAS2Y,EAAS,IAAM1Z,EAASgB,IAUlE,SAAS2Y,GAAT,GAAmF,IAApDtD,EAAmD,EAAnDA,SAAUT,EAAyC,EAAzCA,KAAMtB,EAAmC,EAAnCA,MAC3C,OACI,cAACsF,GAAA,EAAD,CAAShE,KAAMA,EAAMiE,gBAAiB,EAAGC,UAAU,MAAM3B,MAAO7D,EAAhE,SACK+B,IAUb,IAAM0D,GAAwB9E,aAAW,SAACoC,GAAD,MAAY,CACjDnC,KAAM,CACFwD,aAAcrB,EAAMsB,QAAQ,GAC5BqB,QAAS3C,EAAMsB,QAAQ,GACvBsB,gBAAiB5C,EAAM6C,QAAQpF,OAAOqF,wBAI9C,SAASC,GAAT,GAAwE,IAAhDC,EAA+C,EAA/CA,kBAAmBzL,EAA4B,EAA5BA,MACjC8G,EAAUqE,KAEhB,OAAiC,IAA7BM,EAAkBxZ,QAAgB+N,GAAS,EACpC,KAIP,cAAC0L,GAAA,EAAD,CAAOC,UAAW,EAAGtE,UAAWP,EAAQR,KAAxC,SACKmF,EAAkBvM,KAAI,SAAC5L,EAAGyF,GACvB,OAAO,cAACyQ,GAAD,CAA+BC,eAAgBzJ,EAAO5O,SAAUkC,EAAGoW,MAAO,GAAlD3Q,QAM/C,IAAM6S,GAAwBC,aAAW,CAErCvF,KAAM,CACF8D,UAAW,qBAHWyB,CAK3BC,MAyDI,SAASC,GAAT,GA2Bc,IA1BjB/E,EA0BgB,EA1BhBA,KACAgF,EAyBgB,EAzBhBA,SACMC,EAwBU,EAxBhBrS,KACAsS,EAuBgB,EAvBhBA,UACAC,EAsBgB,EAtBhBA,SACAC,EAqBgB,EArBhBA,SACAC,EAoBgB,EApBhBA,YACAC,EAmBgB,EAnBhBA,eACAC,EAkBgB,EAlBhBA,WACWC,EAiBK,EAjBhBrJ,UACAC,EAgBgB,EAhBhBA,MACQqJ,EAeQ,EAfhBtO,OACKuO,EAcW,EAdhBpS,IACAgQ,EAagB,EAbhBA,cACAqC,EAYgB,EAZhBA,aACArK,EAWgB,EAXhBA,iBACAsK,EAUgB,EAVhBA,KACYC,EASI,EAThB3J,WACM4J,EAQU,EARhBnK,KACmBoK,EAOH,EAPhB1J,kBACmB2J,EAMH,EANhBC,kBAC2BC,EAKX,EALhBC,0BAC0BC,EAIV,EAJhBC,yBACoCC,EAGpB,EAHhBC,mCACqCC,EAErB,EAFhBC,oCACAC,EACgB,EADhBA,SAEM5G,EAAU0B,KAChB,EAAoC9Y,mBAAiB,IAArD,mBAAOwT,EAAP,KAAmByK,EAAnB,KACA,EAAwBje,mBAAiB,IAAzC,mBAAOkK,EAAP,KAAagU,EAAb,KACA,EAAwBle,mBAAiB,IAAzC,mBAAOiT,EAAP,KAAakL,EAAb,KACA,EAAgDne,qBAAhD,mBAAOoe,EAAP,KAAyBC,EAAzB,KACA,EAA4Bre,mBAAQ,OAAS+c,QAAT,IAASA,IAAiB,IAA9D,mBAAOtO,EAAP,KAAe6P,GAAf,KACA,GAAwBte,mBAAmB4S,EAAiBgB,MAA5D,qBAAOA,GAAP,MAAa2K,GAAb,MACA,GAAsBve,mBAAQ,OAASgd,QAAT,IAASA,IAAc,IAArD,qBAAOpS,GAAP,MAAY4T,GAAZ,MACA,GAA4Cxe,mBAAgB,IAA5D,qBAAOye,GAAP,MAAuBC,GAAvB,MACA,GAA0C1e,mBAAiB,GAA3D,qBAAO2e,GAAP,MAAsBC,GAAtB,MACA,GAAkD5e,mBAAoC,IAAtF,qBAAO2T,GAAP,MAA0BkL,GAA1B,MACA,GAAkD7e,qBAAlD,qBAAOud,GAAP,MAA0BuB,GAA1B,MACA,GAAkD9e,mBAA0B,IAA5E,qBAAO+b,GAAP,MAA0BgD,GAA1B,MACA,GAAgE/e,qBAAhE,qBAAO2d,GAAP,MAAiCqB,GAAjC,MACA,GAAgFhf,qBAAhF,qBAAOif,GAAP,MAAyCC,GAAzC,MACA,GAAkElf,qBAAlE,qBAAOyd,GAAP,MAAkC0B,GAAlC,MACA,GAA4Cnf,qBAA5C,qBAAOof,GAAP,MAAuBC,GAAvB,MACA,GAAoFrf,qBAApF,qBAAO6d,GAAP,MAA2CyB,GAA3C,MACA,GAAsFtf,qBAAtF,qBAAO+d,GAAP,MAA4CwB,GAA5C,MACA,GAA0Bvf,mBAAiB,GAA3C,qBAAOsQ,GAAP,MAAc8I,GAAd,MACA,GAAkCpZ,qBAAlC,qBAAOyT,GAAP,MAAkB+L,GAAlB,MACMC,GAAoBrH,uBAAY,SAACsH,GAA0B,IAAD,EAC5DtG,GAAQ,iBAACsG,QAAD,IAACA,OAAD,EAACA,EAASC,wBAAwBrP,aAAlC,QAA2C,KACpD,IAEC0N,IACAA,EAAS4B,QAAU,CACf1V,OACA0Q,gBACApH,aACAP,OACAxE,SACA7D,OACA+I,qBACAgK,4BACAF,6BACAI,sCACAE,uCACAR,uBAIR,IAAMsC,GAA2BzH,uBAC7B,SAACmF,GACG,OAAO3C,EAAetY,UACjBmD,QAAO,SAAC7B,GAAD,OAAOuX,GAA+BvX,EAAG2Z,MAChD9X,QAAO,SAAC7B,GAAD,MAAyB,KAAlBA,EAAEsG,KAAKwO,UACrBlJ,KAAI,SAAC5L,GAAD,OAAOA,EAAEsG,QACbmM,KAAK,QAEd,CAACuE,IAGLvD,qBAAU,WACN6G,EAAO,OAAC3B,QAAD,IAACA,IAAe,IACvB0B,EAAa,OAACd,QAAD,IAACA,IAAqB,IACnCgB,EAAO,OAACf,QAAD,IAACA,IAAe,IACvBkB,GAAS,OAACvB,QAAD,IAACA,IAAiB,IAC3ByB,GAAM,OAACxB,QAAD,IAACA,IAAc,IACrB0B,GAAkB,IAClBG,GAAoB,OAACxB,QAAD,IAACA,IAA4B,MAClD,CAACd,EAAaQ,EAAeI,EAAmBC,EAAaC,EAA0BL,IAE1F3F,qBAAU,WACNkH,GAAQ3L,EAAiBgB,QAC1B,CAAChB,EAAiBgB,OAErByD,qBAAU,WACN,IAAMkG,EACFD,GACC1C,GAAiB,CAACA,EAAcxW,cAAewW,EAAckF,mBAC9D1c,EACEqa,EACD7C,GA3Qb,SAA2CA,GACvC,IAAIvR,EAAQuR,EAActY,UAAUyd,WAAU,SAACnc,GAAD,OAAOA,EAAEnB,QAAUmY,EAAcxW,iBAC/EiF,GAAmB,IAAXA,EAAeuR,EAActY,UAAUC,OAAS,EAAI8G,EAE5D,IAJ+E,EAIzE2W,EAAqB5W,EACvBwR,EAActY,UACd+G,EAToC,EACD,KAanCY,EAAM,KACNvF,EAAM,KAZqE,cAc/Dsb,GAd+D,IAc/E,2BAAoC,CAAC,IAA1Bpc,EAAyB,SACpB,OAARqG,GAAgBrG,EAAEnB,MAAQwH,KAC1BA,EAAMrG,EAAEnB,QAGA,OAARiC,GAAgBd,EAAElB,IAAMgC,KACxBA,EAAMd,EAAElB,MApB+D,8BAwB/E,OAAe,OAARuH,GAAwB,OAARvF,GAAgB,CAACuF,EAAKvF,GAmPnBub,CAAkCrF,SAAmBxX,EACrEgc,EACDxE,GAAiBD,GAA6BC,EAAe6C,SAAgCra,EAC5F2Y,OACgB3Y,IAAlBwX,QAAqDxX,IAAtBma,EACzB,GACA3C,EAActY,UAAUmD,QAAO,SAAC7B,GAAD,OAAOuX,GAA+BvX,EAAG2Z,MAClFW,EAAO,OACH3B,QADG,IACHA,IACIR,EACKtW,QAAO,SAAC7B,GAAD,MAAyB,KAAlBA,EAAEsG,KAAKwO,UACrBlJ,KAAI,SAAC5L,GAAD,OAAOA,EAAEsG,QACbmM,KAAK,OAElByI,GAAqBvB,GACrBwB,GAAqBhD,GACrBiD,GAA4BtB,GAAiCH,GAC7D+B,GAAsC1B,GAA6CL,GACnFgC,GAAuCzB,GAA8CP,GACrF4B,GAA4B,OAAC3B,QAAD,IAACA,IAAkCC,GAC/DyB,GAAoCzB,GACpC4B,GAAkBD,KACnB,CACCxE,EACA8C,EACAJ,EACAE,EACAI,EACAE,IAGJzG,qBAAU,WACN,GAAKyF,EAAL,CAKA,IAAIoD,EAAepD,EAEflK,EAAiBuN,YACjBD,EAAeA,EAAaE,SAG5BrC,KACAmC,EAAeA,EAAavW,MACxBlF,KAAKC,IAAI,EAAGD,KAAKsE,MAAMgV,GAAoC,IAAMnL,EAAiByN,mBAClF5b,KAAKsE,MAAMgV,GAAoC,IAAMnL,EAAiB0N,kBAI9Ed,GAAaU,QAjBTV,QAAapc,KAkBlB,CACC0Z,EACAlK,EAAiBuN,UACjBpC,GACAnL,EAAiByN,kBACjBzN,EAAiB0N,kBAGrBjJ,qBAAU,WACNuH,GAAiB2B,KAAKhd,SACvB,CAAC0P,IAEJoE,qBAAU,WACN,GAAKpE,GAASL,EAAiBO,UAA/B,CAIA,IAAMqN,EAAcvN,EAAKyF,OAEzB,GAAoB,KAAhB8H,GAAsBA,IAAgBpC,EAA1C,CAIA,IAAM7G,EAAU1K,WAAU,sBAAC,sBAAAnG,EAAA,2EAEnBgY,GAFmB,SAEKxB,EAAKuD,kBAAkBD,GAF5B,kCAGnBnC,EAAoBmC,GAHD,gDAKnBE,QAAQtY,MAAR,MALmB,yDAOxB,KAEH,OAAO,kBAAMsP,aAAaH,QAC3B,CAACtE,EAAM0L,GAAeP,EAAkBlB,EAAMtK,EAAiBO,YAElE,IAmBIwN,GAnBEC,GAAkBxI,uBACpB,SAACtR,GACGA,EAAE+Z,iBACF/Z,EAAEga,kBACFrN,GAAW7G,SAEf,CAAC6G,KAGCsN,GAA0B3I,uBAC5B,SAAChE,EAAyB4B,GACtB,IAAMgL,EAAwD,GAC9D1R,OAAO2R,OAAOD,EAAsBrN,IACpCqN,EAAqB5M,GAAmB4B,EACxC6I,GAAqBmC,KAEzB,CAACrN,KAMDgN,GADA1N,GAAQA,EAAKyF,SAAW0F,GAAoBxL,EAAiBO,UAEzDsL,GAAelc,OAAS,EAAxB,gBACekc,GAAelc,OAD9B,6BACyD0Q,EADzD,uBAC4EL,EAAiBO,UAD7F,yCAEmCF,EAAKyF,OAFxC,uBAE6D9F,EAAiBO,UAF9E,KAIa,GAGrB,IAAM+N,GAAkB9I,uBACpB,SAACtR,GACGA,EAAE+Z,iBACF/Z,EAAEga,kBACFnE,EAAYjJ,KAEhB,CAACA,EAAOiJ,IAGNwE,GAAqC/I,uBAAY,WACnD,QAA0BhV,IAAtBma,GAAJ,CAIA,IAAM6D,EAAUvB,GAAyBtC,IACzCW,EAAQkD,GACR9B,GAAsC/B,OACvC,CAACsC,GAA0BtC,KAExB8D,GAAgCjJ,uBAClC,SAACtR,EAA0BqP,GACvB,IAAMmL,EAAuBnL,EAC7B2I,GAAqBwC,GACrB,IAAMvF,EAAoBnB,EAAetY,UAAUmD,QAAO,SAAC7B,GAAD,OACtDuX,GAA+BvX,EAAG0d,MAItC,GAFAvC,GAAqBhD,QAEsB3Y,IAAvCya,GAAkD,CAClD,IAAM0D,EAAwB1B,GAAyBhC,IAEvD,GAAI3T,EAAKwO,SAAW6I,EAAsB7I,OAAQ,CAC9C,IAAM0I,EAAUvB,GAAyByB,GACzCpD,EAAQkD,GACR9B,GAAsCgC,SAI3Ble,IAAfyZ,IAAyD,KAApB,OAATpJ,SAAS,IAATA,QAAA,EAAAA,GAAW9D,gBACvC4P,GAAuC+B,KAG/C,CAAC1G,EAAe1Q,EAAM2T,GAAoCgC,KAGxD2B,GAAsCpJ,uBACxC,SAACtR,GACO+V,GACA/V,EAAEga,kBACFjE,KAEA0C,GAAuChC,MAG/C,CAACV,EAAYU,KAGXkE,GAA+BrJ,uBAAY,WAC7C,GAAK6G,GAAL,CAIA,IAAMlD,OACgB3Y,IAAlBwX,QAA4DxX,IAA7Bua,GACzB,GACA/C,EAActY,UAAUmD,QAAO,SAAC7B,GAAD,OAAOuX,GAA+BvX,EAAG+Z,OAClFoB,GAAqBhD,GACrB+C,GAAqBnB,IACrBwB,GAA6BF,IAC7BI,GACIzE,GAAiBD,GAA6BC,EAAeqE,QAElE,CAACtB,GAA0BsB,GAAkCrE,IAE1D8G,GAAgCtJ,uBAAY,WAC9C,GAAKqF,IAA8BF,GAAnC,CAIA,IAEMoE,EAA+B,EAFrBlE,GAA0B,GAAKF,GAAkB,IAAM,GACvDE,GAA0B,GAAKF,GAAkB,IAAM,GAEvE4B,GAA6BwC,GAC7BtC,GAAkBzE,GAAiBD,GAA6BC,EAAe+G,OAChF,CAAClE,GAA2BF,GAAmB3C,IAE5CgH,GAAiCxJ,uBAAY,WAC/C,GAAKqF,IAA8BF,GAAnC,CAIA,IAEMoE,EAA+B,CAFtBld,KAAKC,IAAI,EAAG,EAAI+Y,GAA0B,GAAKF,GAAkB,IACjE,EAAIE,GAA0B,GAAKF,GAAkB,IAEpE4B,GAA6BwC,GAC7BtC,GAAkBzE,GAAiBD,GAA6BC,EAAe+G,OAChF,CAAClE,GAA2BF,GAAmB3C,IAE5CiH,GAA6BzJ,sBAAW,uCAC1C,WAAOtR,GAAP,SAAAJ,EAAA,yDACII,EAAEga,kBAEGpN,EAHT,6DAOIoO,UAAUC,UAPd,KAOmCC,cAPnC,SAOsEtO,EAAMuO,UAP5E,yBAOmD,YAPnD,2CAOwBC,MAPxB,4DAD0C,sDAU1C,CAACxO,IAGCyO,IACDvH,GAAwF,IAAvEA,EAActY,UAAUmD,QAAO,SAAC7B,GAAD,MAAyB,KAAlBA,EAAEsG,KAAKwO,UAAenW,OAE9E6f,QAA8Chf,EAuBlD,YArBmBA,IAAfyZ,IACAuF,GACI,cAAC9G,GAAA,EAAD,CAASzB,MAAM,6BAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CACI/F,UACKiB,KACAQ,IACAR,GAAkB,KAAOQ,GAAoC,IAC1DR,GAAkB,KAAOQ,GAAoC,GAErEuE,QAASd,GACTe,KAAK,MART,SAUI,cAAC,KAAD,WAQhB,eAAC7I,GAAA,EAAD,CAAQpC,KAAMA,EAAMkL,qBAAmB,EAACC,WAAS,EAACtS,SAAS,KAAKqH,QAASkF,EAAzE,UACI,eAACgG,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAYC,QAAQ,KAAKjL,UAAWP,EAAQyC,MAA5C,yBAGC+C,GACG,cAACyF,GAAA,EAAD,CAAYE,KAAK,MAAMD,QAAS,kBAAM1F,KAAtC,SACI,cAAC,KAAD,SAIZ,cAACiG,GAAA,EAAD,CAAeC,IAAKrD,GAApB,SACI,uBAAM9H,UAAWP,EAAQR,KAAzB,UACKgE,GAAiB2C,IACd,cAACzB,GAAD,CACIC,kBAAmBA,GAAkBtW,QAAO,SAAC7B,GAAD,YAAuBR,IAAhBQ,EAAEqW,aACrD3J,MAAOA,KAGf,cAACsI,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACN7M,WAAS,EACTuM,WAAS,EACTO,QAAS,EACTjI,MAAM,WACN/E,MAAO9L,EACP2O,SAAU,SAAC/R,GAAD,OAAOoX,EAAQpX,EAAEG,OAAO+O,QAClCiN,WAAY,CACRC,aAAc3F,IACV,cAACrB,GAAD,CAAuBpF,SAAS,MAAhC,SACI,cAACwE,GAAA,EAAD,CAASzB,MAAM,kBAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CACI/F,UACKiB,KACAM,IACAN,GAAkB,KAAOM,GAAmC,IACzDN,GAAkB,KACdM,GAAmC,IAC3CsE,GAEJG,QAASnB,GACToB,KAAK,MAVT,SAYI,cAAC,KAAD,eAQ5B,cAAC3J,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACN7M,WAAS,EACTuM,WAAS,EACTU,KAAM,EACNpI,MAAM,aACN/E,MAAOxC,EACPqF,SAAU,SAAC/R,GAAD,OAAOmX,EAAcnX,EAAEG,OAAO+O,UAE5C,cAAC4C,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT1H,MAAM,OACN/E,MAAO/C,EACP4F,SAAU,SAAC/R,GAAD,OAAOqX,EAAQrX,EAAEG,OAAO+O,QAClCoN,WAAYzC,GACZsC,WAAY,CACRC,aACI,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,SACI,cAACwE,GAAA,EAAD,CAASzB,MAAM,iBAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CACI/F,SACIA,IACC1J,EAAiBO,YACjBF,GACe,KAAhBA,EAAKyF,OAET4J,QAAS,kBAAMpF,EAAKmG,qBAAqBpQ,EAAKyF,SAC9C6J,KAAK,MART,SAUI,cAAC,KAAD,eAQ3BjT,OAAOnO,KAAK8b,GAAczN,KAAI,SAAC4E,GAAD,OAC3B,cAACwE,GAAA,EAAD,CAEIgK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACTvM,WAAS,EACT8M,QAAS,EACTjI,MAAO3G,EACP4B,MAAOrC,GAAkBS,IAAoB,GAC7CyE,SAAU,SAAC/R,GAAD,OAAOia,GAAwB3M,EAAiBtN,EAAEG,OAAO+O,SAR9D5B,MAWZX,IACG,qBAAKkE,UAAWP,EAAQmD,WAAY+H,QAAS1B,GAA7C,SACI,cAAChI,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACTzM,MAAOvC,GAAU9I,KACjBoQ,MAAM,QACNqI,gBACmBhgB,IAAfyZ,IACCpJ,GAAU9D,eACX,0DAEJsT,WAAY,CACRC,aAAcd,IAAsB7E,IAChC,cAACnB,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,SAAgCsL,UAMnD1O,GACG,qBAAKiE,UAAWP,EAAQmD,WAAY+H,QAASpB,GAA7C,SACI,cAACtI,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACTzM,MAAOtC,EAAM/I,KACboQ,MAAM,QACNkI,WAAY,CACRC,aACI,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,SACI,cAACwE,GAAA,EAAD,CAASzB,MAAM,oBAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CAAYC,QAAST,GAA4BU,KAAK,MAAtD,SACI,cAAC,KAAD,iBAUpC,cAAC3J,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT1H,MAAM,SACN/E,MAAOvH,EACPoK,SAAU,SAAC/R,GAAD,OAAOwX,GAAUxX,EAAEG,OAAO+O,UAEvCgH,GACG,cAACpE,GAAA,EAAD,CACIgK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT1H,MAAM,MACN/E,MAAOpL,GACPiO,SAAU,SAAC/R,GAAD,OAAO0X,GAAO1X,EAAEG,OAAO+O,UAGxCpD,EAAiBgB,KAAKrR,OAAS,GAC5B,cAACyV,GAAD,CACI4K,QAAQ,SACR7H,MAAM,OACNqI,WAAW,kCACXX,WAAS,EACTM,MAAM,YACNnP,KAAMA,GACNqE,aAAc,SAACM,GAAD,OAAagG,GAAQhG,MAG1CgF,IAAqBE,IAA6B2B,IAC/C,eAACkE,GAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAA1B,UACI,cAACF,GAAA,EAAD,CAAMG,MAAI,EAACtY,MAAO,CAAEmP,SAAU,GAA9B,SACI,cAACoJ,GAAA,EAAD,CACIrI,oBAAqBA,GACrBrF,MAAOuH,GACPoG,iBAAkB1I,GAClBpC,SAAUwI,GACVpX,IAAKwT,GAA0B,GAC/B/Y,IAAK+Y,GAA0B,GAC/BmG,MAAOxE,GACPyE,KAAM,EACNC,kBAAkB,OAClBnM,UAAWP,EAAQqD,kBACnBsI,MAAM,gBAGd,cAACO,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACnI,GAAA,EAAD,CAASzB,MAAM,QAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CACIE,KAAK,MACLpX,MAAO,CAAE4Y,WAAY,GACrBzB,QAASb,GAHb,SAKI,cAAC,KAAD,YAKhB,cAAC6B,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACnI,GAAA,EAAD,CAASzB,MAAM,UAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CACIE,KAAK,MACLpX,MAAO,CAAE4Y,WAAY,GACrBzB,QAASZ,GAHb,SAKI,cAAC,KAAD,YAKhB,cAAC4B,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACnI,GAAA,EAAD,CAASzB,MAAM,WAAf,SACI,+BACI,cAACwI,GAAA,EAAD,CACIE,KAAK,MACLpX,MAAO,CAAE4Y,WAAY,GACrBzB,QAASV,GAHb,SAKI,cAAC,KAAD,oBAShC,eAACoC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAQ3H,SAAUA,EAAUgG,QAAS,kBAAM5F,KAA3C,oBAGC9B,GACG,cAACqJ,GAAA,EAAD,CAAQ3H,SAAUA,EAAUgG,QAAS,kBAAM7F,KAA3C,oBAIJ,cAACwH,GAAA,EAAD,CACI3H,SAAUA,EACVgG,QAAS,kBACL9F,EACItS,EACAsJ,EACAC,GACAC,EACAT,EALK,OAMLxE,QANK,IAMLA,IAAU,GANL,OAOL7D,SAPK,IAOLA,MAAO,GACP+I,GACAC,GACA,QAbZ,0BAmBA,cAACqQ,GAAA,EAAD,CACI3H,SAAUA,EACVgG,QAAS,kBACL9F,EACItS,EACAsJ,EACAC,GACAC,EACAT,EALK,OAMLxE,QANK,IAMLA,IAAU,GANL,OAOL7D,SAPK,IAOLA,MAAO,GACP+I,GACAC,GACA,eAbZ,8BAmBA,cAACqQ,GAAA,EAAD,CACI3H,SAAUA,EACVgG,QAAS,kBACL9F,EACItS,EACAsJ,EACAC,GACAC,EACAT,EALK,OAMLxE,QANK,IAMLA,IAAU,GANL,OAOL7D,SAPK,IAOLA,MAAO,GACP+I,GACAC,GACA,YAbZ,0B,wBCx2BD,OAA0B,+CCgBnCkF,GAAYnC,cAA+B,SAACoC,GAAD,MAAY,CACzDnC,KAAM,gBAAGsN,EAAH,EAAGA,SAAH,MAAiC,CACnCpN,SAAU,WACVtG,OAFE,EAAa2T,aAEQ,OAAS,oBAChC7T,MAAO,OACP2G,OAAQ,IACRD,cAAekN,EAAW,OAAS,SAEvCE,sBAAuB,kBAAuB,CAC1C,YAAa,CACTC,QAAS,MACTvN,SAAU,WACVtG,OAJe,EAAG2T,aAIK,QAAU,qBACjC7T,MAAO,OACPlF,QAAS,OACTkZ,cAAe,SACfzN,eAAgB,SAChB0N,WAAY,SACZC,UAAW,SACXxL,eAAgB,cAChByL,iBAAkB,YAClBC,mBAAoB,SACpBC,gBAAgB,OAAD,OAASC,GAAT,KACfC,oBAAqB,UACrBC,WAAY,oBACZrf,OAAQ,gDAEZ6K,MAAO,OACPE,OAAQ,aAID,SAASuU,GAAT,GAAkE,IAA3Cb,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,aAAca,EAAkB,EAAlBA,QACpD5N,EAAU0B,GAAU,CAAEoL,WAAUC,iBAEtC,OACI,qBAAKxM,UAAWP,EAAQR,KAAxB,SACI,cAACqO,GAAA,EAAD,CAAMpN,GAAIqM,GAAYc,EAAtB,SACI,qBAAKrN,UAAWP,EAAQgN,4B,ICpD5Bc,G,mECICC,GAAb,WAGI,WAAYnd,GAAqB,yBAFhBA,YAEe,EAC5BpH,KAAKoH,OAASA,EAJtB,wCAOI,WACI,OAAOpH,KAAKoH,OAAOzF,SAR3B,gBAWI,SAAG8G,GACC,OAAOzI,KAAKoH,OAAOqB,KAZ3B,sBAeI,SAAS5G,EAAeC,GACpB,OAAO,IAAIyiB,EAAiBvkB,KAAKoH,OAAOod,SAAS3iB,EAAOC,QAhBhE,KAoBa2iB,GAAb,WAGI,WAAYC,GAA2B,yBAFtBA,QAA2B,GAGxC1kB,KAAK0kB,QAAUA,EAJvB,wCAOI,WACI,IADiB,EACb/iB,EAAS,EADI,cAED3B,KAAK0kB,SAFJ,IAEjB,2BAA8B,CAC1B/iB,GAD0B,QACdA,QAHC,8BAMjB,OAAOA,IAbf,gBAgBI,SAAG8G,GACC,IADsB,EAClBkc,EAAwB,EADN,cAGD3kB,KAAK0kB,SAHJ,IAGtB,2BAAmC,CAAC,IAAzBtd,EAAwB,QACzBwd,EAAcnc,EAAQkc,EAE5B,GAAIC,EAAcxd,EAAOzF,OACrB,OAAOyF,EAAOyd,GAAGD,GAGrBD,GAAyBvd,EAAOzF,QAVd,8BAatB,MAAM,IAAI2E,MAAM,mBA7BxB,sBAgCI,SAASzE,EAAeC,GACpB,IADgD,EAC1C0L,EAA0B,GAC5BmX,EAAwB,EAFoB,cAI3B3kB,KAAK0kB,SAJsB,IAIhD,2BAAmC,CAAC,IAAzBtd,EAAwB,QACzB0d,EAAmBjhB,KAAKC,IAAI,EAAGjC,EAAQ8iB,GACvCI,EAAiBlhB,KAAKwF,IAAIjC,EAAOzF,OAAQG,EAAM6iB,GAEjDI,EAAiB,GAAKD,EAAmBC,GACzCvX,EAAOxI,KAAKoC,EAAOod,SAASM,EAAkBC,IAGlDJ,GAAyBvd,EAAOzF,QAZY,8BAehD,OAAO,IAAI8iB,EAAgBjX,OA/CnC,KAmDawX,GAAb,iDACYN,QAAwB,GADpC,uCAGI,SAAItd,GACApH,KAAK0kB,QAAQ1f,KAAKoC,KAJ1B,kBAOI,WACI,IADiB,EACbzF,EAAS,EADI,cAGI3B,KAAK0kB,SAHT,IAGjB,2BAAmC,CAC/B/iB,GAD+B,QACdA,QAJJ,8BAOjB,OAAOA,IAdf,kBAiBI,SAAKsjB,GACD,GAAc,IAAVA,EACA,OAAO,IAAIR,GAAgB,IAM/B,IAHA,IAAMjX,EAAuB,GACzB0X,EAAc,IAEL,CACT,GAA4B,IAAxBllB,KAAK0kB,QAAQ/iB,OACb,MAAM,IAAI2E,MAAM,4CAGpB,IAAMc,EAASpH,KAAK0kB,QAAQS,QACtBC,EAAWH,EAAQC,EAEzB,GAAI9d,EAAOzF,SAAWyjB,EAAU,CAC5B5X,EAAOxI,KAAKoC,GACZ,MACG,GAAIA,EAAOzF,OAASyjB,EAAU,CACjC5X,EAAOxI,KAAKoC,EAAOod,SAAS,EAAGY,IAC/BplB,KAAK0kB,QAAQjb,QAAQrC,EAAOod,SAASY,EAAUhe,EAAOzF,SACtD,MAGJujB,GAAe9d,EAAOzF,OACtB6L,EAAOxI,KAAKoC,GAGhB,OAAO,IAAIqd,GAAgBjX,EAAOoB,KAAI,SAAAyW,GAAC,OAAI,IAAId,GAAiBc,WA9CxE,KAkDaC,GAAb,WAMI,WAAYnY,GAAyB,yBAL7BA,YAK4B,OAJ5BoY,kBAA2C,IAAIP,GAInB,KAFpCQ,eAAyB,EAGrBxlB,KAAKmN,OAASA,EAPtB,2CAUI,WAAkB,IAAD,2HACPpH,EAAS,EAAKoH,OAAOsY,YADd,YAIL,EAAKF,kBAAkB5jB,QAAU,EAAK6jB,gBAJjC,gBAKL,OALK,SAKC,EAAKD,kBAAkBG,KAAK,EAAKF,gBALlC,2DAOgBzf,EAAO2f,QAPvB,YAOClf,EAPD,QASMmf,KATN,qDAaL,EAAKJ,kBAAkBK,IAAIpf,EAAO4O,OAb7B,yEAVrB,KA6BayQ,GAAb,WAII,WAAYZ,GAAuB,yBAH3B7d,YAG0B,OAF1B0e,OAAiB,EAGrB9lB,KAAKoH,OAAS6d,EALtB,uCAQI,WACI,OAAOjlB,KAAK8lB,SATpB,mBAYI,WACI,OAAO9lB,KAAK8lB,OAAS9lB,KAAKoH,OAAOzF,SAbzC,qBAgBI,SAAQsjB,EAAec,GACnB,QAAcvjB,IAAVujB,GAAuB/lB,KAAK8lB,OAASb,EAAQc,EAC7C,OAAO,EAQX,IALA,IAAIC,EAAS,EACTC,EAAQ,EACNC,EAAOlmB,KAAK8lB,OAGT/iB,EAFE/C,KAAK8lB,OAASb,EAAQ,EAEhBliB,GAAKmjB,IAAQnjB,EAC1BijB,GAAUhmB,KAAKoH,OAAOyd,GAAG9hB,IAAO,EAAIkjB,IAClCA,EAIN,OADAjmB,KAAK8lB,QAAUb,EACRe,IAhCf,wBAmCI,SAAWf,GACP,IAAM7d,EAASpH,KAAKoH,OAAOod,SAASxkB,KAAKyI,MAAOzI,KAAKyI,MAAQwc,GAE7D,OADAjlB,KAAK8lB,QAAUb,EACR7d,MAtCf,M,SD1JYkd,O,cAAAA,I,cAAAA,I,cAAAA,I,cAAAA,I,gBAAAA,Q,KAQZ,IAYY6B,GAZNC,GAAoB1X,OAAO2X,OAAO/B,IAEjC,SAASgC,GAAoBC,GAAe,IAAD,gBAC3BH,IAD2B,IAC9C,2BAAsC,CAAC,IAA5B/e,EAA2B,QAClC,GAAIkf,IAASlf,EACT,OAAOA,GAH+B,8BAO9C,MAAM,IAAIf,MAAJ,qCAAwCigB,K,SAGtCJ,O,mBAAAA,I,wCAAAA,I,8BAAAA,Q,KAMZ,IAkCYK,GAlCNC,GAAyB/X,OAAO2X,OAAOF,K,SAkCjCK,O,oCAAAA,I,uCAAAA,I,sDAAAA,Q,KAMZ,IAAME,GAA2BhY,OAAO2X,OAAOG,IEjD/C,IAEaG,GAAb,WAGI,WAAYC,GAA+B,yBAF1BA,mBAEyB,EACtC5mB,KAAK4mB,cAAgBA,EAJ7B,0CAOI,SAAOC,GAMH,IALA,IAAIC,EAAe,EACfC,EAAmB,EACnBC,EAAc,EACZC,EAAgBjnB,KAAK4mB,cAAcjlB,OAElCmlB,EAAeG,GAAe,CACjC,IAAMC,EAAYlnB,KAAK4mB,cAAc/B,GAAGiC,GACpCK,OAAS,EACThF,OAAK,EACLiF,OAAS,EAGb,GAAIF,EAAY,EAEZ/E,EAAQ+E,EACRC,EAAY,EACZC,EAAY,MACT,CACH,IAAMC,EAAarnB,KAAK4mB,cAAc/B,GAAGiC,EAAe,GAExD,GAAmB,IAAfO,EAEAlF,EAAQ,EACRgF,EAAY,EACZC,EAAY,EACZL,EAAmB,IACjBC,OACC,GAAIK,EAAa,GAEpBlF,EAAQ,EACRgF,EAAYE,EACZD,EAAY,OACT,GAAIC,EAAa,IAAK,CAGzBlF,EAAQ,EACRgF,GAAcE,EAAa,IAAO,GAFhBrnB,KAAK4mB,cAAc/B,GAAGiC,EAAe,GAGvDM,EAAY,OACT,GAAIC,EAAa,IAAK,CAGzBlF,EADkBniB,KAAK4mB,cAAc/B,GAAGiC,EAAe,GAEvDK,EAAYE,EAAa,IACzBD,EAAY,MACT,CAEH,IAAME,EAAYtnB,KAAK4mB,cAAc/B,GAAGiC,EAAe,GAEvD3E,EADmBniB,KAAK4mB,cAAc/B,GAAGiC,EAAe,GAExDK,GAAcE,EAAa,KAAQ,GAAKC,EACxCF,EAAY,GAIpB,GAAID,EAAY,EAAG,CACf,IAAK,IAAII,EAAIR,EAAkBQ,EAAIR,EAAmBI,IAAaI,EAC/DV,EAASU,EAAGP,EAAa7E,GAG7B4E,GAAoBI,EAGxBL,GAAgBM,OAtE5B,KA2EaI,GAAb,WASI,WACIC,EACAC,EACAC,EACAC,EACAC,EACAC,GACD,yBAfML,oCAeP,OAdOC,8BAcP,OAbOC,+BAaP,OAZOC,8BAYP,OAXOC,0BAWP,OATeC,wBASf,EACE9nB,KAAKynB,+BAAiCA,EACtCznB,KAAK0nB,yBAA2BA,EAChC1nB,KAAK2nB,0BAA4BA,EACjC3nB,KAAK4nB,yBAA2BA,EAChC5nB,KAAK6nB,qBAAuBA,EAC5B7nB,KAAK8nB,mBAAqBA,EAtBlC,0CAyBI,WACI,OAAO9nB,KAAK4nB,yBAAyBG,MACjC,SAACC,GAAD,OACIA,EAAIC,qBAAuBzB,GAAmB0B,iBAC9CF,EAAIC,qBAAuBzB,GAAmB2B,4BA7B9D,sCAiCI,SAAmCC,GAC/B,IAAMC,EAAMroB,KAAK2nB,0BAA0BI,MAAK,SAAC/kB,GAAD,OAAOA,EAAEolB,YAAcA,KAEvE,QAAY5lB,IAAR6lB,EAAmB,CACnB,GAAIroB,KAAKynB,+BAA+Ba,mBAAqBnC,GAAiBoC,OAC1E,MAAM,IAAIjiB,MAAJ,oEAGV,QAAgC9D,IAA5BxC,KAAK8nB,mBACL,MAAM,IAAIxhB,MAAJ,yEAGV,OAAOtG,KAAK8nB,mBAAmBU,yBAAyBJ,GAG5D,OAAOC,IAhDf,uBAmDI,SAAUjhB,GAA6B,IAAD,OAC5BihB,EAAMroB,KAAKwoB,yBAAyBxoB,KAAKynB,+BAA+BW,WAE9E,QAAY5lB,IAAR6lB,EACA,MAAM,IAAI/hB,MAAJ,8BAGV,IAAMmiB,EAAWzoB,KAAKyoB,SAEtB,QAAiBjmB,IAAbimB,QAA6CjmB,IAAnBimB,EAAS/Y,YAA2ClN,IAApBimB,EAAS7Y,OACnE,MAAM,IAAItJ,MAAJ,mDAGV,IAAMoiB,EAAc,OAAGthB,QAAH,IAAGA,IAAU,IAAIuhB,kBAAkBF,EAAS/Y,MAAQ+Y,EAAS7Y,OAAS,GACpFgZ,EAAcP,EAAIQ,eAAeja,KAAI,SAACoM,GAAD,OAAa,EAAK8N,YAAY9N,MACnEtL,EAAQ+Y,EAAS/Y,MAsBvB,OApBA,IAAIiX,GACA,IAAIlC,GAAgBzkB,KAAK4nB,yBAAyBhZ,KAAI,SAACoZ,GAAD,OAASA,EAAIe,gBACrEC,QAAO,SAACzB,EAAG0B,EAAGC,GACZ,IACMC,EAA+B,GADlBF,EAAIvZ,EAAQ6X,GAG/B,GAAI2B,GAAgBN,EAAYjnB,OAC5B+mB,EAAeS,GAAmB,EAClCT,EAAeS,EAAkB,GAAK,EACtCT,EAAeS,EAAkB,GAAK,EACtCT,EAAeS,EAAkB,GAAK,MACnC,CACH,IAAMhH,EAAQyG,EAAYM,GAC1BR,EAAeS,GAAmBhH,EAAMiH,EACxCV,EAAeS,EAAkB,GAAKhH,EAAMkH,EAC5CX,EAAeS,EAAkB,GAAKhH,EAAMmH,EAC5CZ,EAAeS,EAAkB,GAAKhH,EAAMrc,MAI7C,IAAIyjB,UACPb,EAAelE,SAAS,EAAG,EAAIiE,EAAS/Y,MAAQ+Y,EAAS7Y,QACzD6Y,EAAS/Y,MACT+Y,EAAS7Y,UA3FrB,yBAgGI,SAAoBoL,GAChB,IAAMiO,EAAIjO,EAAQwO,UACZC,EAAKzO,EAAQ0O,oBACbC,EAAK3O,EAAQ4O,mBAKnB,MAAO,CAAER,EAHCppB,KAAK6pB,MAAMhmB,KAAKqE,MAAM+gB,EAAI,QAAUU,EAAK,MAAO,EAAG,KAGjDN,EAFFrpB,KAAK6pB,MAAMhmB,KAAKqE,MAAM+gB,EAAI,OAAUQ,EAAK,KAAO,OAAUE,EAAK,MAAO,EAAG,KAEpEL,EADLtpB,KAAK6pB,MAAMhmB,KAAKqE,MAAM+gB,EAAI,OAASQ,EAAK,MAAO,EAAG,KAC1C3jB,EAAGkV,EAAQ8O,gBAxGrC,mBA2GI,SAAc9D,EAAgB3c,EAAavF,GACvC,OAAOD,KAAKC,IAAIuF,EAAKxF,KAAKwF,IAAIvF,EAAKkiB,QA5G3C,KAgHO,SAAgB+D,GAAvB,mC,+CAAO,WAAiC/mB,GAAjC,qDAAA8C,EAAA,uDACGkkB,EAAkB,IAAI1E,GAAgBtiB,IAC5BwiB,eAAiB,GAK7BkC,EAAsD,GACtDC,EAAwD,GACxDC,EAAsD,GATvD,kCAWwBoC,EAAgBtF,WAXxC,oGAWctd,EAXd,QAYOrB,EAAS,IAAI8f,GAAaze,IAE5B6iB,EAdL,sBAeaA,EAAOC,YAfpB,cAgBc5F,GAAY6F,IAhB1B,UAuBc7F,GAAY8F,IAvB1B,UA8Bc9F,GAAY+D,IA9B1B,UAqCc/D,GAAY0D,IArC1B,UA6Cc1D,GAAYxiB,IA7C1B,4BAiBoDU,IAAnCilB,EAjBjB,uBAkBuB,IAAInhB,MAAJ,kBAlBvB,eAqBamhB,EAAiC4C,GAAgBtkB,EAAQkkB,GArBtE,qCAwBoDznB,IAAnCilB,EAxBjB,uBAyBuB,IAAInhB,MAAJ,kBAzBvB,eA4BaohB,EAAyB1iB,KAAKslB,GAAgBvkB,EAAQkkB,IA5BnE,qCA+BoDznB,IAAnCilB,EA/BjB,uBAgCuB,IAAInhB,MAAJ,kBAhCvB,eAmCaqhB,EAA0B3iB,KAAKulB,GAAgBxkB,EAAQkkB,IAnCpE,qCAsCoDznB,IAAnCilB,EAtCjB,uBAuCuB,IAAInhB,MAAJ,kBAvCvB,eA0CmB0hB,EAAMwC,GAAgBzkB,EAAQkkB,GACpCrC,EAAyB5iB,KAAKgjB,GA3C3C,qCA8CoDxlB,IAAnCilB,EA9CjB,uBA+CuB,IAAInhB,MAAJ,0BA/CvB,QA4Da,OATAmkB,EAAiB,IAAIjD,GACjBC,EACAC,EACAC,EACAC,EALyB,CAAEqC,UAO3BQ,GAzDjB,UA4DmBA,EA5DnB,eA8DahD,OAAiCjlB,EACjCklB,EAA2B,GAC3BC,EAA4B,GAC5BC,EAA2B,GAjExC,mCAoEmB,IAAIthB,MAAJ,gCAAmC2jB,EAAOC,cApE7D,QAuEKD,OAASznB,EACTwnB,EAAgBxE,eAAiB,GAxEtC,2BA7Le,SAuQJkF,EAAc3kB,EAAO4kB,QAAQ,IA1ExC,uBA6Ee,IAAIrkB,MAAJ,gCAAmCokB,IA7ElD,QAgFWE,EAAwB7kB,EAAO4kB,QAAQ,GACvCE,EAAoB9kB,EAAO4kB,QAAQ,GACnCT,EAAc5D,GAAoBvgB,EAAO4kB,QAAQ,IACjDG,EAAc/kB,EAAO4kB,QAAQ,GACnCV,EAAS,CAAEW,wBAAuBC,oBAAmBX,cAAaY,eAClEd,EAAgBxE,eAAiBsF,EArFtC,qY,sBA0FP,SAAST,GAAgBtkB,EAAsBkkB,GAC3C,IAAMlE,EAAQhgB,EAAO0C,MAAQwhB,EAAOa,YAC9Bpb,EAAQ3J,EAAO4kB,QAAQ,EAAG5E,GAC1BnW,EAAS7J,EAAO4kB,QAAQ,EAAG5E,GAiBjC,OAhBAhgB,EAAO4kB,QAAQ,GAgBR,CACHV,SACAva,QACAE,SACAmb,kBAnBsBhlB,EAAO4kB,QAAQ,EAAG5E,GAoBxCuC,iBFrSD,SAAkC/B,GAAe,IAAD,gBAC/BE,IAD+B,IACnD,2BAA4C,CAAC,IAAlCuE,EAAiC,QACxC,GAAIzE,IAASyE,EACT,OAAOA,GAHoC,8BAOnD,MAAM,IAAI1kB,MAAJ,0CAA6CigB,IE2Q1B0E,CAAyBllB,EAAO4kB,QAAQ,EAAG5E,IAoBhEmF,kBF5RD,SAAmC3E,GACtC,OAAQA,GACJ,KAAK,EACD,OAAO,EACX,KAAK,IACD,OAAO,EACX,QACI,MAAM,IAAIjgB,MAAJ,4CAA+CigB,KEkQnC4E,CAA0BplB,EAAO4kB,QAAQ,EAAG5E,IAoBlEqC,UAnBcriB,EAAO4kB,QAAQ,EAAG5E,GAoBhCqF,uBAnB2BrlB,EAAO4kB,QAAQ,EAAG5E,GAoB7CsF,SAnBatlB,EAAO4kB,QAAQ,EAAG5E,GAoB/BuF,SAnBavlB,EAAO4kB,QAAQ,EAAG5E,GAoB/BwF,kBFtRD,SAAmChF,GACtC,OAAQA,GACJ,KAAK,EACD,OAAO,EACX,KAAK,GACD,OAAO,EACX,QACI,MAAM,IAAIjgB,MAAJ,4CAA+CigB,KE4PnCiF,CAA0BzlB,EAAO4kB,QAAQ,EAAG5E,IAoBlE0F,yBAnB6B1lB,EAAO4kB,QAAQ,EAAG5E,GAoB/C2F,uBAnB2B3lB,EAAO4kB,QAAQ,EAAG5E,GAoB7C4F,iCAnBqC5lB,EAAO4kB,QAAQ,EAAG5E,GAoBvD6F,+BAnBmC7lB,EAAO4kB,QAAQ,EAAG5E,GAoBrD8F,oBAnBwB9lB,EAAO4kB,QAAQ,EAAG5E,GAoB1C+F,6BAnBiC/lB,EAAO4kB,QAAQ,EAAG5E,IAuB3D,SAASuE,GAAgBvkB,EAAsBkkB,GAK3C,IAJA,IAAMlE,EAAQhgB,EAAO0C,MAAQwhB,EAAOa,YAC9BiB,EAAchmB,EAAO4kB,QAAQ,EAAG5E,GAChCiG,EAAoB,GAEjBjpB,EAAI,EAAGA,EAAIgpB,IAAehpB,EAAG,CAClC,IAAMuoB,EAAWvlB,EAAO4kB,QAAQ,EAAG5E,GAC7BkG,EAA2BlmB,EAAO4kB,QAAQ,EAAG5E,GAC7CmG,EAAyBnmB,EAAO4kB,QAAQ,EAAG5E,GAC3CrN,EAAc3S,EAAO4kB,QAAQ,EAAG5E,GAChCpN,EAAe5S,EAAO4kB,QAAQ,EAAG5E,GAEvCiG,EAAkBhnB,KAAK,CACnBsmB,WACAW,2BACAC,yBACAxT,cACAC,iBAIR,MAAO,CACHsR,SACA8B,cACAC,qBAIR,SAASzB,GAAgBxkB,EAAsBkkB,GAM3C,IALA,IAAMlE,EAAQhgB,EAAO0C,MAAQwhB,EAAOa,YAC9B1C,EAAYriB,EAAO4kB,QAAQ,EAAG5E,GAC9BoG,EAAuBpmB,EAAO4kB,QAAQ,EAAG5E,GACzC8C,EAAiC,GAEhC9iB,EAAO0C,MAAQsd,GAAO,CACzB,IAAMqG,EAAiBrmB,EAAO4kB,QAAQ,EAAG5E,GACnCyD,EAAYzjB,EAAO4kB,QAAQ,EAAG5E,GAC9B6D,EAAqB7jB,EAAO4kB,QAAQ,EAAG5E,GACvC2D,EAAsB3jB,EAAO4kB,QAAQ,EAAG5E,GACxC+D,EAAe/jB,EAAO4kB,QAAQ,EAAG5E,GACvC8C,EAAe7jB,KAAK,CAAEonB,iBAAgB5C,YAAWI,qBAAoBF,sBAAqBI,iBAG9F,MAAO,CACHG,SACA7B,YACA+D,uBACAtD,kBAIR,SAAS2B,GAAgBzkB,EAAsBkkB,GAC3C,IAIIva,EACAE,EACAmZ,EANEsC,EAAWtlB,EAAO4kB,QAAQ,GAC1B0B,EAAsBtmB,EAAO4kB,QAAQ,GACrC1C,EFnUH,SAAoC1B,GAAe,IAAD,gBAClCG,IADkC,IACrD,2BAA6C,CAAC,IAAnC4F,EAAkC,QACzC,GAAI/F,IAAS+F,EACT,OAAOA,GAHsC,8BAOrD,MAAM,IAAIhmB,MAAJ,8CAAiDigB,IE4T5BgG,CAA2BxmB,EAAO4kB,QAAQ,IAC/D6B,EAAmBzmB,EAAO4kB,QAAQ,GAgBxC,OAVI1C,IAAuBzB,GAAmB0B,iBAC1CD,IAAuBzB,GAAmB2B,wBAE1CzY,EAAQ3J,EAAO4kB,QAAQ,GACvB/a,EAAS7J,EAAO4kB,QAAQ,GACxB5B,EAAahjB,EAAO0mB,WAAWD,EAAmB,IAElDzD,EAAahjB,EAAO0mB,WAAWD,GAG5B,CACHvC,SACAoB,WACAgB,sBACApE,qBACAuE,mBACA9c,QACAE,SACAmZ,WAAYA,GC3ZpB,IAAM2D,GAAWC,OAAO,cAAe,MACjCC,GAAkBD,OAAO,SAAU,MACnCE,GAAgB1iB,SAASC,cAAc,OACvC0iB,GAAe3iB,SAASC,cAAc,UAUvB2iB,G,iDACTC,e,sFAER,WAAgBC,GAAhB,oBAAAnnB,EAAA,sEACkBH,QAAQunB,IAAID,EAAMre,KAAI,SAACue,EAAGpqB,GAAJ,OAAU,EAAKqqB,WAAWD,EAAGpqB,OADrE,uCAESsqB,SAAQ,SAACC,GAAD,OAAWA,KACnBxY,MAAK,SAACyY,EAAIC,GAAL,OAAYD,EAAG1rB,MAAQ2rB,EAAG3rB,UAHxC,2C,sHAMA,WAAiBwK,EAAYvH,GAA7B,kEAAAgB,EAAA,0DACQuG,EAAKtC,KAAK2N,SAAS,QAD3B,4BAEsB+V,KAFtB,SAEqCphB,EAAK/C,OAF1C,0BAEcgkB,GAFd,gCAGeA,EACFzoB,QAAO,SAAC6oB,GAAD,MAAwB,QAAdA,EAAKrmB,QACtBuH,KAAI,SAAC8e,GACF,IAAMC,EAAMD,EAAKvmB,KACjB,MAAO,CACHtF,MAAO8rB,EAAI9rB,MACXC,IAAK6rB,EAAI7rB,IACTwH,KAAMqkB,EAAIrkB,KAAKskB,QAAQlB,GAAU,IACjC5nB,MAAOA,OAX3B,WAgBQuH,EAAKtC,KAAK2N,SAAS,UAAWrL,EAAKtC,KAAK2N,SAAS,UAhBzD,yCAiBe,IAAI/R,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAC,EAAA,6DACT+nB,EAAgBxhB,EAAKtC,KAAK2N,SAAS,UACnCoW,EAAS,IAAIC,UAAOC,OAAOvuB,OAAQsuB,UAAOE,iBAC1CC,EAAc,GACpBJ,EAAOK,MAAQ,SAAC9I,GACZ,GAAIwI,EAAe,CACfxI,EAAE/b,KAAO+b,EAAE/b,KAAKskB,QAAQlB,GAAU,IAElC,IAHe,EAGT0B,EAAQ/I,EAAE/b,KAAKkM,MAAM,MACrB6Y,EAAW,GAJF,cAMID,GANJ,IAMf,2BAA0B,CAAC,IAAhBE,EAAe,QACtBD,EAASrpB,KAAK,EAAKupB,QAAQD,KAPhB,8BAUfjJ,EAAE/b,KAAO+kB,EAAS5Y,KAAK,MAE3ByY,EAAKlpB,KAAKqgB,IAEdyI,EAAOU,QAAU,kBACb5oB,EACIsoB,EAAKtf,KAAI,SAACyW,GAAD,MAAQ,CACbxjB,MAAOgC,KAAKqE,MAAoB,IAAdmd,EAAEoJ,WACpB3sB,IAAK+B,KAAKqE,MAAkB,IAAZmd,EAAEqJ,SAClBplB,KAAM+b,EAAE/b,KACRxE,MAAOA,QAzBJ,KA4BfgpB,EA5Be,SA4BIzhB,EAAK/C,OA5BT,wBA4BRqlB,MA5BQ,gBA6Bfb,EAAOc,QA7BQ,4CAAZ,0DAjBf,WAkDQviB,EAAKtC,KAAK2N,SAAS,QAlD3B,6BAmDsBmX,KAnDtB,UAmDqCxiB,EAAK/C,OAnD1C,gCAmDkD,GAApCgkB,GAnDd,qCAoDeA,EAAMwB,UAAUlgB,KAAI,SAACmgB,GACxB,MAAO,CACHltB,MAAOgC,KAAKsE,MAAuB,IAAjB4mB,EAASltB,OAC3BC,IAAK+B,KAAKsE,MAAqB,IAAf4mB,EAASjtB,KACzBwH,KAAMylB,EAASC,OACV3B,SAAQ,SAACtkB,GAAD,OAAWA,EAAMkmB,UAAUrgB,KAAI,SAACsgB,GAAD,OAAcA,EAAS5lB,WAC9DmM,KAAK,IACLmY,QAAQhB,GAAiB,MAC9B9nB,MAAOA,OA5DvB,YAiEQuH,EAAKtC,KAAK2N,SAAS,UAjE3B,kCAkE2BrL,EAAK/C,OAlEhC,WAkEcA,EAlEd,OAmEc6lB,EAAMnvB,KAAKovB,aAAaT,MAAMrlB,GAEJ,IAA5BoF,OAAOnO,KAAK4uB,GAAKxtB,OArE7B,0CAsEmB,IAtEnB,QAyEc0tB,EAAYF,EAAG,WAAH,KACZztB,EAAY,GAET+G,EAAQ,EAAG9G,EAAS0tB,EAAU1tB,OA5E/C,aA4EuD8G,EAAQ9G,GA5E/D,oBA+EkB,UAFA2tB,EAAMD,EAAU5mB,KAEK,UAAW6mB,GAAU,YAAaA,EA/EzE,wDAmFkBztB,EAAQ0tB,WAAWD,EAAI,YAE7B5tB,EAAUsD,KAAK,CACXnD,MAAOgC,KAAKqE,MAAc,IAARrG,GAClBC,IAAK+B,KAAKqE,MAA2C,KAApCrG,EAAQ0tB,WAAWD,EAAI,YACxChmB,KAAMtJ,KAAKwvB,YAAYlnB,OAAOgnB,EAAI,UAAU1B,QAAQlB,GAAU,KAC9D5nB,UAzFhB,QA4EuE2D,IA5EvE,iDA6Fe/G,GA7Ff,YAgGQ2K,EAAKtC,KAAK2N,SAAS,QAhG3B,iBAkGchW,EAAY,GAlG1B,mCAuGuC+tB,GAAoBpjB,EAAKc,WAvGhE,qFAuGyBuiB,EAvGzB,SAwG2B9H,yBAAyBjmB,OAAS,OACda,IAA3BmtB,IACAA,EAAyBD,QAEKltB,IAA3BmtB,IACDC,EAAcD,EAAuBlI,+BAA+B/X,MACpEmgB,EAAeF,EAAuBlI,+BAA+B7X,OAC3E8Y,OACuBlmB,IAAnBkmB,GAAgCA,EAAe/mB,OAASkuB,EAAeD,EAAc,EAC/E,IAAIjH,kBAAkBiH,EAAcC,EAAe,GACnDnH,EACJoH,EAAYH,EAAuBG,UAAUpH,GACnDoE,GAAapd,MAAQogB,EAAUpgB,MAC/Bod,GAAald,OAASkgB,EAAUlgB,OAChBkd,GAAa5b,WAAW,MAChC6e,aAAaD,EAAW,EAAG,GACnCpuB,EAAUsD,KAAK,CACXnD,MAAK,UACD8tB,EAAuB/H,yBAAyB,GAAGqC,OAAOW,sBAAwB,UADjF,QACuF,EAC5F9oB,IAAK4tB,EAAW7H,qBAAqBoC,OAAOW,sBAAwB,GACpEthB,KAAM,GACN+P,UAAW,CACP1I,QAASmc,GAAalc,UAAU,aAChCkC,MAAO,CACHpD,MAAOogB,EAAUpgB,MACjBE,OAAQkgB,EAAUlgB,QAEtB0J,OAAQ,CACJ5J,MAAOigB,EAAuBlI,+BAA+B/X,MAC7DE,OAAQ+f,EAAuBlI,+BAA+B7X,SAGtE9K,UAGJ6qB,OAAyBntB,GA3IzC,6UA+Ied,GA/If,cAkJU,IAAI4E,MAAM,oCAlJpB,6E,8EAqJA,SAAQgoB,GACJ,IAAM0B,EAAS1B,EAAKzhB,QAAQ,SACtBojB,EAAS3B,EAAKzhB,QAAQ,SACxBqjB,EAAU,GAEd,OAAIF,GAAU,GACVE,EAAU5B,EAAK1hB,UAAU,EAAGojB,GAAU,SAAW1B,EAAK1hB,UAAUojB,EAAS,GAAK,SACvEhwB,KAAKuuB,QAAQ2B,IACbD,GAAU,GACjBC,EAAU5B,EAAK1hB,UAAU,EAAGqjB,GAAU,SAAW3B,EAAK1hB,UAAUqjB,EAAS,GAAK,SACvEjwB,KAAKuuB,QAAQ2B,IAGjB5B,I,yBAGX,SAAYhlB,GAER,OADAujB,GAAcsD,UAAY7mB,EACiB,IAApCujB,GAAcuD,WAAWzuB,OAAe,GAAKkrB,GAAcuD,WAAW,GAAGC,Y,wBAGpF,WAKI,YAJuB7tB,IAAnBxC,KAAKgtB,YACLhtB,KAAKgtB,UAAY,IAAIsD,aAAU,CAAEC,kBAAkB,KAGhDvwB,KAAKgtB,Y,4BAGhB,SAAetrB,GACX,IAAM4rB,EAAgB5rB,EAAUkN,KAAI,SAAC4hB,GACjC,MAAO,CACHnpB,KAAM,MACNF,KAAM,CACFtF,MAAO2uB,EAAa3uB,MACpBC,IAAK0uB,EAAa1uB,IAClBwH,KAAMknB,EAAalnB,UAI/B,OAAOmnB,aAASnD,EAAO,CAAEoD,OAAQ,U,+DAGrC,WAAiBzD,GAAjB,SAAAnnB,EAAA,kEACW9F,KADX,SACqCA,KAAK0B,UAAUurB,GADpD,iDACgB0D,eADhB,iE,2NC3LEzY,GAAYnC,aAAsC,SAACoC,GAAD,MAAY,CAChEc,MAAO,CACHS,SAAU,GAEdkX,WAAY,CACRC,YAAa1Y,EAAMsB,QAAQ,IAE/BqX,OAAQ,CACJC,WAAY5Y,EAAM6Y,YAAYC,OAAO,CAAC,SAAU,SAAU,CACtDC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASC,iBAG7CC,YAAa,CACT5hB,MAAO,gBAAG6hB,EAAH,EAAGA,YAAH,4BAAoCA,EAApC,QACPR,WAAY5Y,EAAM6Y,YAAYC,OAAO,CAAC,SAAU,SAAU,CACtDC,OAAQ/Y,EAAM6Y,YAAYE,OAAOM,QACjCJ,SAAUjZ,EAAM6Y,YAAYI,SAASK,iBAEzCZ,YAAa,qBAAGU,cAEpBG,kBAAmB,CACf5X,UAAW,YACXpK,MAAO,GACPoL,QAAS,GACTiW,WAAY5Y,EAAM6Y,YAAYC,OAAO,CAAC,YAAa,UAAW,SAAU,CACpEC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASC,iBAG7CM,uBAAwB,CACpB7X,UAAW,YACXpK,MAAO,EACPoL,QAAS,EACTiW,WAAY5Y,EAAM6Y,YAAYC,OAAO,CAAC,YAAa,UAAW,SAAU,CACpEC,OAAQ/Y,EAAM6Y,YAAYE,OAAOM,QACjCJ,SAAUjZ,EAAM6Y,YAAYI,SAASK,kBAG7CG,KAAM,CACFpnB,QAAS,YAYXqnB,GAA8B9b,aAAyD,SAACoC,GAAD,MAAY,CACrG2Z,QAAS,kBAAe,CACpBtnB,QADK,EAAGunB,KACQ,QAAU,aAIlC,SAASC,GAAT,GAAiF,IAAnDD,EAAkD,EAAlDA,KAASE,EAAyC,mBACtEzb,EAAUqb,GAA4B,CAAEE,KAAMA,IACpD,OAAO,cAACrX,GAAA,EAAD,aAASlE,QAASA,GAAayb,IAG3B,SAASC,GAAT,GAUD,IAAD,EATTX,EASS,EATTA,YACAY,EAQS,EARTA,WACAC,EAOS,EAPTA,OACAnZ,EAMS,EANTA,MACAoZ,EAKS,EALTA,cACArW,EAIS,EAJTA,eACAsW,EAGS,EAHTA,kBACAC,EAES,EAFTA,eACAC,EACS,EADTA,6BAEMhc,EAAU0B,GAAU,CAAEqZ,gBAC5B,EAAgCnyB,oBAAkB,GAAlD,mBAAOqzB,EAAP,KAAiBC,EAAjB,KACA,EAAwCtzB,qBAAxC,mBAAOuzB,EAAP,KAAqBC,EAArB,KACMC,OACgBrwB,IAAlB6vB,QAAuF7vB,IAAxD6vB,EAActK,MAAK,SAACoF,GAAD,OAAQA,EAAEpjB,KAAK2N,SAAS,WAExEob,EAAmBtb,uBACrB,SAAC3W,GACOgyB,GACAD,EAAgB/xB,EAAMkyB,eACtBL,GAAY,IAEZH,MAGR,CAACA,EAAgBM,IAGfG,EAAkBxb,uBAAY,WAChCkb,GAAY,KACb,IAEGO,EAA0Bzb,uBAAY,WACxCkb,GAAY,GACZH,MACD,CAACA,IAEEW,EAAmC1b,uBAAY,WACjDkb,GAAY,GACZF,MACD,CAACA,IAEJ,OACI,qCACKK,GACG,cAACM,GAAA,EAAD,CACIzc,KAAM+b,EACNW,SAAUT,EACV/b,QAASoc,EACTK,aAAc,CACVC,SAAU,SACVC,WAAY,UANpB,SASI,eAAC,KAAD,WACI,cAACC,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAASuR,EAA1B,wBAGA,cAACO,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAASwR,EAA1B,4CAMZ,cAACQ,GAAA,EAAD,CACIxd,SAAS,SACTmF,UAAW,EACXtE,UAAW4c,YAAKnd,EAAQsa,QAAT,mBACVta,EAAQ8a,YAAca,GADZ,cAEV3b,EAAQob,KAAOQ,GAFL,IAHnB,SAQI,eAACtQ,GAAA,EAAD,WACI,cAACpH,GAAA,EAAD,CACIkZ,qBAAsBf,EACtBgB,qBAAsBhB,EACtBiB,qBAAsBjB,EACtB5Z,MAAM,aAJV,SAMI,cAACwI,GAAA,EAAD,CACIE,KAAK,QACLQ,MAAM,UACNpL,UAAWP,EAAQoa,WACnBlP,QAASoR,EAJb,SAMI,cAAC,KAAD,QAGR,cAAC/Q,GAAA,EAAD,CAAYC,QAAQ,KAAKjL,UAAWP,EAAQyC,MAA5C,SACKA,IAEL,cAACyB,GAAA,EAAD,CAASzB,MAAM,SAAf,SACI,cAACwI,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACN4R,UAAU,IACVtpB,KAAK,uDACLpE,OAAO,SACP2tB,IAAI,aANR,SAQI,cAAC,KAAD,QAGR,cAACtZ,GAAA,EAAD,CAASzB,MAAM,eAAf,SACI,cAACwI,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACN4R,UAAU,IACVtpB,KAAK,mDACLpE,OAAO,SACP2tB,IAAI,aANR,SAQI,cAAC,KAAD,QAGR,cAACtZ,GAAA,EAAD,CAASzB,MAAM,OAAf,SACI,cAACwI,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACN4R,UAAU,IACVtpB,KAAK,kDACLpE,OAAO,SACP2tB,IAAI,aANR,SAQI,cAAC,KAAD,QAGR,cAACtZ,GAAA,EAAD,CAASzB,MAAM,WAAf,SACI,cAACwI,GAAA,EAAD,CAAYE,KAAK,MAAMQ,MAAM,UAAUT,QAAS1F,EAAhD,SACI,cAAC,KAAD,QAGR,cAACgW,GAAD,CAAoB/Y,MAAM,iBAAiB8Y,MAAOI,EAAlD,SACI,cAAC1Q,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACN,aAAW,OACXpL,UAAW4c,YAAKnd,EAAQkb,kBAAT,eACVlb,EAAQmb,uBAAyBQ,IAEtCzQ,QAAS4Q,EAPb,SASI,cAAC,KAAD,gB,IClOP2B,G,WAYjB,aAAe,IAAD,gCAXdC,UAWc,OAVdC,eAUc,OARGC,wBAQH,OAPGC,qBAOH,OANGC,oBAMH,OALGpmB,QAKH,OAHNqmB,oBAGM,OAFNC,kBAAmB,EAGvBx0B,KAAKo0B,mBAAqB,GAC1Bp0B,KAAKq0B,gBAAkB,GACvBr0B,KAAKk0B,KAAO,GACZl0B,KAAKm0B,WAAY,EACjBn0B,KAAKs0B,eAAiB,IAAI3uB,SAAQ,SAACC,EAASC,GACxC,EAAK0uB,eAAiB3uB,KAE1B5F,KAAKs0B,eAAenkB,MAAK,kBAAO,EAAKgkB,WAAY,KACjDn0B,KAAKkO,GAAKumB,cAEVh1B,OAAOG,iBAAiB,WAAW,SAACiB,GAChC,GAAIA,EAAMgN,SAAWpO,QAIK,kCAAtBoB,EAAMsG,KAAKutB,QACP7zB,EAAMsG,KAAKM,QAAS,CACpB,GAAmC,SAA/B5G,EAAMsG,KAAKM,QAAQV,QAAoB,CACvC,IAAM4tB,EAAc9zB,EAAMsG,KAC1B,EAAK+sB,KAAOS,EAAYltB,QAAQysB,KAFO,oBAIzB,EAAKG,iBAJoB,IAIvC,2BAAoC,EAChChP,EADgC,SAC9B,EAAK6O,OAL4B,8BAsBvC,YAdIS,EAAYltB,QAAQmtB,cACpBn1B,OAAOqH,YACH,CACI4tB,OAAQ,cACRjtB,QAAS,CACLV,QAAS,UACTmH,GAAI,EAAKA,GACT2mB,aAAc,EAAKX,OAG3B,MAOZ,GAAmC,YAA/BrzB,EAAMsG,KAAKM,QAAQV,QAEnB,YADA,EAAKwtB,eAAgB1zB,EAAMsG,KAAKM,QAAQoO,SA3BxB,oBA+BN,EAAKue,oBA/BC,IA+BpB,2BAAuC,EACnC/O,EADmC,SACjC,CACEle,KAAMtG,EAAMsG,KAAKM,QACjBqtB,MAAOj0B,EAAMsG,KAAK2tB,MAClBjpB,IAAKhL,EAAMsG,KAAK0E,OAnCJ,mC,kDA2CpC,WAAkB,IAAD,OACR7L,KAAKw0B,mBACNx0B,KAAK+0B,iBACLC,aAAY,kBAAM,EAAKD,mBAAkB,KACzC/0B,KAAKw0B,kBAAmB,K,4BAIhC,WACI/0B,OAAOqH,YACH,CACI4tB,OAAQ,cACRjtB,QAAS,CACLV,QAAS,YACTmH,GAAIlO,KAAKkO,GACT2mB,aAAc70B,KAAKk0B,OAG3B,O,2BAIR,WACIz0B,OAAOqH,YAAY,CACf4tB,OAAQ,cACRjtB,QAAS,CACLV,QAAS,gC,qEAKrB,sBAAAjB,EAAA,sEACiB9F,KAAKs0B,eADtB,wF,+EAIA,SAAY7sB,EAAkBqtB,EAAejpB,GACzC,IAAM9E,EAA8C,CAChD2tB,OAAQ,cACRjtB,QAASA,EACTqtB,MAAOA,EACPjpB,IAAKA,GAETpM,OAAOqH,YAAYC,EAAS,O,4BAGhC,SAAeU,GAAmB,IAAD,gBACXzH,KAAKk0B,MADM,IAC7B,2BAA6B,CAAC,IAAnBe,EAAkB,QACnBluB,EAA8C,CAChD2tB,OAAQ,cACRjtB,QAASA,EACTqtB,MAAOG,EAAI/mB,GACXrC,IAAKopB,EAAIppB,KAEbpM,OAAOqH,YAAYC,EAAS,MARH,iC,2BAYjC,SAAc8f,GACV7mB,KAAKq0B,gBAAgBrvB,KAAK6hB,K,6BAG9B,SAAgBA,GACZ7mB,KAAKk1B,QAAQrO,EAAU7mB,KAAKq0B,mB,uBAGhC,SAAUxN,GACN7mB,KAAKo0B,mBAAmBpvB,KAAK6hB,K,yBAGjC,SAAYA,GACR7mB,KAAKk1B,QAAQrO,EAAU7mB,KAAKo0B,sB,qBAGhC,SAAQvN,EAAoBsO,GACxB,IAAK,IAAIpyB,EAAIoyB,EAAUxzB,OAAS,EAAGoB,GAAK,IAAKA,EACzC,GAAI8jB,IAAasO,EAAUpyB,GAAI,CAC3BoyB,EAAUC,OAAOryB,EAAG,GACpB,W,KC/GT,SAASsyB,GAAT,GAQY,IAPfC,EAOc,EAPdA,cACAC,EAMc,EANdA,aACAC,EAKc,EALdA,yBACAC,EAIc,EAJdA,qBACAC,EAGc,EAHdA,0BACAC,EAEc,EAFdA,wBACAC,EACc,EADdA,mBAEMC,EAAc,CAChB1T,MAAOmT,EACPQ,SAAUjzB,OAAO0yB,IAGrB,GAAIC,EAA2B,EAAG,CAC9B,IAAMO,EAAYP,EACZrT,EAAQsT,EACdI,EAAM,WAAN,cAEWE,EAFX,cAE0B5T,EAF1B,iBAEwC4T,EAFxC,cAEuD5T,EAFvD,iBAEqE4T,EAFrE,cAEoF5T,EAFpF,iBAEkG4T,EAFlG,cAEiH5T,GAGrH,GAAIuT,EAA4B,EAAG,CAC/B,IAAMM,EAAUN,EAEhB,EA5CR,SAAkBO,GACd,IAAIzvB,EAAS,4CAA4C0vB,KAAKD,GAC9D,MAAO,CACH7M,EAAG+M,SAAS3vB,EAAO,GAAI,IACvB6iB,EAAG8M,SAAS3vB,EAAO,GAAI,IACvB8iB,EAAG6M,SAAS3vB,EAAO,GAAI,KAuCH4vB,CADNT,GACNvM,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,EACduM,EAAM,gBAAN,eAAoCzM,EAApC,aAA0CC,EAA1C,aAAgDC,EAAhD,aAAsD0M,EAAtD,KAOJ,OAJIJ,GAAsBA,EAAmBj0B,OAAS,IAClDk0B,EAAM,WAAiBD,GAGpBC,EAGJ,SAASQ,GACZC,EACAC,GAEO,IADPC,IACM,yDACN,GAAIF,EAAe,EACf,OAAOD,GAAoB,EAAGE,GAIlC,IAAMjc,GADNgc,EAAezyB,KAAKsE,MAAMmuB,IACA,IAEpBG,GADNH,GAAgBA,EAAehc,GAAM,KACT,GAEtBoc,GADNJ,GAAgBA,EAAeG,GAAQ,IACX,GAE5B,GAAIF,GAAqB,KAAS,CAC9B,IAAMI,GAAOL,EAAeI,GAAQ,GAEpC,OAAIF,EACOI,GAAID,GAAO,IAAMC,GAAIF,GAAQ,IAAME,GAAIH,GAAQ,IAAMG,GAAItc,EAAI,GAGjEsc,GAAID,GAAO,IAAMC,GAAIF,GAAQ,IAAME,GAAIH,GAGlD,OAAID,EACOI,GAAIF,GAAQ,IAAME,GAAIH,GAAQ,IAAMG,GAAItc,EAAI,GAGhDsc,GAAIF,GAAQ,IAAME,GAAIH,GAGjC,SAASG,GAAIC,GAA+B,IAApBC,EAAmB,uDAAH,EACpC,OAAOxuB,OAAOuuB,GAAGtuB,SAASuuB,EAAO,K,0ICzE/B5e,GAAYnC,aAA4C,SAACoC,GAAD,MAAY,CACtE4e,OAAQ,CACJrnB,MAAO,qBAAG6hB,aACVyF,WAAY,GAEhBC,YAAa,CACTvnB,MAAO,qBAAG6hB,cAEd2F,aAAa,yBACT1sB,QAAS,OACTmZ,WAAY,SACZzN,SAAU,SACV4E,QAAS3C,EAAMsB,QAAQ,EAAG,IAEvBtB,EAAMgf,OAAOC,SANR,IAORnhB,eAAgB,eAEpBohB,cAAe,CACXnhB,SAAU,WACVtG,OAAQ,OACR0nB,UAAW,OACXC,UAAW,UAEfC,SAAU,CACN,UAAW,CACPzc,gBAAiB5C,EAAM6C,QAAQpF,OAAO6hB,QAG9CC,gBAAiB,CACbC,YAAa,EACbC,aAAc,GAElBC,iBAAkB,CACdC,SAAU,IAEdC,WAAY,CACRvtB,QAAS,OACTyL,eAAgB,SAChByN,cAAe,SACfE,UAAW,SACXhU,OAAQ,OACRkL,QAAS,IAEbxR,KAAM,CACFoQ,SAAU,GAEdse,UAAW,CACPte,SAAU,EACVyI,MAAOhK,EAAM6C,QAAQ1R,KAAK2uB,WAE9BnwB,UAAW,CACP8vB,aAAc,GACdD,YAAa,GACbxV,MAAOhK,EAAM6C,QAAQ1R,KAAK2uB,eAelC,SAASC,GAAT,GAA+G,IAA/FxhB,EAA8F,EAA9FA,KAAM0c,EAAwF,EAAxFA,SAAUxc,EAA8E,EAA9EA,QAASuhB,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,gBAAiBC,EAA6B,EAA7BA,SAAUzV,EAAmB,EAAnBA,KACjF0V,EAAa/gB,uBAAY,WAC3B0J,UAAUC,UAAUqX,UAAU3V,EAAMvZ,MACpCsN,MACD,CAACiM,EAAMjM,IAEJ6hB,EAAejhB,uBAAY,WAC7B2gB,EAAStV,GACTjM,MACD,CAACiM,EAAMsV,EAAUvhB,IAEd8hB,EAAkBlhB,uBAAY,WAChC4gB,EAAYvV,GACZjM,MACD,CAACiM,EAAMuV,EAAaxhB,IAEjB+hB,EAAsBnhB,uBAAY,WACpC6gB,EAAgBxV,GAChBjM,MACD,CAACiM,EAAMwV,EAAiBzhB,IAErBgiB,EAAephB,uBAAY,WAC7B8gB,EAASzV,GACTjM,MACD,CAACiM,EAAMyV,EAAU1hB,IAEpB,OAAKiM,EAKD,cAACsQ,GAAA,EAAD,CACIvR,qBAAqB,EACrBlL,KAAMA,EACN0c,SAAUA,EACVxc,QAASA,EACTyc,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBsF,gBAAiB,CACbvF,SAAU,MACVC,WAAY,SAXpB,SAcI,eAAC,KAAD,WACI,cAACC,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAAS6W,EAA1B,SACI,cAACO,GAAA,EAAD,CAAcC,uBAAwB,CAAE/W,QAAS,SAAWgX,QAAQ,WAExE,cAACxF,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAAS+W,EAA1B,SACI,cAACK,GAAA,EAAD,CAAcC,uBAAwB,CAAE/W,QAAS,SAAWgX,QAAQ,eAEtEnW,EAAKoW,WAAapW,EAAKqW,WAAarW,EAAKlX,QACvC,cAAC6nB,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAASgX,EAA1B,SACI,cAACI,GAAA,EAAD,CAAcC,uBAAwB,CAAE/W,QAAS,SAAWgX,QAAQ,sBAG1EnW,EAAKoW,WAAapW,EAAK/P,QACrB,cAAC0gB,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAASiX,EAA1B,SACI,cAACG,GAAA,EAAD,CAAcC,uBAAwB,CAAE/W,QAAS,SAAWgX,QAAQ,qBAG5E,cAACxF,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAASkX,EAA1B,SACI,cAACE,GAAA,EAAD,CAAcC,uBAAwB,CAAE/W,QAAS,SAAWgX,QAAQ,kBApCzE,KA2CA,SAASG,GAAY5iB,GAChC,IA8BIkN,EA9BE6U,EAAW/hB,EAAM+hB,SACjB9hB,EAAU0B,GAAU3B,GACpB6iB,EAA4B5hB,uBAAY,SAACsH,GACvCA,GACAA,EAAQua,mBAEb,IACH,EAAgCj6B,qBAAhC,mBAAOk6B,EAAP,KAAiBC,EAAjB,KACA,EAAgCn6B,oBAAkB,GAAlD,mBAAOqzB,EAAP,KAAiBC,EAAjB,KACA,EAAwCtzB,qBAAxC,mBAAOuzB,EAAP,KAAqBC,EAArB,KAEM4G,EAAahiB,uBAAY,SAACtR,EAAqB2c,GACjD0W,EAAY1W,GACZ6P,GAAY,GACZE,EAAgB1sB,EAAE6sB,iBACnB,IAEG0G,EAAmBjiB,uBAAY,WACjC+hB,OAAY/2B,GACZkwB,GAAY,GACZE,OAAgBpwB,KACjB,IAEGo2B,EAAephB,uBACjB,SAACqL,GACGyV,EAASzV,KAEb,CAACyV,IAkGL,OA7FI/hB,EAAMmjB,MAAM/3B,OAAS,EAAI,WACzB,IAKIg4B,EANoB,EAClBD,EAAQ,GACVE,EAAmB,KACnB72B,EAAI,EACF82B,EAA+C,GACjDC,EAAuD,GALnC,cAQLvjB,EAAMmjB,OARD,yBAQb7W,EARa,QASpB,GAAyB,OAArB+W,GAA6BA,IAAqB/W,EAAK9Y,KAAM,CAEzD8Y,EAAK9Y,QAAQ8vB,EACbA,EAAiBhX,EAAK9Y,QAEtB8vB,EAAiBhX,EAAK9Y,MAAQ,EAGlC,IAAMgwB,EAAMlX,EAAK9Y,KAAO,IAAM8vB,EAAiBhX,EAAK9Y,MACpD+vB,EAAeC,GAAO,GACtBH,EAAmB/W,EAAK9Y,KACxB4vB,EAAaI,EAEbL,EAAM10B,KACF,eAACwuB,GAAA,EAAD,WACI,cAACzR,GAAA,EAAD,CAAYI,MAAM,gBAAlB,SAAmCU,EAAK9Y,OACxC,cAACiwB,GAAA,EAAD,UACI,cAACtf,GAAA,EAAD,CAASzB,MAAM,kBAAf,SACI,cAACwI,GAAA,EAAD,CACIC,QAAS,kBAAMnL,EAAM0jB,uBAAuBpX,EAAK9Y,KAAM+vB,EAAeC,KACtEpY,KAAK,MAFT,SAII,cAAC,KAAD,YARDoY,IAgBvBD,EAAeH,GAAa30B,KAAK6d,GACjC,IAAMX,EAAMnf,IAAMwT,EAAMmjB,MAAM/3B,OAAS,EAAIy3B,EAA4B,KAEvEM,EAAM10B,KACF,eAACwuB,GAAA,EAAD,CACItR,IAAKA,EAELnL,UAAWP,EAAQghB,SACnBhhB,QAAS,CAAE0jB,QAAS1jB,EAAQkhB,iBAJhC,UAMI,cAACyC,GAAA,EAAD,CAAc3jB,QAAS,CAAER,KAAMQ,EAAQqhB,kBAAvC,SACI,cAACnd,GAAA,EAAD,CAASzB,MAAM,iBAAf,SACI,cAACwI,GAAA,EAAD,CAAYC,QAAS,kBAAMnL,EAAM6jB,OAAOvX,IAAxC,SACI,cAAC,KAAD,CAAUiT,SAAS,gBAI/B,cAACqE,GAAA,EAAD,CAAc3jB,QAAS,CAAER,KAAMQ,EAAQqhB,kBAAvC,SACI,cAACpW,GAAA,EAAD,CAAYC,QAAS,SAACxb,GAAD,OAAOszB,EAAWtzB,EAAG2c,IAA1C,SACI,cAAC,KAAD,CAAciT,SAAS,cAG/B,cAACgD,GAAA,EAAD,CACIE,QACI,eAACtW,GAAA,EAAD,CAAM2X,KAAK,SAAS1X,WAAS,EAA7B,UACI,cAACD,GAAA,EAAD,CAAMG,MAAI,EAAC9L,UAAyB,KAAd8L,EAAKvZ,KAAckN,EAAQwhB,UAAYxhB,EAAQlN,KAArE,SACmB,KAAduZ,EAAKvZ,KAAc,UAAYuZ,EAAKvZ,OAEzC,cAACoZ,GAAA,EAAD,CAAMG,MAAI,EAAC9L,UAAWP,EAAQ1O,UAA9B,SACKuuB,GAAoBxT,EAAKhhB,MAAOghB,EAAKhhB,OAAO,YAvBxDghB,EAAK3U,OA+BhBnL,GApEN,2BAAiC,IART,8BA+ExB0gB,EACI,qBAAK1M,UAAWP,EAAQ6gB,cAAxB,SACI,cAAC,KAAD,UAAOqC,MAjFU,GAqFzBjW,EACI,sBAAK1M,UAAWP,EAAQuhB,WAAxB,UACI,cAAChW,GAAA,EAAD,CAAYC,QAAQ,KAApB,sCACA,cAACD,GAAA,EAAD,CAAYC,QAAQ,UAApB,qDAMR,eAAC,IAAMsY,SAAP,WACI,eAACC,GAAA,EAAD,CACIvY,QAAQ,aACRwY,OAAO,QACP9jB,KAAMH,EAAMG,KACZK,UAAWP,EAAQugB,OACnBvgB,QAAS,CACLikB,MAAOjkB,EAAQygB,aANvB,UASI,qBAAKlgB,UAAWP,EAAQ0gB,aAAxB,SACI,cAACzV,GAAA,EAAD,CAAYC,QAASnL,EAAMK,QAA3B,SACI,cAAC,KAAD,QAGR,cAAC8jB,GAAA,EAAD,IACCjX,KAEL,cAACyU,GAAD,CACIxhB,KAAMH,EAAMG,MAAQ+b,EACpBW,SAAUT,EACV9P,KAAMyW,EACN1iB,QAAS6iB,EACTtB,SAAU5hB,EAAM4hB,SAChBC,YAAa7hB,EAAM6hB,YACnBC,gBAAiB9hB,EAAM8hB,gBACvBC,SAAUM,O,mCCvUpB1gB,GAAYnC,cAA+B,SAACoC,GAAD,MAAY,CACzD+L,WAAY,kBAAuB,CAC/BhO,SAAU,WACVtG,OAFQ,EAAG2T,aAEY,QAAU,qBACjC7T,MAAO,OACP2G,OAAQ,IACR7L,QAAS,OACTkZ,cAAe,SACfzN,eAAgB,SAChB0N,WAAY,SACZ7I,QAAS,GACT8I,UAAW,WAEf+W,WAAY,CACR/gB,OAAQ,eAgBD,SAASghB,GAAT,GAQJ,IAPPvvB,EAOM,EAPNA,UACAwvB,EAMM,EANNA,uBACAC,EAKM,EALNA,aACA1W,EAIM,EAJNA,QACAd,EAGM,EAHNA,SACAC,EAEM,EAFNA,aACAgP,EACM,EADNA,eAEM/b,EAAU0B,GAAU,CAAEqL,iBAC5B,EAAkEnkB,qBAAlE,mBAAO27B,EAAP,KAAkCC,EAAlC,KAEAvkB,qBAAU,WAAM,4CACZ,sBAAA3Q,EAAA,kEACIk1B,EADJ,SACuC3vB,EAAU4vB,mBADjD,8EADY,uBAAC,WAAD,wBAKZC,KACD,CAAC7vB,IAEJ,IAAM8vB,EAA2BJ,GAA6BK,KAAGP,EAAwBE,GACnFM,GAAyBN,EAE/B,OACI,cAAC,IAAMT,SAAP,UACI,cAACjW,GAAA,EAAD,CAAMpN,IAAKmN,IAAYd,EAAU3M,QAAS,IAA1C,SACI,qBAAKI,UAAWP,EAAQ0N,WAAxB,SACI,eAACnC,GAAA,EAAD,CAAYC,QAAQ,KAApB,uDAC+C,IAC3C,cAACsZ,GAAA,EAAD,CACIj1B,OAAO,IACP0Q,UAAWP,EAAQmkB,WACnBjZ,QAAS6Q,EACTpQ,MAAM,YACN4R,UAAU,QALd,oBAFJ,IAYI,uBACCsH,GACG,+CACgB,IACZ,cAACC,GAAA,EAAD,CAAMnZ,MAAM,YAAY9b,OAAO,SAAS2tB,IAAI,aAAavpB,KAAMqwB,EAA/D,8BAEQ,IAJZ,6CAQHK,GACG,gDACiB,IACb,cAACG,GAAA,EAAD,CAAMnZ,MAAM,YAAY9b,OAAO,SAAS2tB,IAAI,aAAavpB,KAAMqwB,EAA/D,oBAEQ,IAJZ,4B,IC1FPS,G,WAKjB,WAAYC,GAAoB,yBAJxBC,aAIuB,OAF/BC,eAE+B,EAC3B17B,KAAKy7B,QAAU,IAAIE,iBAAiBH,GACpC,IAAMI,EAAO57B,KACbA,KAAKy7B,QAAQx0B,UAAY,SAACpG,GAAW,IAAD,EAChC,UAAA+6B,EAAKF,iBAAL,cAAAE,EAAiB/6B,I,+CAIzB,SAAY4G,GAAmB,IAAD,EAC1B,UAAAzH,KAAKy7B,eAAL,SAAc30B,YAAYW,K,mBAG9B,WAAS,IAAD,EACJ,UAAAzH,KAAKy7B,eAAL,SAAcI,QACd77B,KAAKy7B,aAAUj5B,M,KClBFs5B,G,WAQjB,WAAYhH,EAAejpB,EAAaR,GAA6B,IAAD,gCAPnDypB,WAOmD,OANnDjpB,SAMmD,OALnDR,eAKmD,OAJnD0wB,cAImD,OAFpEL,eAEoE,EAChE17B,KAAK80B,MAAQA,EACb90B,KAAK6L,IAAMA,EACX7L,KAAK+7B,SAAW,SAACt0B,GAC0D,IAAD,EAAlEA,EAAQqtB,QAAUA,GAAWrtB,EAAQoE,KAAOpE,EAAQoE,MAAQA,IAC5D,YAAK6vB,iBAAL,gBAAiB,CACbv0B,KAAMM,EAAQN,SAK1BkE,EAAU2wB,UAAUh8B,KAAK+7B,UACzB/7B,KAAKqL,UAAYA,E,+CAGrB,SAAY5D,GACRzH,KAAKqL,UAAU4wB,YAAYx0B,EAASzH,KAAK80B,MAAO90B,KAAK6L,O,mBAGzD,WACI7L,KAAKqL,UAAU6wB,YAAYl8B,KAAK+7B,c,KChCnBI,G,WAKjB,aAAe,yBAJPjX,iBAIM,OAHNkX,aAGM,OAFN3N,eAEM,EACVzuB,KAAKklB,YAAc,EACnBllB,KAAKo8B,SAAU,E,wCAGnB,SAAKt4B,GACD,OAAI9D,KAAKo8B,QACEv4B,KAAKwF,IAAIvF,EAAK9D,KAAKklB,YAAcvF,KAAKhd,MAAQ3C,KAAKyuB,WAGvD5qB,KAAKwF,IAAIvF,EAAK9D,KAAKklB,e,kBAG9B,WACSllB,KAAKo8B,UAIVp8B,KAAKo8B,SAAU,EACfp8B,KAAKklB,aAAevF,KAAKhd,MAAQ3C,KAAKyuB,a,mBAG1C,WACIzuB,KAAKyuB,UAAY9O,KAAKhd,MACtB3C,KAAKo8B,SAAU,I,qBAGnB,SAAQ35B,GACAzC,KAAKo8B,SACLp8B,KAAKyuB,UAAY9O,KAAKhd,MACtB3C,KAAKklB,YAAcziB,GAEnBzC,KAAKklB,YAAcziB,I,sBAI3B,SAASqB,GACL,OAAe,IAARA,EAAY,EAAID,KAAKwF,IAAI,EAAGrJ,KAAKyC,KAAKqB,GAAOA,O,+VCbtDu4B,GAAmBtmB,aAAW,SAACoC,GAAD,MAAY,CAC5CwK,UAAW,CACPzM,SAAU,WACVomB,KAAM,MACN5sB,MAAO,MACP6sB,OAAQ,EACRnmB,cAAe,OACf+L,MAAO,QAEXqa,gBAAiB,CACb9Y,cAAe,OAEnB+Y,YAAa,CACTta,MAAO,OACP3X,QAAS,OACTkZ,cAAe,SACfzN,eAAgB,SAChBrG,OAAQ,OACRgK,OAAQ,UACRkc,SAAU,GACV4G,WAAY,IAEhBC,YAAa,CACT/sB,OAAQ,OACRpF,QAAS,OACTkZ,cAAe,SACfzN,eAAgB,SAChB6f,SAAU,GACV4G,WAAY,GACZhtB,MAAO,IACPyS,MAAO,OACP/L,cAAe,QAEnBwmB,0BAA2B,CACvB7L,WAAY5Y,EAAM6Y,YAAYC,OAAO,SAAU,CAC3CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASyL,QAEzChM,YAAa,EACbza,cAAe,QAEnB0mB,2BAA4B,CACxB/L,WAAY5Y,EAAM6Y,YAAYC,OAAO,SAAU,CAC3CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASyL,QAEzChM,YAAa,EACbza,cAAe,QAEnB2mB,kBAAmB,CACfhM,WAAY5Y,EAAM6Y,YAAYC,OAAO,QAAS,CAC1CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASyL,QAEzCntB,MAAO,EACP0G,cAAe,QAEnB4mB,iBAAkB,CACdjM,WAAY5Y,EAAM6Y,YAAYC,OAAO,QAAS,CAC1CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOM,QACjCJ,SAAUjZ,EAAM6Y,YAAYI,SAASyL,QAEzCntB,MAAO,IACP0G,cAAe,QAEnB6mB,uBAAwB,CACpBlM,WAAY5Y,EAAM6Y,YAAYC,OAAO,aAAc,CAC/CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASyL,QAEzC7G,QAAS,EACT5f,cAAe,QAEnB8mB,sBAAuB,CACnBnM,WAAY5Y,EAAM6Y,YAAYC,OAAO,aAAc,CAC/CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOM,QACjCJ,SAAUjZ,EAAM6Y,YAAYI,SAASyL,QAEzC7G,QAAS,EACT5f,cAAe,QAEnB+mB,aAAc,CACVjZ,WAAY,0FACZhO,SAAU,WACVomB,KAAM,QACN5sB,MAAO,OACP2G,OAAQ,IAEZod,OAAQ,CACJrd,cAAe,QAEnBgnB,eAAgB,CACZjb,MAAO,wBACP/L,cAAe,QAEnBinB,kBAAmB,CACflb,MAAO,2BACP/L,cAAe,QAEnBknB,SAAU,CACNC,OAAQ,GAEZC,UAAW,CACPpnB,cAAe,OACf+L,MAAO,QAEXsb,cAAe,CACXrnB,cAAe,OACf0E,QAAS,OAIX4iB,GAAuB3nB,aAAW,SAACoC,GAAD,MAAY,CAChDnC,KAAM,CACFpG,OAAQ,IAEZ+S,UAAW,CACP/S,OAAQ,GACRwG,cAAe,OACf5L,QAAS,OACTyL,eAAgB,SAChByN,cAAe,SACfxN,SAAU,WACVxG,MAAO,oBACPgtB,WAAY,IAEhBiB,mBAAoB,CAChBtnB,OAAQ,EACRzG,OAAQ,GACRgK,OAAQ,UACRxD,cAAe,OACfF,SAAU,WACVxG,MAAO,QAEXkuB,cAAe,CACX1Z,WAAY,qBACZxU,MAAO,OACPE,OAAQ,EACRsG,SAAU,YAEd2nB,mBAAoB,CAChB9M,WAAY5Y,EAAM6Y,YAAYC,OAAO,SAAU,CAC3CC,OAAQ/Y,EAAM6Y,YAAYE,OAAO4M,UACjC1M,SAAU,KAEdxhB,OAAQ,GAEZmuB,KAAM,CACF7Z,WAAY,6CACZtU,OAAQ,QAEZouB,gBAAiB,CACb9nB,SAAU,WACV1L,QAAS,OACTyL,eAAgB,SAChByN,cAAe,SACf9T,OAAQ,OACR2sB,OAAQ,GAEZ0B,OAAQ,CACJC,aAAc,MACdxuB,MAAO,GACPE,OAAQ,GACRomB,QAAS,EACTsG,MAAO,EACPpY,WAAY,QACZhO,SAAU,YAEdioB,SAAU,CACNnI,QAAS,EACTjF,WAAY5Y,EAAM6Y,YAAYC,OAAO,UAAW,CAC5CC,OAAQ/Y,EAAM6Y,YAAYE,OAAO4M,UACjC1M,SAAUjZ,EAAM6Y,YAAYI,SAASgN,gBAK3CC,GAAe9iB,cAAW,SAACpD,GAAD,MAAY,CACxCnC,KAAM,CACFmM,MAAO,QACPmc,cAAe,UAEnBC,MAAO,CACHxjB,gBAAiB,QACjBoH,MAAO,QACP,UAAW,CACPqc,UAAW,WAEf,oBAAqB,CACjBA,UAAW,6CAGnBC,OAAQ,CACJtc,MAAO,YAhBM5G,CAkBjBuH,MAEJ,SAAS4b,GAAYpI,GACjB,IAAMvuB,EAAUlE,KAAKqE,MAAMouB,EAAe,KACpCluB,EAAUvE,KAAKqE,MAAMH,EAAU,IAC/B42B,EAAkB52B,EAAU,GAClC,OAAOO,OAAOF,GAAW,IAAME,OAAOq2B,GAAiBp2B,SAAS,EAAG,KAavE,SAASq2B,GAAT,GAA2D,IAApCC,EAAmC,EAAnCA,OAAQzpB,EAA2B,EAA3BA,MACrBoB,EAAUknB,KAChB,EAAkCt+B,oBAAS,GAA3C,mBAAO0/B,EAAP,KAAkBC,EAAlB,KACMC,EAAeC,iBAAO,MAEtBC,EAAc1nB,uBAChB,SAACtR,GACG,IAAMi5B,EAAOj5B,EAAE6sB,cAAchU,wBAEvBrP,EAAQyvB,EAAKC,MAAQD,EAAK7C,KAAO,GACjCgB,EAAWz5B,KAAKwF,IAAI,EAAGxF,KAAKC,IAAI,GAAIoC,EAAEm5B,MAAQF,EAAK7C,KAAO,IAAM5sB,IACtEmvB,EAAOvB,KAEX,CAACuB,IAGCS,EAAkB9nB,uBAAY,kBAAMunB,GAAa,KAAO,IACxDQ,EAAiB/nB,uBAAY,kBAAMunB,GAAa,KAAQ,IACxDS,EAAgBR,EAAahgB,QA5BvC,SAAsBF,GAClB,IAAMqgB,EAAOrgB,EAAQC,wBACrB,OAAOogB,EAAKC,MAAQD,EAAK7C,KA0BqBmD,CAAaT,EAAahgB,SAAW5J,EAAS,IAAM,EAC5FsqB,EAAY,CAAEhwB,MAAO8vB,GACrBG,EAAc,CAAEjD,WAAY8C,GAC5BI,EAAyBd,EACzBtoB,EAAQonB,cAAgB,IAAMpnB,EAAQqnB,mBACtCrnB,EAAQonB,cACRiC,EAAkBf,EAAYtoB,EAAQynB,OAAS,IAAMznB,EAAQ2nB,SAAW3nB,EAAQynB,OAEtF,OACI,sBAAKlnB,UAAWP,EAAQR,KAAxB,UACI,qBAAKkM,IAAK8c,EAAcjoB,UAAWP,EAAQmM,UAA3C,SACI,sBAAK5L,UAAW6oB,EAAhB,UACI,qBAAK7oB,UAAWP,EAAQunB,KAAMxzB,MAAOm1B,IACrC,qBAAK3oB,UAAWP,EAAQwnB,gBAAxB,SACI,qBAAKjnB,UAAW8oB,EAAiBt1B,MAAOo1B,WAIpD,qBACI5oB,UAAWP,EAAQmnB,mBACnBjc,QAASwd,EACTY,YAAaR,EACbS,WAAYR,OAe5B,SAASS,GAAT,GAO6B,IANzBtpB,EAMwB,EANxBA,KACA0c,EAKwB,EALxBA,SACAplB,EAIwB,EAJxBA,YACAiyB,EAGwB,EAHxBA,mBACAC,EAEwB,EAFxBA,qBACAtpB,EACwB,EADxBA,QAEA,IAAK5I,GAAsC,IAAvBA,EAAYrM,OAC5B,OAAO,KAGX,IAAMw+B,EAAOnyB,EAAYY,KAAI,SAACX,GAC1B,OACI,eAACulB,GAAA,EAAD,CAEI4M,SAAUnyB,EAAEC,KAAO+xB,EACnBxM,QAAM,EACN/R,QAAS,kBAAMwe,EAAqBjyB,EAAEC,KAJ1C,UAMKD,EAAEoyB,SANP,IAMkBpyB,EAAEkM,QALXlM,EAAEC,OAUnB,OACI,8BACI,cAACilB,GAAA,EAAD,CACIvR,qBAAqB,EACrBlL,KAAMA,EACN0c,SAAUA,EACVxc,QAASA,EACTyc,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBsF,gBAAiB,CACbvF,SAAU,SACVC,WAAY,UAXpB,SAcI,cAAC,KAAD,UAAO4M,QAevB,SAASG,GAAT,GAAuG,IAAhF5pB,EAA+E,EAA/EA,KAAM0c,EAAyE,EAAzEA,SAAUxc,EAA+D,EAA/DA,QAASsd,EAAsD,EAAtDA,KAAMqM,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,cAC/D,IAAKtM,GAAwB,IAAhBA,EAAKvyB,OACd,OAAO,KAGX,IAAMw+B,EAAOjM,EAAKtlB,KAAI,SAACX,GACnB,OACI,eAACulB,GAAA,EAAD,CAEI4M,SAAUG,GAAetyB,EAAEC,KAAOqyB,EAAYryB,IAAMD,EAAEpC,MAAQ00B,EAAY10B,IAC1E4nB,QAAM,EACN/R,QAAS,kBAAM8e,EAAcvyB,IAJjC,UAMKA,EAAEC,GANP,IAMYD,EAAEgL,MANd,IAMsBhL,EAAEpC,MALfoC,EAAEC,OAUnB,OACI,8BACI,cAACilB,GAAA,EAAD,CACIvR,qBAAqB,EACrBlL,KAAMA,EACN0c,SAAUA,EACVxc,QAASA,EACTyc,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBsF,gBAAiB,CACbvF,SAAU,SACVC,WAAY,UAXpB,SAcI,cAAC,KAAD,UAAO4M,QAcvB,SAASM,GAAT,GAAyF,IAAhE/pB,EAA+D,EAA/DA,KAAM0c,EAAyD,EAAzDA,SAAUsN,EAA+C,EAA/CA,SAAU9pB,EAAqC,EAArCA,QAASvK,EAA4B,EAA5BA,KACxD,OACI,8BACI,cAAC8mB,GAAA,EAAD,CACIvR,qBAAqB,EACrBlL,KAAMA,EACN0c,SAAUA,EACVxc,QAASA,EACTyc,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBsF,gBAAiB,CACbvF,SAAU,SACVC,WAAY,UAXpB,SAcI,cAAC,KAAD,UACI,eAACC,GAAA,EAAD,CAAUC,QAAM,EAAC/R,QAAS,SAACxb,GAAD,OAAOw6B,KAAjC,oBACYr0B,WAgBhC,SAASs0B,GAAT,GAA6G,IAAjFjqB,EAAgF,EAAhFA,KAAM0c,EAA0E,EAA1EA,SAAUwN,EAAgE,EAAhEA,iBAAkBC,EAA8C,EAA9CA,WAAYjqB,EAAkC,EAAlCA,QACtE,OACI,8BACI,cAACuc,GAAA,EAAD,CACIvR,qBAAqB,EACrBlL,KAAMA,EACN0c,SAAUA,EACVxc,QAASA,EACTyc,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBsF,gBAAiB,CACbvF,SAAU,SACVC,WAAY,UAXpB,SAcI,eAAC,KAAD,WACI,cAACC,GAAA,EAAD,CACI4M,SAAUQ,IAAqB51B,EAASud,OACxCkL,QAAM,EACN/R,QAAS,SAACxb,GAAD,OAAO26B,EAAW71B,EAASud,SAHxC,oBAOA,cAACiL,GAAA,EAAD,CACI4M,SAAUQ,IAAqB51B,EAAS81B,UACxCrN,QAAM,EACN/R,QAAS,SAACxb,GAAD,OAAO26B,EAAW71B,EAAS81B,YAHxC,uBAOA,cAACtN,GAAA,EAAD,CACI4M,SAAUQ,IAAqB51B,EAAS+1B,UACxCtN,QAAM,EACN/R,QAAS,SAACxb,GAAD,OAAO26B,EAAW71B,EAAS+1B,YAHxC,+BAoEL,SAASC,GAAT,GAgDI,IA/CfC,EA+Cc,EA/CdA,MACAC,EA8Cc,EA9CdA,QACAv/B,EA6Cc,EA7CdA,OACAw/B,EA4Cc,EA5CdA,cACAC,EA2Cc,EA3CdA,cACAj4B,EA0Cc,EA1CdA,OACA+2B,EAyCc,EAzCdA,qBACArB,EAwCc,EAxCdA,OACAwC,EAuCc,EAvCdA,iBACAC,EAsCc,EAtCdA,OACAC,EAqCc,EArCdA,QACAn8B,EAoCc,EApCdA,OACAo7B,EAmCc,EAnCdA,cACAgB,EAkCc,EAlCdA,cACAC,EAiCc,EAjCdA,cACAl+B,EAgCc,EAhCdA,eACAm+B,EA+Bc,EA/BdA,eACAC,EA8Bc,EA9BdA,iBACA3vB,EA6Bc,EA7BdA,iBACA4vB,EA4Bc,EA5BdA,aACAhrB,EA2Bc,EA3BdA,QACAirB,EA0Bc,EA1BdA,cACAC,EAyBc,EAzBdA,SACAC,EAwBc,EAxBdA,gBACAlB,EAuBc,EAvBdA,WACAmB,EAsBc,EAtBdA,iBACAC,EAqBc,EArBdA,gBACAC,EAoBc,EApBdA,kBACAjJ,EAmBc,EAnBdA,UACAC,EAkBc,EAlBdA,UACAlrB,EAiBc,EAjBdA,YACAiyB,EAgBc,EAhBdA,mBACA/L,EAec,EAfdA,KACAqM,EAcc,EAddA,YACA4B,EAac,EAbdA,cACAC,EAYc,EAZdA,OACAC,EAWc,EAXdA,eACAC,EAUc,EAVdA,kBACAC,EASc,EATdA,WACAC,EAQc,EARdA,mBACAC,EAOc,EAPdA,gCACAC,EAMc,EANdA,qBACAC,EAKc,EALdA,2BACAC,EAIc,EAJdA,oBACAC,EAGc,EAHdA,yBACAC,EAEc,EAFdA,mBACAC,EACc,EADdA,oBAEMvsB,EAAU6lB,KAChB,EAAwBj9B,oBAAkB,GAA1C,oBAAO2yB,GAAP,MAAaiR,GAAb,MACA,GAA4D5jC,oBAAkB,GAA9E,qBAAO6jC,GAAP,MAA+BC,GAA/B,MACA,GAAoE9jC,qBAApE,qBAAO+jC,GAAP,MAAmCC,GAAnC,MACA,GAA8ChkC,oBAAkB,GAAhE,qBAAOikC,GAAP,MAAwBC,GAAxB,MACA,GAAsDlkC,qBAAtD,qBAAOmkC,GAAP,MAA4BC,GAA5B,MACA,GAAkDpkC,oBAAkB,GAApE,qBAAOqkC,GAAP,MAA0BC,GAA1B,MACA,GAA0DtkC,qBAA1D,qBAAOukC,GAAP,MAA8BC,GAA9B,MACA,GAAkDxkC,oBAAkB,GAApE,qBAAOykC,GAAP,MAA0BC,GAA1B,MACA,GAA0D1kC,qBAA1D,qBAAO2kC,GAAP,MAA8BC,GAA9B,MACA,GAAwD5kC,oBAAkB,GAA1E,qBAAO6kC,GAAP,MAA6BC,GAA7B,MACA,GAAgE9kC,qBAAhE,qBAAO+kC,GAAP,MAAiCC,GAAjC,MACA,GAA0ChlC,oBAAkB,GAA5D,qBAAOilC,GAAP,MAAsBC,GAAtB,MACA,GAA4BllC,mBAAiB,KAA7C,qBAAOmlC,GAAP,MAAeC,GAAf,MACA,GAAsDplC,mBAAiB,KAAvE,qBAAOqlC,GAAP,MAA4BC,GAA5B,MACMC,GAAuB1F,iBAAc,CAAE1X,EAAG,EAAG0B,EAAG,IAChD2b,GAAuB3F,iBAAetf,KAAKhd,OAC3CkiC,GAAoC5F,iBAAetf,KAAKhd,OACxDmiC,GAAc7F,kBAAgB,GAC9B8F,GAAe9F,kBAAgB,GAC/B+F,GAAiB/F,mBACjBD,GAAeC,iBAAuB,MACtCgG,GAAiBhG,iBAA0B,MACjD,GAAwB7/B,qBAAf8lC,GAAT,qBACMC,GAAc3tB,uBAAY,kBAAM0tB,GAAY,MAAK,IAEjDE,GAAa5tB,uBACf,SAAC8lB,GACGuB,EAAOvB,KAEX,CAACuB,IAGL,SAASS,KACLyF,GAAa/lB,SAAU,EAG3B,SAASugB,KACLwF,GAAa/lB,SAAU,EAG3BvI,qBAAU,WACN,IAAM4uB,EAAcxiC,OAAOmP,EAAiBuyB,QAC5CC,GAAUa,GACV3D,EAAe2D,EAAc,KAEzBA,EAAc,GACdX,GAAuBW,KAE5B,CAACrzB,EAAkB0vB,IAEtBjrB,qBAAU,WACN,IAAM+D,EAAWwa,aAAY,WACzB,IAAIsQ,EAQG,EANH1C,EACA0C,EACI3lB,KAAKhd,MAAQiiC,GAAqB5lB,QAAU,KAC5Cnb,KAAK0hC,IAAIlE,EAAiBriB,QAAQuI,EAAIod,GAAqB3lB,QAAQuI,EAAG,GAClE1jB,KAAK0hC,IAAIlE,EAAiBriB,QAAQiK,EAAI0b,GAAqB3lB,QAAQiK,EAAG,GACtE,IAERqc,EAAW,UACLtG,GAAahgB,SAAWqiB,EAAiBriB,QAAQiK,EAAI+V,GAAahgB,QAAQwmB,UAAY,IACnFP,GAAejmB,SACZqiB,EAAiBriB,QAAQiK,EAAIgc,GAAejmB,QAAQymB,aAAe,UAHpE,UAOfH,EACIA,GACAP,GAAa/lB,SACbgmB,GAAehmB,UAAY7U,SAASu7B,eACpC/lB,KAAKhd,MAAQkiC,GAAkC7lB,QAAU,OAEzC8lB,GAAY9lB,SAC5B4lB,GAAqB5lB,QAAUW,KAAKhd,MACpCqgC,GAAQsC,KACAA,GAAeR,GAAY9lB,SACnCgkB,GAAQsC,GAGZR,GAAY9lB,QAAUsmB,EACtBX,GAAqB3lB,QAAQuI,EAAI8Z,EAAiBriB,QAAQuI,EAC1Dod,GAAqB3lB,QAAQiK,EAAIoY,EAAiBriB,QAAQiK,IAC3D,KACH,OAAO,kBAAM0c,cAAcnrB,MAC5B,CAAC6mB,EAAkBuB,IAEtBnsB,qBAAU,yBAAM6qB,QAAN,IAAMA,OAAN,EAAMA,EAASvP,MAAO,CAACuP,EAAQvP,KAEzCtb,qBAAU,WACN,IAAIkrB,EAqBJ,OAFAliC,OAAOG,iBAAiB,UAAWgmC,GAE5B,WACHnmC,OAAOI,oBAAoB,UAAW+lC,IAlB1C,SAASA,EAAU/kC,GACf,GAAkB,UAAdA,EAAMk5B,KACFiL,GAAehmB,UAAY7U,SAASu7B,cAAe,CACnD,IAAMv8B,EAAStG,OAAOmiC,GAAehmB,QAAQ5J,OAE7C,GAAIvS,OAAOgjC,MAAM18B,GACb,OAGJ5F,EAAwB,IAAT4F,GACf67B,GAAehmB,QAAQ8mB,WAUpC,CAACviC,EAAgBo+B,IAEpB,IAAMoE,GAA2BvuB,uBAAY,SAACtR,GAA2C,IAAD,EAC9E8/B,EAAe9/B,EAAEG,OACvB2/B,EAAaC,kBAAkB,GAAG,UAAAD,EAAa5wB,aAAb,eAAoBzT,SAAU,KACjE,IAEH8U,qBAAU,WACN,IAAM+D,EAAWwa,aAAY,WACzBmQ,OACD,KAEH,OAAO,kBAAMQ,cAAcnrB,MAC5B,CAAC2qB,KAEJ1uB,qBAAU,WACN,GAAIuuB,GAAehmB,QACf,GAAe,IAAX7V,EACA67B,GAAehmB,QAAQ5J,MAAQ,OAC5B,CACH,IAAM8wB,EAAgB/8B,EAAS,IACzBiM,EAAQ8wB,GAAiB,EAAI,IAAMA,EAAcC,QAAQ,GAAK79B,OAAO49B,EAAcC,QAAQ,IACjGnB,GAAehmB,QAAQ5J,MAAQA,EAC/ByvB,GAAkC7lB,QAAUW,KAAKhd,SAG1D,CAACwG,IAEJ,IAAMi9B,GAAiC5uB,uBAAY,WAC/C4rB,QAA8B5gC,GAC9B0gC,IAA0B,KAC3B,IAEGmD,GAAiC7uB,uBAAY,SAACtR,GAChDk9B,GAA8Bl9B,EAAE6sB,eAChCmQ,IAA0B,KAC3B,IAEGoD,GAA2B9uB,uBAC7B,SAACtJ,GACGgyB,EAAqBhyB,GACrBk1B,QAA8B5gC,GAC9B0gC,IAA0B,KAE9B,CAAChD,IAGCqG,GAA0B/uB,uBAAY,WACxCgsB,QAAuBhhC,GACvB8gC,IAAmB,KACpB,IAEGkD,GAA0BhvB,uBAAY,SAACtR,GACzCs9B,GAAuBt9B,EAAE6sB,eACzBuQ,IAAmB,KACpB,IAEGmD,GAAoBjvB,uBACtB,SAACyd,GACgB,OAAbuL,QAAa,IAAbA,KAAgBvL,GAChBuO,QAAuBhhC,GACvB8gC,IAAmB,KAEvB,CAAC9C,IAGCkG,GAA4BlvB,uBAAY,WAC1CosB,QAAyBphC,GACzBkhC,IAAqB,KACtB,IAEGiD,GAA4BnvB,uBAAY,SAACtR,GAC3C09B,GAAyB19B,EAAE6sB,eAC3B2Q,IAAqB,KACtB,IAEGkD,GAAoBpvB,uBAAY,WACrB,OAAbgqB,QAAa,IAAbA,OACAkC,IAAqB,KACtB,CAAClC,IAEEqF,GAA4BrvB,uBAAY,WAC1CwsB,QAAyBxhC,GACzBshC,IAAqB,KACtB,IAEGgD,GAA4BtvB,uBAAY,SAACtR,GAC3C89B,GAAyB99B,EAAE6sB,eAC3B+Q,IAAqB,KACtB,IAEGiD,GAAoBvvB,uBAAY,WACrB,OAAbiqB,QAAa,IAAbA,OACAqC,IAAqB,KACtB,CAACrC,IAEEuF,GAA+BxvB,uBAAY,WAC7C4sB,QAA4B5hC,GAC5B0hC,IAAwB,KACzB,IAEG+C,GAA+BzvB,uBAAY,SAACtR,GAC9Ck+B,GAA4Bl+B,EAAE6sB,eAC9BmR,IAAwB,KACzB,IAEGgD,GAAyB1vB,uBAC3B,SAACsqB,GACa,OAAVjB,QAAU,IAAVA,KAAaiB,GACbsC,QAA4B5hC,GAC5B0hC,IAAwB,KAE5B,CAACrD,IAGCsG,GAAuB3vB,uBAAY,kBAAM8sB,IAAiB,KAAQ,IAClE8C,GAAwB5vB,uBAAY,kBAAM8sB,IAAiB,KAAO,IAElE+C,GAAqB7vB,uBACvB,SAACtR,EAA0BkP,GACF,kBAAVA,IAIXovB,GAAUpvB,GACVssB,EAAetsB,EAAQ,QAE3B,CAACssB,IAGC4F,GAA8B9vB,uBAChC,SAACtR,EAA0BkP,GACF,kBAAVA,IAIPA,EAAQ,GACRsvB,GAAuBtvB,GAG3BpD,EAAiBuyB,OAASnvB,KAE9B,CAACpD,IAGCu1B,GAAqB/vB,uBAAY,WACnCgtB,IAAU,SAACD,GACP,IAAMiD,EAAYjD,EAAS,EAAI,EAAIE,GAEnC,OADA/C,EAAe8F,EAAY,KACpBA,OAEZ,CAAC9F,EAAgB+C,KAEdnH,GAAW2D,EAAM3D,SAAS37B,GAEhC,OACI,eAAC,IAAM24B,SAAP,WACI,cAACjW,GAAA,EAAD,CAAMpN,GAAI8a,GAAMpb,QAAS,IAAzB,SACI,eAAC+L,GAAA,EAAD,CAAMC,WAAS,EAACpY,MAAO,CAAE2L,SAAU,WAAYC,IAAK,GAApD,UACI,cAACuM,GAAA,EAAD,CAAMG,MAAI,EAACtY,MAAO,CAAEmP,SAAU,GAA9B,SACKkoB,GACG,cAACngB,GAAA,EAAD,CACIS,IAAK+iB,GACL9iB,MAAM,UACNpL,UAAWP,EAAQgnB,UACnB9b,QAAS9K,EACTkpB,YAAaR,GACbS,WAAYR,GANhB,SAQI,cAAC,KAAD,QAIZ,eAAC7c,GAAA,EAAD,CAAMG,MAAI,EAAV,UACKggB,GACG,cAACphB,GAAA,EAAD,CACIU,MAAM,UACNpL,UAAW+rB,EAAqBtsB,EAAQgnB,UAAYhnB,EAAQ6mB,kBAC5D3b,QAASqhB,EACTjD,YAAaR,GACbS,WAAYR,GALhB,SAOI,cAAC,KAAD,MAGPkD,GACG,cAAChhB,GAAA,EAAD,CACIU,MAAM,UACNpL,UAAWP,EAAQgnB,UACnB9b,QAASihB,EACT7C,YAAaR,GACbS,WAAYR,GALhB,SAOKmD,EAAuB,cAAC,KAAD,IAAoB,cAAC,KAAD,cAMhE,sBACIxgB,IAAK8c,GACLjoB,UAAWP,EAAQmM,UACnBmd,YAAaR,GACbS,WAAYR,GAJhB,UAMI,cAAClb,GAAA,EAAD,CAAMpN,GAAI8a,GAAMpb,QAAS,IAAzB,SACI,sBAAKI,UAAWP,EAAQ2mB,aAAxB,UACI,cAACyB,GAAD,CAAaC,OAAQuG,GAAYhwB,MAAkB,IAAXkoB,KACxC,eAAC5a,GAAA,EAAD,CAAMC,WAAS,EAAC5L,UAAWP,EAAQinB,cAAe7a,UAAU,MAA5D,UACI,cAACF,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS,kBAAOwf,EAAUK,IAAYn8B,KAAlE,SACK87B,EACG,cAAC,KAAD,CAAWnqB,UAAWP,EAAQid,SAE9B,cAAC,KAAD,CAAe1c,UAAWP,EAAQid,aAI7CoO,GACG,eAACnf,GAAA,EAAD,CACIG,MAAI,EACJid,YAAasH,GACbrH,WAAYoH,GACZpwB,UACIstB,GACM7tB,EAAQomB,0BACRpmB,EAAQsmB,2BAPtB,UAUI,cAACrb,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS6lB,GAArC,SACgB,IAAXhD,GAAe,cAAC,KAAD,IAAoB,cAAC,KAAD,MAExC,cAAClG,GAAD,CACIpmB,SAAUovB,GACVI,kBAAmBH,GACnBlyB,MAAOmvB,GACPmD,aAAc,IACdlxB,QAAS,CACLR,KAAMquB,GAAgB7tB,EAAQwmB,iBAAmBxmB,EAAQumB,kBACzDwB,MAAO8F,GACD7tB,EAAQ0mB,sBACR1mB,EAAQymB,6BAK9B,cAACva,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,sBAAK9L,UAAWP,EAAQimB,YAAxB,UACKiC,GAAYpB,GAAW37B,GAD5B,MACwC+8B,GAAY0C,GAAiBz/B,QAGxEw/B,GACG,cAACze,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAAC8kB,GAAA,EAAD,CACIC,SAAU5C,GACV6C,kBAAkB,EAClB9wB,UAAWP,EAAQmmB,YACnBmL,YAAa,OAAMjlC,OAAO,GAAGsjC,QAAQ,GACrCzkB,QAASqkB,OAIrB,cAACrjB,GAAA,EAAD,CAAMG,MAAI,EAACtY,MAAO,CAAEmP,SAAU,KAC7BuoB,GACG,cAACvf,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASwgB,EAArC,SACI,cAAC,KAAD,CACInrB,UAAWirB,EAAmBxrB,EAAQid,OAASjd,EAAQ4mB,qBAKtEnE,GACG,cAACvW,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASolB,GAArC,SACI,cAAC,KAAD,CAAc/vB,UAAWP,EAAQid,aAI5CyF,GACG,cAACxW,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASilB,GAArC,SACI,cAAC,KAAD,CAAgB5vB,UAAWP,EAAQid,aAI9CzlB,GAAeA,EAAYrM,OAAS,GACjC,cAAC+gB,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS2kB,GAArC,SACI,cAAC,KAAD,CAAgBtvB,UAAWP,EAAQid,aAI9CS,GAAQA,EAAKvyB,OAAS,GACnB,cAAC+gB,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS8kB,GAArC,SACI,cAAC,KAAD,CACIzvB,UAAWwpB,EAAc/pB,EAAQid,OAASjd,EAAQ4mB,qBAKjE2E,GACG,cAACrf,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASulB,GAArC,SACI,cAAC,KAAD,CACIlwB,UAAWgrB,EAAkBvrB,EAAQid,OAASjd,EAAQ4mB,qBAKrE+E,GACG,cAACzf,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS2gB,EAArC,SACI,cAAC,KAAD,CACItrB,UAAWP,EAAQid,OACnBlpB,MAAO63B,EAAS,CAAEtoB,UAAW,mBAAsB,SAKlEwoB,GACG,cAAC5f,GAAA,EAAD,CAAMG,MAAI,EAAV,SACI,cAACpB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS8gB,EAArC,SACKD,EACG,cAAC,KAAD,CAAoBxrB,UAAWP,EAAQid,SAEvC,cAAC,KAAD,CAAgB1c,UAAWP,EAAQid,qBAQ/D,cAAC6M,GAAD,CACI5pB,KAAM2sB,IAAmBtR,GACzBqB,SAAUmQ,GACVrP,KAAMA,EACNqM,YAAaA,EACb3pB,QAAS2vB,GACT/F,cAAeiG,KAEnB,cAACzG,GAAD,CACItpB,KAAMusB,IAA0BlR,GAChCqB,SAAU+P,GACVn1B,YAAaA,EACbiyB,mBAAoBA,EACpBrpB,QAASwvB,GACTlG,qBAAsBoG,KAE1B,cAAC7F,GAAD,CACI/pB,KAAM+sB,GACNrQ,SAAUuQ,GACVt3B,KAAM6sB,EACNtiB,QAAS8vB,GACThG,SAAUkG,KAEd,cAACnG,GAAD,CACI/pB,KAAMmtB,GACNzQ,SAAU2Q,GACV13B,KAAM4sB,EACNriB,QAASiwB,GACTnG,SAAUqG,KAEd,cAACpG,GAAD,CACIjqB,KAAMutB,IAAwBlS,GAC9BqB,SAAU+Q,GACVvD,iBAAkBkB,EAClBlrB,QAASowB,GACTnG,WAAYqG,W,ICriCXa,G,WAIjB,WAAY7lB,GAA2C,yBAHtCA,SAGqC,OAFrC8lB,mBAEqC,EAClDhoC,KAAKkiB,IAAMA,EACXliB,KAAKgoC,cAAgB,G,+EAGzB,WAAWvlC,GAAX,oBAAAqD,EAAA,+EACW,IAAIH,SAAQ,SAACC,EAASC,GACrB,EAAKqc,IAAIlD,SACT,EAAKkD,IAAIlD,QAAQhS,YAAcvK,EAC/B,EAAKwlC,iBAAgB,kBAAMriC,OAAQpD,OAEnCoD,OAAQpD,OANpB,2C,mHAWA,iCAAAsD,EAAA,+EACW,IAAIH,SAAQ,SAACC,EAASC,GACrB,EAAKqc,IAAIlD,QACT,EAAKipB,iBAAgB,kBAAMriC,OAAQpD,MAEnCoD,OAAQpD,OALpB,2C,mFAUA,SAAgBqkB,GAAuB,IAAD,SACG,KAAjC,UAAA7mB,KAAKkiB,IAAIlD,eAAT,eAAkBkpB,aAKlBloC,KAAKkiB,IAAIlD,UAAYhf,KAAKkiB,IAAIlD,QAAQ9R,YACtClN,KAAKkiB,IAAIlD,QAAQ9R,UAAY,SAAChH,GAAO,IAAD,gBACV,EAAK8hC,eADK,IAChC,2BAA0C,EACtCpiC,EADsC,YADV,8BAKhC,EAAKoiC,cAAcrmC,OAAS,EAExB,EAAKugB,IAAIlD,UACT,EAAKkD,IAAIlD,QAAQ9R,UAAY,QAKzClN,KAAKgoC,cAAchjC,KAAK6hB,IAlBpBA,M,kBAqBR,WAAQ,IAAD,EACH,UAAA7mB,KAAKkiB,IAAIlD,eAAT,SAAkBhT,S,mBAGtB,WAAS,IAAD,EACJ,UAAAhM,KAAKkiB,IAAIlD,eAAT,SAAkB9S,Y,uLCxCpBi8B,GAA0BpyB,aAAuC,SAACoC,GAAD,MAAY,CAC/EwK,UAAW,CACP/S,OAAQ,qBAAG2T,aAAmC,QAAU,sBACxDrN,SAAU,WACVqhB,UAAW,SACXxc,gBAAiB5C,EAAM6C,QAAQkJ,WAAWkkB,QAC1C14B,MAAO,gBAAG24B,EAAH,EAAGA,WAAY3vB,EAAf,EAAeA,YAAf,OAAkC2vB,EAAaxkC,KAAKC,IAAI,IAAK,IAAO4U,GAAe,SAE9F4vB,MAAO,CACHvtB,gBAAiB5C,EAAM6C,QAAQkJ,WAAWkkB,QAC1C5uB,aAAc,IAElB+uB,YAAa,CACT34B,OAAQ,OACRpF,QAAS,OACTkZ,cAAe,SACfzN,eAAgB,SAChB0N,WAAY,SACZ7I,QAAS,GACT8I,UAAW,cAIb4kB,GAAuBzyB,aAAW,SAACoC,GAAD,MAAY,CAChDswB,YAAa,CACT,UAAW,CACP1tB,gBAAiB5C,EAAM6C,QAAQpF,OAAO6hB,QAG9C32B,SAAU,CACNg1B,SAAU,GACV8B,aAAc,EACdE,SAAU,IACVpoB,MAAO,OACPg5B,aAAc,WACdC,WAAY,YAEhBC,mBAAoB,CAChB9S,SAAU,GACV8B,aAAc,EACdE,SAAU,IACVpoB,MAAO,OACPg5B,aAAc,WACdC,WAAY,YAEhBE,iBAAkB,CACd1mB,MAAO,cACPpH,gBAAiB5C,EAAM6C,QAAQpF,OAAOqF,mBACtCijB,aAAc,GAElBp2B,UAAW,CACPguB,SAAU,GACV3T,MAAO,UACPyB,UAAW,QACXgU,aAAc,GACdD,YAAa,GAEjBmR,WAAY,CACRllB,UAAW,QACX9I,QAAS,OAoBXiuB,GAAcC,IAAMC,MAAK,SAAC1yB,GAC5B,IACI9N,EAUA8N,EAVA9N,MACA23B,EASA7pB,EATA6pB,SACA8I,EAQA3yB,EARA2yB,YACAC,EAOA5yB,EAPA4yB,gBACAC,EAMA7yB,EANA6yB,eACAf,EAKA9xB,EALA8xB,WACA3sB,EAIAnF,EAJAmF,SACA5a,EAGAyV,EAHAzV,SACAuoC,EAEA9yB,EAFA8yB,kBACGC,EAVP,aAWI/yB,EAXJ,IAYMC,EAAUgyB,KACVe,EAAUtK,iBAAwB,MACxC,EAAwC7/B,oBAAkB,GAA1D,mBAAOoqC,EAAP,KAAqBC,EAArB,KACI1yB,EAAYsxB,EAAa7xB,EAAQoyB,mBAAqBpyB,EAAQ1V,SAC9D4oC,EAAoBhuB,EAAWlF,EAAQqyB,iBAAmB,GAE9D,GAAI/nC,EAASe,MAAQ,GAAKf,EAASgB,IAAM,EACrC,OAAO,KAUX,IAAM2hB,EAAU3iB,EAASuY,UACrB,cAACH,GAAD,CAAmBC,eAAgB1Z,OAAO6Z,OAAOqwB,WAAa,EAAG7oC,SAAUA,EAAUsY,MAAO,IAE5F,sBAAM8I,IAAKqnB,EAASxyB,UAAW2yB,EAA/B,SACK5oC,EAASwI,OAIlB,OACI,eAACsgC,GAAA,EAAD,yBACIloB,QAAS,kBAAO8nB,GAAgBL,EAAgB1gC,IAChDohC,UAlBR,WAA0B,IAAD,MACfC,EAAY3/B,SAAS4/B,eACrB3J,EACkB,WAAX,OAAT0J,QAAS,IAATA,OAAA,EAAAA,EAAWziC,QAAX,UAA+BkiC,EAAQvqB,eAAvC,aAA+B,EAAiBgrB,WAAjB,oBAA4BF,EAAUG,kBAAtC,aAA4B,EAAsBC,kBAAlD,QAAgE,OACnGT,EAAe,OAACrJ,QAAD,IAACA,OAeZle,IAAKgnB,EACLnyB,UAAWP,EAAQiyB,YACnBrI,SAAUA,GACNkJ,GANR,cAQI,cAACa,GAAA,EAAD,CAAWpzB,UAAWA,EAAtB,SAAkC0M,IACjC4lB,GACG,cAACc,GAAA,EAAD,CAAWpzB,UAAWP,EAAQsyB,WAA9B,SACI,cAACrnB,GAAA,EAAD,CAAYC,QAAS,SAACxb,GAAD,OAAOkjC,EAAeljC,EAAGuC,IAA9C,SACI,cAAC,KAAD,CAAUqtB,SAAUuS,EAAa,QAAU,eAIvD,cAAC8B,GAAA,EAAD,CAAWpzB,UAAWP,EAAQ1O,UAA9B,SAA0ChH,EAAS49B,qBAoChD,SAAS0L,GAAT,GAwBU,IAvBrBnJ,EAuBoB,EAvBpBA,MACApC,EAsBoB,EAtBpBA,OACA5+B,EAqBoB,EArBpBA,OACAsD,EAoBoB,EApBpBA,eACAkB,EAmBoB,EAnBpBA,sBACA4lC,EAkBoB,EAlBpBA,iBACAC,EAiBoB,EAjBpBA,kBACApJ,EAgBoB,EAhBpBA,QACAx/B,EAeoB,EAfpBA,UACAC,EAcoB,EAdpBA,OACA4oC,EAaoB,EAbpBA,eACAlC,EAYoB,EAZpBA,WACAgB,EAWoB,EAXpBA,kBACAjlB,EAUoB,EAVpBA,QACA+N,EASoB,EATpBA,WACA5O,EAQoB,EARpBA,aACAinB,EAOoB,EAPpBA,YACA7I,EAMoB,EANpBA,iBACA8I,EAKoB,EALpBA,uBACArY,EAIoB,EAJpBA,OACAsY,EAGoB,EAHpBA,uBACA14B,EAEoB,EAFpBA,iBACA24B,EACoB,EADpBA,UAEMC,EAAa3L,mBACnB2L,EAAW5rB,QAAUkiB,EACrB,IAAM2J,EAAW5L,iBAAcgC,GAC/B4J,EAAS7rB,QAAUiiB,EACnB,IAAM6J,EAAkB7L,mBACxB6L,EAAgB9rB,QAAUtd,EAC1B,IAAMqpC,EAAeC,mBACjB,kBACItpC,EACMupC,MAAMvpC,EAAUC,QACXo8B,UAAKv7B,GACLoM,KAAI,SAACs8B,GAAD,OAAOC,yBAChB,KACV,CAACzpC,IAEC0pC,EAAkBnM,iBAAyC,IACjEmM,EAAgBpsB,QAAU+rB,EAC1B,IAAMM,EAAsBpM,mBAC5BoM,EAAoBrsB,QAAU2iB,EAC9B,MAA8DviC,mBAAuC,IAArG,mBAAOksC,EAAP,KAAgCC,EAAhC,KACMC,EAA6BvM,iBAAqC,IAClEwM,EAAYxM,iBAAe,GACjCwM,EAAUzsB,QAAUrd,EACpB,IAAM+pC,EAAYzM,kBAAgB,GAClCyM,EAAU1sB,QAAUoT,EACpB,IAAMuZ,EAAyB1M,iBAAe,GACxC2M,EAAsB3M,mBACtBD,EAAeC,mBACCA,mBACRjgB,QAAUmT,EACxB,MAAsBjzB,GAAc,GAA7BwZ,EAAP,oBACMlC,EAAU2xB,GAAwB,CAAEE,aAAY3vB,cAAa6K,iBAC7DsoB,EAA4B5M,mBAC5B6M,EAAsB7M,mBAC5B6M,EAAoB9sB,QAAUqrB,EAC9B,IAAM0B,EAA6B9M,mBAC7B+M,GAAuB/M,mBAC7B+M,GAAqBhtB,QAAUsrB,EAI/B7zB,qBAAU,WAqFN,OAFAm1B,EAAoB5sB,QAAUitB,uBAlFf,SAATC,IAeF,IAdA,IASIC,EAEAC,EAyDgF,EAKG,EAzEjF1qC,EAAYopC,EAAgB9rB,SAAW,GACvC+rB,EAAeK,EAAgBpsB,QAC/Brd,EAAS8pC,EAAUzsB,QAEnBse,EADQuN,EAAS7rB,QACAse,SAASmO,EAAUzsB,SAEtCqtB,EAAgBxpC,OAAOC,iBACvBwpC,GAAiB,EACjBC,GAAiB,EAEjBC,GAAkB,EAEhBC,EAAuD,GAEpD1pC,EAAIrB,EAAUC,OAAS,EAAGoB,GAAK,IAAKA,EAAG,CAC5C,IAAMC,EAAItB,EAAUqB,GACdlB,EAAQmB,EAAEnB,MAAQF,EAClBG,EAAMkB,EAAElB,IAAMH,EAEpB,GAAI27B,GAAYz7B,EAAO,CACnB,GAAIy7B,EAAWx7B,EACXuqC,EAAgBtpC,EAAIspC,EAAgBtpC,EAAIspC,EACxCI,EAAuB1pC,IAAK,GAGvBypC,GAFgBlP,EAAW,IAAM37B,GAEEG,IACpC0qC,GAAkB,EAClBJ,EAA0BppC,IAIzBupC,GAAkBjP,GAAYz7B,EAAQ,IAAMF,GAAU27B,EAAWz7B,EAAQ,IAAMF,IAChF4qC,GAAiB,EACjBJ,EAAyBnpC,IAIV,IAAnBspC,IACAA,EAAgBvpC,QAEjB,GAAIspC,IAAkBxpC,OAAOC,iBAChC,MASR,GAJIupC,IAAkBxpC,OAAOC,mBAAuC,IAAnBwpC,IAC7CG,EAAuBH,IAAiB,IR1SjD,SAAsBxmC,EAAQwjB,GACjC,IAAK,IAAIyQ,KAAOj0B,EACZ,KAAMi0B,KAAOzQ,GACT,OAAO,EAIf,IAAK,IAAIyQ,KAAOzQ,EACZ,KAAMyQ,KAAOj0B,GACT,OAAO,EAIf,OAAO,EQgSM4mC,CAAaD,EAAwBjB,EAA2BxsB,WACjEwsB,EAA2BxsB,QAAUytB,EACrClB,EAA2BkB,GAEvBJ,IAAkBxpC,OAAOC,kBAAkB,CAC3C,IAAM6pC,EAAsB5B,EAAasB,GACnCO,GAAelB,EAAU1sB,SAAWW,KAAKhd,MAAQgpC,EAAuB3sB,QAAU,IAEjE,OAAnB2tB,QAAmB,IAAnBA,KAAqB3tB,SAAW4tB,GAChCD,EAAoB3tB,QAAQqa,eAAe,CACvCwT,MAAO,SACPC,OAAQ,UACRC,SAAU,WAMtBR,GAAkBV,EAA0B7sB,UAAYmtB,IACxD,UAAAL,EAAoB9sB,eAApB,cAAA8sB,GACAD,EAA0B7sB,QAAUmtB,GAGpCK,GAAmBT,EAA2B/sB,UAAYotB,IAC1D,UAAAJ,GAAqBhtB,eAArB,cAAAgtB,IACAD,EAA2B/sB,QAAUotB,GAGzCR,EAAoB5sB,QAAUitB,sBAAsBC,MAKjD,gBACiC1pC,IAAhCopC,EAAoB5sB,SACpBguB,qBAAqBpB,EAAoB5sB,YAGlD,IAEH,IAAMiuB,GAA0Bz1B,uBAAY,WAAO,IAAD,EACxC8zB,EAA0BE,EAA2BxsB,QAE3D,GAAKssB,EAAL,CAIA,IAAM4B,EAAUx+B,OAAOnO,KAAK+qC,GAE5B,GAAuB,IAAnB4B,EAAQvrC,OAAZ,CAIA,IAAMgrC,EAAsB5B,EAAaloC,OAAOqqC,EAAQ,KAErC,OAAnBP,QAAmB,IAAnBA,GAAA,UAAAA,EAAqB3tB,eAArB,SAA8Bqa,eAAe,CACzCwT,MAAO,SACPC,OAAQ,UACRC,SAAU,eAEf,CAAChC,IAEJt0B,qBAAU,WACN,IAAI2b,EAYJ,OAFAjoB,SAASvK,iBAAiB,mBAAoButC,GAEvC,kBAAMhjC,SAAStK,oBAAoB,mBAAoBstC,IAR9D,SAASA,IAC4B,YAA7BhjC,SAASijC,iBACTH,QAOT,CAAC7a,EAAQkZ,EAAyBP,EAAckC,KAEnDx2B,qBAAU,WACD2b,GACD6a,OAEL,CAAC7a,EAAQ6a,KAEZx2B,qBAAU,WAAO,IAAD,EACZ,IAAIi1B,EAAU1sB,QAAd,CAIA,IAAM+rB,EAAeK,EAAgBpsB,QAErC,GAAK+rB,GAAwC,IAAxBA,EAAappC,OAAlC,CAIA,IAAM0rC,EAAmBtC,EAAa,GACtB,OAAhBsC,QAAgB,IAAhBA,GAAA,UAAAA,EAAkBruB,eAAlB,SAA2Bqa,eAAe,CACtCwT,MAAO,SACPC,OAAQ,UACRC,SAAU,eAEf,CAACtC,IAEJh0B,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU2C,kBACrB,SAACzsC,EAAOsI,GACJtI,EAAMof,iBACNpf,EAAMqf,kBACN3c,EAAe4F,MAEnB,kBAAMw4B,KACN,kBAAMjgC,KAGV,OAAO,kBAAMd,OACd,CAAC+pC,EAAWpnC,EAAgBo+B,EAAkBjgC,IAEjD+U,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU4C,sBACrB,SAAC1sC,EAAOsI,GACJtI,EAAMof,iBACNpf,EAAMqf,kBACN3c,EAAe4F,MAEnB,kBAAMw4B,KACN,kBAAMV,EAAMx+B,KAAKd,MACjB,kBAAMD,KAGV,OAAO,kBAAMd,OACd,CAAC+pC,EAAWpnC,EAAgBo+B,EAAkBV,EAAOv/B,EAAWC,IAEnE8U,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU6C,oBACrB,SAAC3sC,EAAOC,GACJD,EAAMof,iBACNpf,EAAMqf,kBACN2e,EAAO/9B,EAASe,OAAO,MAE3B,kBAAM8/B,KACN,kBAAMV,EAAMx+B,KAAKd,MACjB,kBAAMD,KAGV,OAAO,kBAAMd,OACd,CAAC+pC,EAAW9L,EAAQn9B,EAAWigC,EAAkBV,EAAOt/B,IAE3D8U,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU8C,sCACrB,SAAC5sC,EAAOC,GACJD,EAAMof,iBACNpf,EAAMqf,kBACN2e,EAAO/9B,EAASe,OAAO,MAE3B,kBAAM8/B,KACN,kBAAMV,EAAMx+B,KAAKd,MACjB,kBAAMD,KAGV,OAAO,kBAAMd,OACd,CAAC+pC,EAAW9L,EAAQn9B,EAAWigC,EAAkBV,EAAOt/B,IAE3D8U,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU+C,2BACrB,SAAC7sC,EAAOY,GACJZ,EAAMqf,kBACNrf,EAAMof,iBAEF4e,EADAp9B,EACOoC,KAAKwF,IAAI1H,EAAQs/B,EAAMx+B,KAAKd,GAAU,KAEtCkC,KAAKC,IAAI,EAAGm9B,EAAMx+B,KAAKd,GAAU,MAFa,MAK7D,kBAAMggC,KAGV,OAAO,kBAAM/gC,OACd,CAAC+pC,EAAW1J,EAAOt/B,EAAQggC,EAAkB9C,IAEhDpoB,qBAAU,WACN,SAASk3B,IACLhC,EAAuB3sB,QAAUW,KAAKhd,MAG1C,IAAM2lC,EAAQtJ,EAAahgB,QAG3B,OAFK,OAALspB,QAAK,IAALA,KAAO1oC,iBAAiB,QAAS+tC,GAE1B,yBAAMrF,QAAN,IAAMA,OAAN,EAAMA,EAAOzoC,oBAAoB,QAAS8tC,MAClD,CAAC3O,EAAc2M,IAElBl1B,qBAAU,WACN,IAAI2b,GAICmY,GAAmB7oC,EAAxB,CAIA,IATY,EAqBY,IAZpBksC,GAAe,EACf7qC,EAAI,EAVI,cAYErB,GAZF,IAYZ,2BAAyB,CAAC,IAAjBsB,EAAgB,QACrB,GAAIA,EAAES,gBAAkB8mC,EAAe9mC,eAAiBT,EAAEsG,OAASihC,EAAejhC,KAAM,CACpFskC,EAAc7qC,EACd,QAGFA,GAlBM,8BAqBZ,IAAqB,IAAjB6qC,EACA,UAAA7C,EAAa6C,UAAb,mBAA2B5uB,eAA3B,SAAoCqa,eAAe,CAC/CwT,MAAO,SACPC,OAAQ,UACRC,SAAU,cAGnB,CAAC3a,EAAQmY,EAAgB7oC,EAAWqpC,IAEvC,IAAM8C,GAAwCr2B,uBAC1C,SAAC/O,GACG,OAAK+iC,EAA2BxsB,SAAYtd,EAIrC8G,EACH9G,EACA+G,EACAuJ,EAAiB87B,gCACjB97B,EAAiB+7B,gCAPV,KAUf,CAACrsC,EAAWsQ,EAAiB87B,gCAAiC97B,EAAiB+7B,iCAG7EC,GAAgCx2B,uBAAY,WAC9C,IAAKg0B,EAA2BxsB,QAC5B,MAAO,GAEX,IAAMvW,EAAQ5E,KAAKwF,IAAL,MAAAxF,KAAI,YAAQ6K,OAAOnO,KAAKirC,EAA2BxsB,SAASpQ,KAAI,SAAC7L,GAAD,OAAOF,OAAOE,QAC5F,OAAO8qC,GAAsCplC,KAC9C,CAAColC,KAEEI,GAA2Bz2B,uBAAY,WACzC,IAAM02B,EAAkBx/B,OAAOnO,KAAKirC,EAA2BxsB,SAASpQ,KAAI,SAAC7L,GAAD,OAAOF,OAAOE,MAE1F,GAAKrB,GAAcwsC,GAA8C,IAA3BA,EAAgBvsC,OAAtD,CAIA,IAAM8G,EAAQ5E,KAAKwF,IAAL,MAAAxF,KAAI,YAAQqqC,IAC1B,OAAOxsC,EAAU+G,MAClB,CAAC/G,IAEJ+U,qBAAU,WACN,IAAM7V,EAAS+pC,EAAUwD,UACrB,SAACttC,EAAOC,GACJD,EAAMof,iBACNpf,EAAMqf,kBACNjgB,EAAOa,EAAUktC,KAAiCljC,EAAesjC,MAAM,MAE3E,kCAAM/C,EAAoBrsB,eAA1B,YACA,kBAAMivB,QAGV,OAAO,kBAAMrtC,OACd,CAAC+pC,EAAWsD,GAA0BD,GAA+B/tC,IAExEwW,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU0D,+BACrB,SAACxtC,EAAOiE,GACJjE,EAAMof,iBACNpf,EAAMqf,kBACNzb,EAAsBK,MAE1B,kBAAM68B,KAGV,OAAO,kBAAM/gC,OACd,CAAC+pC,EAAWhJ,EAAkBl9B,IAEjCgS,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU2D,gBACrB,SAACztC,GACGA,EAAMof,iBACNpf,EAAMqf,kBACN,IAAMguB,EAAkBx/B,OAAOnO,KAAKirC,EAA2BxsB,SAASpQ,KAAI,SAAC7L,GAAD,OAAOF,OAAOE,MAE1F,GAAIrB,GAAawsC,GAAmBA,EAAgBvsC,OAAS,EAAG,CAC5D,IAAM8G,EAAQ5E,KAAKwF,IAAL,MAAAxF,KAAI,YAAQqqC,IAC1BjuC,EACIyB,EAAU+G,GACVolC,GAAsCplC,GACtCqC,EAAeyjC,gBACf,OAIZ,kBAAO7sC,GAAkC,IAArBA,EAAUC,QAAgBggC,KAGlD,OAAO,kBAAM/gC,OACd,CAAC+pC,EAAW1qC,EAAQ0hC,EAAkBjgC,EAAWmsC,KAEpDp3B,qBAAU,WACN,IAAM7V,EAAS+pC,EAAU6D,oBACrB,SAAC3tC,GACGA,EAAMof,iBACNpf,EAAMqf,kBACN,IAAMguB,EAAkBx/B,OAAOnO,KAAKirC,EAA2BxsB,SAASpQ,KAAI,SAAC7L,GAAD,OAAOF,OAAOE,MAE1F,GAAIrB,GAAawsC,GAAmBA,EAAgBvsC,OAAS,EAAG,CAC5D,IAAM8G,EAAQ5E,KAAKwF,IAAL,MAAAxF,KAAI,YAAQqqC,IAC1BjuC,EACIyB,EAAU+G,GACVolC,GAAsCplC,GACtCqC,EAAe3J,gBACf,OAIZ,kBAAOO,GAAkC,IAArBA,EAAUC,QAAgBggC,KAGlD,OAAO,kBAAM/gC,OACd,CAAC+pC,EAAW1qC,EAAQ0hC,EAAkBjgC,EAAWmsC,KAEpD,IAAM3O,GAAc1nB,uBAChB,SAAC/O,GACG,GAAK/G,EAAL,CAIA,IAAM4pC,EAA0BE,EAA2BxsB,SAAW,GACtE6f,EAAOn9B,EAAU+G,GAAO5G,OAAQ+oC,EAAW5rB,SAAWvW,KAAS6iC,MAEnE,CAAC5pC,EAAWm9B,IAGVtG,GAAa/gB,uBACf,SAACtR,EAAoDuC,GACjDvC,EAAE+Z,iBACF/Z,EAAEga,kBAEGxe,GAILzB,EAAOyB,EAAU+G,GAAQolC,GAAsCplC,GAAQqC,EAAesjC,MAAM,KAEhG,CAAC1sC,EAAWmsC,GAAuC5tC,IAGnDwuC,GAAgB,KA6CpB,OA3CK/sC,GAAkC,IAArBA,EAAUC,OAexB8sC,GACI,cAACC,GAAA,EAAD,CAAgB33B,UAAWP,EAAQ8xB,MAAnC,SACI,cAACqG,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,UACKltC,EAAUkN,KAAI,SAAC5L,EAAkByF,GAC9B,IAAM23B,EAAW33B,KAAS6iC,EAE1B,OACI,cAACvC,GAAD,CAEItgC,MAAOA,EACP4/B,WAAYA,EACZjI,SAAUA,EACViJ,kBAAmBA,EACnB3tB,SAAUgvB,EAAuB1nC,EAAE8B,OACnChE,SAAUY,EAAU+G,GACpBygC,YAAa6B,EAAatiC,GAC1B0gC,gBAAiBjK,GACjBkK,eAAgB7Q,IATX9vB,aAvB5B2b,GAAWomB,EACZiE,IAAiBrqB,GAAWomB,GACxB,qBAAKzzB,UAAWP,EAAQ+xB,YAAxB,SACI,cAACxmB,GAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BwoB,MAG3B9oC,GAAkC,IAArBA,EAAUC,SAC9B8sC,GACI,qBAAK13B,UAAWP,EAAQ+xB,YAAxB,SACI,cAACxmB,GAAA,EAAD,CAAYC,QAAQ,KAApB,6BAkCZ,cAAC5G,GAAA,EAAD,CAAOyzB,QAAM,EAACxzB,UAAW,EAAG6G,IAAK8c,EAAcjoB,UAAWP,EAAQmM,UAAlE,SACK8rB,K,IC5qBQK,G,WAmCjB,WAAYC,GAA0B,yBAlCrBA,cAkCoB,OAjC7BtsC,UAiC6B,OAhC7BusC,aAgC6B,OA/B7BC,oBA+B6B,OA9B7BC,mBA8B6B,OA7B7BC,oBA6B6B,OA5B7BC,iCA4B6B,OA3B7BC,0BA2B6B,OA1B7BC,mBA0B6B,OAzB7BC,qBAyB6B,OAxB7BC,2BAwB6B,OAvB7BC,mBAuB6B,OAZ7BC,uBAY6B,OAX7BC,uCAW6B,OAV7BC,2BAU6B,OAT7BC,gCAS6B,OAR7BC,wCAQ6B,OANrC5H,gBAMqC,OALrCh7B,UAA0C,KAKL,KAJrCc,iBAIqC,OAHrCiyB,wBAGqC,OAFrC7O,cAEqC,EACjCpxB,KAAK+uC,SAAWA,EAChB/uC,KAAKyC,KAAO,EACZzC,KAAKoxB,SAAW,EAChBpxB,KAAKgvC,SAAU,EACfhvC,KAAKkoC,WAAa,EAClBloC,KAAKigC,wBAAqBz9B,EAC1BxC,KAAKivC,eAAiB,GACtBjvC,KAAKkvC,cAAgB,GACrBlvC,KAAKmvC,eAAiB,GACtBnvC,KAAKqvC,qBAAuB,GAC5BrvC,KAAKovC,4BAA8B,GACnCpvC,KAAKsvC,cAAgB,GACrBtvC,KAAKuvC,gBAAkB,GACvBvvC,KAAKwvC,sBAAwB,GAC7BxvC,KAAKyvC,cAAgB,GACrBzvC,KAAK0vC,kBAAoB,GACzB1vC,KAAK2vC,kCAAoC,GACzC3vC,KAAK4vC,sBAAwB,GAC7B5vC,KAAK6vC,2BAA6B,GAClC7vC,KAAK8vC,mCAAqC,GAE1C,IAAMlU,EAAO57B,KAEbA,KAAK+uC,SAASrT,UAAY,SAAC76B,GACvB,OAAQA,EAAMsG,KAAKJ,SACf,IAAK,QACD,IAAMgpC,EAAelvC,EAAMsG,KAE3By0B,EAAKxK,SAAW2e,EAAa3e,SAC7BwK,EAAKoT,SAAU,EACfpT,EAAK5tB,YAAc+hC,EAAa/hC,YAChC4tB,EAAKqE,mBAAqB8P,EAAa9P,mBACvCrE,EAAKsM,WAAa,EAClBtM,EAAKn5B,KAAOstC,EAAa/iC,YAR7B,oBAUyB4uB,EAAKqT,gBAV9B,IAUI,2BAA0C,EACtCpoB,EADsC,SAC7BkpB,EAAaC,SAX9B,8BAaI,MACJ,IAAK,aACD,IAG2B,EAHrBC,EAAoBpvC,EAAMsG,KAGhC,GADAy0B,EAAKsM,WAAa+H,EAAkB76B,MACZ,IAApBwmB,EAAKsM,WACL,UAAAtM,EAAK1uB,iBAAL,cAAA0uB,EAAiB,IAAIsU,MAAM,YAE/B,MACJ,IAAK,OACD,IADJ,EACUC,EAActvC,EAAMsG,KAD9B,cAGyBy0B,EAAKsT,eAH9B,IAGI,2BAAyC,EACrCroB,EADqC,SAC5BspB,EAAYC,OAJ7B,8BAMI,MACJ,IAAK,QACD,IADJ,EACUC,EAAexvC,EAAMsG,KAD/B,cAGyBy0B,EAAKuT,gBAH9B,IAGI,2BAA0C,EACtCtoB,EADsC,SAC7BwpB,EAAaD,OAJ9B,8BAMI,MACJ,IAAK,qBACD,IADJ,EACUE,EAA4BzvC,EAAMsG,KAD5C,cAGyBy0B,EAAKwT,6BAH9B,IAGI,2BAAuD,CAAC,IAA/CvoB,EAA8C,QACnD+U,EAAKqE,mBAAqBqQ,EAA0BpiC,GACpD2Y,EAASypB,EAA0BpiC,KAL3C,8BAOI,MACJ,IAAK,cACD,IADJ,EACUqiC,EAAqB1vC,EAAMsG,KADrC,cAGyBy0B,EAAKyT,sBAH9B,IAGI,2BAAgD,EAC5CxoB,EAD4C,SACnC0pB,EAAmBn7B,MAAOm7B,EAAmBH,OAJ9D,8BAMI,MACJ,IAAK,OAAL,oBACyBxU,EAAK0T,eAD9B,IACI,2BAAyC,EACrCzoB,EADqC,YAD7C,8BAII,MACJ,IAAK,SACD,IADJ,EACU2pB,EAAgB3vC,EAAMsG,KADhC,cAGyBy0B,EAAK2T,iBAH9B,IAGI,2BAA2C,EACvC1oB,EADuC,SAC9B2pB,EAAcp7B,QAJ/B,8BAMI,MACJ,IAAK,eAAL,oBACyBwmB,EAAK4T,uBAD9B,IACI,2BAAiD,EAC7C3oB,EAD6C,YADrD,8BAII,MACJ,IAAK,OAAL,oBACyB+U,EAAK6T,eAD9B,IACI,2BAAyC,CAAC,IAAD,IAAhC5oB,EAAgC,QAC/B4pB,EAAc5vC,EAAMsG,KAE1B0f,EACI4pB,EAAY3vC,SACZ2vC,EAAYjoC,qBACZioC,EAAY9kC,MACZ8kC,EAAY39B,MACZ29B,EAAYzmC,IALR,UAMJymC,EAAYC,sBANR,QAM0B5lC,EAAesjC,MAC7C,EAPI,UAQJqC,EAAYE,wBARR,SASJF,EAAYviC,KAbxB,8BAgBI,MACJ,IAAK,WAAL,oBACyB0tB,EAAK8T,mBAD9B,IACI,2BAA6C,EAEzC7oB,EAFyC,SACjBhmB,EAAMsG,KACL26B,WAHjC,8BAKI,MACJ,IAAK,2BAAL,oBACyBlG,EAAK+T,mCAD9B,IACI,2BAA6D,EACzD9oB,EADyD,YADjE,8BAII,MACJ,IAAK,eAAL,oBACyB+U,EAAKgU,uBAD9B,IACI,2BAAiD,EAC7C/oB,EAD6C,YADrD,8BAII,MACJ,IAAK,OAGL,IAAK,SAiBL,IAAK,eAED,MAhBJ,IAAK,oBACD,IADJ,EACU+pB,EAA2B/vC,EAAMsG,KAD3C,cAGyBy0B,EAAKiU,4BAH9B,IAGI,2BAAsD,EAClDhpB,EADkD,SACzC+pB,EAAyBC,iBAJ1C,8BAMI,MACJ,IAAK,4BACD,IADJ,EACUC,EAAmCjwC,EAAMsG,KADnD,cAG2By0B,EAAKkU,oCAHhC,IAGI,2BAAgE,EAC5DjpB,EAD4D,SACnDiqB,EAAiChsC,QAJlD,8BAMI,MAIJ,QACIgb,QAAQtY,MAAM,sBAAwB3G,EAAMsG,KAAKJ,W,6CAKjE,WACI,OAAO/G,KAAKyC,M,IAGhB,SAAgB2S,GACZpV,KAAKyC,KAAO2S,EACZpV,KAAKkoC,WAAa,EAClB,IAAMzgC,EAAqC,CAAEV,QAAS,cAAeqO,MAAOpV,KAAKyC,MACjFzC,KAAK+uC,SAASjoC,YAAYW,K,qBAG9B,SAAQof,GACA7mB,KAAKgvC,SACLnoB,GAAS,GAEb7mB,KAAKivC,eAAejqC,KAAK6hB,K,oBAG7B,SAAOA,GACH7mB,KAAKkvC,cAAclqC,KAAK6hB,K,qBAG5B,SAAQA,GACJ7mB,KAAKmvC,eAAenqC,KAAK6hB,K,2BAG7B,SAAcA,GACV7mB,KAAKqvC,qBAAqBrqC,KAAK6hB,K,kCAGnC,SAAqBA,GACjB7mB,KAAKovC,4BAA4BpqC,KAAK6hB,K,oBAG1C,SAAOA,GACH7mB,KAAKsvC,cAActqC,KAAK6hB,K,sBAG5B,SAASA,GACL7mB,KAAKuvC,gBAAgBvqC,KAAK6hB,K,4BAG9B,SAAeA,GACX7mB,KAAKwvC,sBAAsBxqC,KAAK6hB,K,oBAGpC,SACIA,GAYA7mB,KAAKyvC,cAAczqC,KAAK6hB,K,wBAG5B,SAAWA,GACP7mB,KAAK0vC,kBAAkB1qC,KAAK6hB,K,wCAGhC,SAA2BA,GACvB7mB,KAAK2vC,kCAAkC3qC,KAAK6hB,K,4BAGhD,SAAeA,GACX7mB,KAAK4vC,sBAAsB5qC,KAAK6hB,K,iCAGpC,SAAoBA,GAChB7mB,KAAK6vC,2BAA2B7qC,KAAK6hB,K,yCAGzC,SAA4BA,GACxB7mB,KAAK8vC,mCAAmC9qC,KAAK6hB,K,mBAGjD,SAAMuK,GACF,IAAM3pB,EAA+B,CAAEV,QAAS,QAASqqB,SAAUA,GACnEpxB,KAAK+uC,SAASjoC,YAAYW,K,kBAG9B,WACIzH,KAAK+uC,SAASjoC,YAAY,CAAEC,QAAS,W,kBAIzC,WAEI,OADA/G,KAAK+uC,SAASjoC,YAAY,CAAEC,QAAS,SAC9B,IAAIpB,SAAQ,SAACC,EAASC,GAAV,OAAqBD,S,mBAG5C,WACI5F,KAAK+uC,SAASjoC,YAAY,CAAEC,QAAS,Y,gCAGzC,SAAmBmH,GACf,IAAMzG,EAA4C,CAAEV,QAAS,qBAAsBmH,GAAIA,GACvFlO,KAAK+uC,SAASjoC,YAAYW,K,uBAG9B,SAAU/F,EAA4BqvC,GAClC/wC,KAAK+uC,SAASjoC,YAAY,CACtBC,QAAS,YACTqO,MAAO1T,EACPqI,KAAMgnC,EAAkBpvC,OAAS,EAAIovC,EAAkB,GAAK,KAC5DC,MAAOD,M,8BAIf,SAAiBE,GACb,IAAMxpC,EAA0C,CAAEV,QAAS,mBAAoBqO,MAAO67B,GACtFjxC,KAAK+uC,SAASjoC,YAAYW,K,qIAG9B,SAASq6B,GACL,IAAMr6B,EAA2B,CAC7BV,QAAS,WACT+6B,SAAUA,GAEd9hC,KAAK+uC,SAASjoC,YAAYW,O,sCAG9B,SAAyB2qB,GACrB,IAAM3qB,EAAkD,CACpDV,QAAS,2BACTqO,MAAOgd,GAEXpyB,KAAK+uC,SAASjoC,YAAYW,K,0BAG9B,SAAa2qB,GACT,IAAM3qB,EAA6C,CAC/CV,QAAS,eACTqO,MAAOgd,GAEXpyB,KAAK+uC,SAASjoC,YAAYW,K,+BAG9B,WACIzH,KAAK+uC,SAASjoC,YAAY,CAAEC,QAAS,wB,uCAGzC,SAA0BmqC,GACtB,IAAMzpC,EAAmD,CACrDV,QAAS,4BACTmqC,OAAQA,GAEZlxC,KAAK+uC,SAASjoC,YAAYW,K,0BAG9B,SAAawpC,GACT,IAAMxpC,EAAsC,CAAEV,QAAS,eAAgBqO,MAAO67B,GAC9EjxC,KAAK+uC,SAASjoC,YAAYW,K,0BAG9B,SAAawpC,GACT,IAAMxpC,EAAsC,CAAEV,QAAS,eAAgBqO,MAAO67B,GAC9EjxC,KAAK+uC,SAASjoC,YAAYW,K,mBAG9B,WACIzH,KAAK+uC,SAASjoC,YAAY,CAAEC,QAAS,UACrC/G,KAAK+uC,SAASlT,QACd77B,KAAKivC,eAAiB,GACtBjvC,KAAKkvC,cAAgB,GACrBlvC,KAAKmvC,eAAiB,GACtBnvC,KAAKqvC,qBAAuB,GAC5BrvC,KAAKovC,4BAA8B,GACnCpvC,KAAKsvC,cAAgB,GACrBtvC,KAAKuvC,gBAAkB,GACvBvvC,KAAKwvC,sBAAwB,GAC7BxvC,KAAKyvC,cAAgB,GACrBzvC,KAAK0vC,kBAAoB,GACzB1vC,KAAK2vC,kCAAoC,GACzC3vC,KAAK4vC,sBAAwB,GAC7B5vC,KAAK6vC,2BAA6B,GAClC7vC,KAAK8vC,mCAAqC,O,KCvX5C53B,GAAYnC,YAA+B,CAC7CC,KAAM,kBAAuB,CACzBpG,OADE,EAAG2T,aACkB,QAAU,qBACjCrN,SAAU,WACVqhB,UAAW,WAEf5U,UAAW,CACPjT,MAAO,OACPE,OAAQ,QAEZuhC,WAAY,CACRzhC,MAAO,OACPE,OAAQ,OACRwhC,OAAQ,EACR5mC,QAAS,WAIjB,SAAS6mC,GACLC,EACAC,EACA7vC,EACA8vC,GAEA,IAAIC,EAGIA,EAFJ/vC,GAAaA,EAAUC,OAAS,EAC5B6vC,EACkB9vC,EAAUA,EAAUC,OAAS,GAAGG,IAEhCJ,EAAUA,EAAUC,OAAS,GAAG4H,YAGpC,EAGtB,IAAMmoC,EAAcJ,EAAStyB,SAAWsyB,EAAStyB,QAAQoS,SAAW,IAAOkgB,EAAStyB,QAAQoS,SAAW,EAEjGugB,EAAcJ,EAASvyB,SAAWuyB,EAASvyB,QAAQoS,SAAW,IAAOmgB,EAASvyB,QAAQoS,SAAW,EAEvG,OAAOvtB,KAAKC,IAAI6tC,EAAa9tC,KAAKC,IAAI2tC,EAAiBC,IA8D5C,SAASE,GAAT,GA6BE,IAAD,MA5BZC,QAAWxf,EA4BC,EA5BDA,cAAe6G,EA4Bd,EA5BcA,UAAW4Y,EA4BzB,EA5ByBA,aAAc7Y,EA4BvC,EA5BuCA,UAAW8Y,EA4BlD,EA5BkDA,aAC9DC,EA2BY,EA3BZA,eACAhgC,EA0BY,EA1BZA,iBACA24B,EAyBY,EAzBZA,UACAt/B,EAwBY,EAxBZA,UACA4mC,EAuBY,EAvBZA,cACAC,EAsBY,EAtBZA,gBACA/f,EAqBY,EArBZA,WACA5O,EAoBY,EApBZA,aACA4uB,EAmBY,EAnBZA,YACAld,EAkBY,EAlBZA,IACAmd,EAiBY,EAjBZA,cACAC,EAgBY,EAhBZA,yBACAC,EAeY,EAfZA,oBACAC,EAcY,EAdZA,0BACAC,EAaY,EAbZA,QACAhR,EAYY,EAZZA,cACAC,EAWY,EAXZA,cACAxhC,EAUY,EAVZA,OACAwyC,EASY,EATZA,SACAjS,EAQY,EARZA,cACAkS,EAOY,EAPZA,oBACAC,EAMY,EANZA,eACAC,EAKY,EALZA,cACAC,EAIY,EAJZA,8BACAlR,EAGY,EAHZA,iBACA4I,EAEY,EAFZA,eACAuI,EACY,EADZA,eAEA,EAAkC1zC,qBAAlC,mBAAOsC,EAAP,KAAkBqxC,EAAlB,KACMC,EAAe/T,mBACrB+T,EAAah0B,QAAUtd,EACvB,MAAgDtC,oBAAkB,GAAlE,mBAAO6zC,EAAP,KAAyBC,GAAzB,KACA,GAA8B9zC,oBAAkB,GAAhD,qBAAO8hC,GAAP,MAAgBiS,GAAhB,MACA,GAA4D/zC,mBAAiB,GAA7E,qBAAOqrC,GAAP,MAA+B2I,GAA/B,MACA,GAA4Bh0C,mBAAiB,GAA7C,qBAAO+J,GAAP,MAAekqC,GAAf,MACMzI,GAAa3L,mBACnB2L,GAAW5rB,QAAUkiB,GACrB,OAAwB9hC,qBAAf8lC,GAAT,qBACA,GAAsC9lC,qBAAtC,qBAAO4O,GAAP,MAAoBslC,GAApB,MACA,GAAoDl0C,qBAApD,qBAAO6gC,GAAP,MAA2BsT,GAA3B,MACA,GAAkCn0C,qBAAlC,qBAAOo8B,GAAP,MAAkBgY,GAAlB,MACA,GAAiDp0C,oBAAkB,GAA1Dq0C,GAAT,qBACA,GAAoDr0C,oBAAkB,GAAtE,qBAAOs0C,GAAP,MAA2BC,GAA3B,MACMC,GAAwB3U,mBAC9B2U,GAAsB50B,QAAU00B,GAChC,OAA4Dt0C,mBAAuC,IAAnG,qBAAOsrC,GAAP,MAA+BmJ,GAA/B,MACA,GAAgCz0C,mBAAmB4L,EAASud,QAA5D,qBAAOuZ,GAAP,MAAiBgS,GAAjB,MACMC,GAAc9U,mBACpB8U,GAAY/0B,QAAU8iB,GACtB,IAAMqD,GAAc3tB,uBAAY,kBAAM0tB,GAAY,MAAK,IACjD7D,GAAmBpC,iBAAc,CAAE1X,EAAG,EAAG0B,EAAG,IAC5CqoB,GAAWrS,iBAAyB,MACpCsS,GAAWtS,mBACX+U,GAAehJ,mBAAQ,WACzB,OACW,IAAIjD,GADX+J,EACwBR,GACjBS,GAAgB9c,EACCsc,GAGJ,CAAEvyB,QAAS,SACpC,CAAC8yB,EAAcC,EAAc9c,IAC1BgM,GAAQ+J,mBAAe,kBAAM,IAAI7O,KAAS,IAC1C3lB,GAAU0B,GAAU,CAAEqL,iBACtBkoB,GAAYxM,iBAAe,GACjCwM,GAAUzsB,QAAUqyB,GAAYC,GAAUC,GAAU7vC,GAAW,GAE/D,IAAMuyC,GAAOz8B,sBAAW,uCACpB,WAAO/U,EAAcw+B,EAAciT,GAAnC,SAAApuC,EAAA,yDACIm7B,EAAMkT,QAAQ1xC,GACd0iC,MAEI+O,EAJR,gCAKcF,GAAaC,KAAKxxC,EAAO,KALvC,2CADoB,0DASpB,CAAC0iC,GAAa6O,KAGZI,GAAc58B,uBAChB,SAACrO,EAAgB0nC,GACbwC,GAAUlqC,GAEV4pC,GAAa,SAACrxC,GACV,GAAKA,EAAL,CAIA,IAAMC,EAASD,EAAUC,OAAS,EAAID,EAAUA,EAAUC,OAAS,GAAGG,IAAMqH,EAAS,EAE/EkrC,EAAe3yC,EAAUkN,KAAI,SAAC5L,GAAD,MAAQ,CACvCsG,KAAMtG,EAAEsG,KACR+P,UAAWrW,EAAEqW,UACbxX,MAAOmB,EAAES,cAAgB0F,EACzB1F,cAAeT,EAAES,cACjB3B,IAAKkB,EAAEuG,YAAcJ,EACrBI,YAAavG,EAAEuG,YACfm1B,YAAarI,GAAoBrzB,EAAES,cAAgB0F,EAAQxH,GAC3DmD,MAAO9B,EAAE8B,UAYb,OATI+rC,GACIU,GAASvyB,mBAAmB8vB,IAC5ByC,GAASvyB,QAAQtd,UACb2yC,EACAhiB,EAAczjB,KAAI,SAACue,GAAD,OAAOA,EAAEpjB,SAKhCsqC,QAGf,CAAChiB,IAgPL,SAASrmB,GAAKi1B,EAAc+S,EAA4BE,GACpDf,IAAW,GACXlS,EAAMp/B,QAEFqyC,GACAF,EAAahoC,OAIrB,SAASE,GAAM+0B,EAAc+S,EAA4BE,GACrDf,IAAW,GACXlS,EAAMtzB,OAEFumC,GACAF,EAAa9nC,QA3PrBuK,qBAAU,WACN,IAAIglB,OAAoCj5B,EACpC8xC,GAAgB,EAFR,4CAIZ,oCAAAxuC,EAAA,yDACQyrC,GAASvyB,mBAAmB8vB,IAC5ByC,GAASvyB,QAAQ6c,QAErB0V,GAASvyB,aAAUxc,EACnB0vC,EAAgBlzB,QAAU,KAC1BiiB,GAAMkT,QAAQ,GACdlT,GAAMtzB,OACN0lC,GAAU,GACVF,IAAW,GACXG,QAAe9wC,GACf+wC,QAAsB/wC,GACtBsxC,GAAY9oC,EAASud,QAEjB+oB,GAAStyB,UACTsyB,GAAStyB,QAAQhS,YAAc,EAC/BskC,GAAStyB,QAAQ9S,WAKjBmmB,EAAc1wB,OAAS,GArB/B,wBAsBQuxC,IAAoB,GAtB5B,oBAyBgClB,EAAetwC,UAAU2wB,GAzBzD,QAyBkB/E,EAzBlB,OA0BkB3rB,EAAS2rB,EAAM3rB,OAAS,EAAI2rB,EAAMA,EAAM3rB,OAAS,GAAGG,IAAM,EAChEJ,EAAY4rB,EAAM1e,KAAI,SAAC5L,GAAD,MAAQ,CAC1BsG,KAAMtG,EAAEsG,KACR+P,UAAWrW,EAAEqW,UACbxX,MAAOmB,EAAEnB,MACT4B,cAAeT,EAAEnB,MACjBC,IAAKkB,EAAElB,IACPyH,YAAavG,EAAElB,IACf48B,YAAarI,GAAoBrzB,EAAEnB,MAAOF,GAC1CmD,MAAO9B,EAAE8B,UAGbiuC,EAAarxC,GACb0xC,GAA0BzzB,KAAKhd,OAvC3C,mDAyCgB,gBAAa2D,MACbksC,EAAQ,KAAE/qC,SAEV+qC,EAAQlqC,OAAO,EAAD,KA5C9B,yBA+CY4qC,IAAoB,GA/ChC,6CAkDQxxC,OAAYc,EAlDpB,YAqDQsvC,EArDR,kCAsDckC,GAAaO,UAtD3B,QAuDQpP,KAvDR,4BAwDe4M,IAAgB9c,EAxD/B,qBAyDYqf,EAzDZ,uDA6DYvC,EA7DZ,iBA8DkBvW,EAAY/G,cAClBgH,EAAU,IAAIqT,GAAa,IAAIvT,GAA8BC,IAC7DgY,GAAahY,GAhEzB,4BAiEmBvG,EAjEnB,kBAkEYwG,EAAU,IAAIqT,GAAa,IAAIhT,GAAuB7G,EAAI/mB,GAAI+mB,EAAIppB,IAAKR,KAC/DmpC,OAnEpB,8BAuEkB,IAAIluC,MAAM,oBAvE5B,QA0EQirC,GAASvyB,QAAUyc,EACnByW,EAAgBlzB,QAAUyc,EACtBgZ,GAAa,EAEjBhZ,EAAQiZ,QAAO,kBAAM3C,GAAgBtQ,EAAcsQ,MACnDtW,EAAQ4G,gBAAe,kBAAMuQ,OAC7BnX,EAAQkH,4BAA2B,WAC/BgR,IAAsB,SAACvhB,GAAY,IAAD,EAE9B,OADO,QAAP,EAAAqJ,SAAA,SAASkZ,0BAA0BviB,IAC3BA,QAGhBqJ,EAAQkX,gBAAe,WACnBA,OAEJlX,EAAQ8Y,SAAQ,SAACvE,GAAY,IAAD,kBAIE,IAaoC,IAoB7C,mBApCjBvE,GAAUzsB,QAAUqyB,GAAYC,GAAUC,GAAUyB,EAAah0B,SAC1D,QAAP,EAAAyc,SAAA,SAASmZ,MAAMnJ,GAAUzsB,SAErBg0B,EAAah0B,WACN,QAAP,EAAAyc,SAAA,SAASoZ,iBAAiB7iC,EAAiB6iC,kBACpC,QAAP,EAAApZ,SAAA,SAAS/5B,UACLsxC,EAAah0B,QACbqT,EAAczjB,KAAI,SAACue,GAAD,OAAOA,EAAEpjB,WAI5B,QAAP,EAAA0xB,SAAA,SAASqZ,aAAa9iC,EAAiB8iC,cAChC,QAAP,EAAArZ,SAAA,SAASsZ,aAAa/iC,EAAiB+iC,cAChC,QAAP,EAAAtZ,SAAA,SAASqG,SAASiS,GAAY/0B,SACvB,QAAP,EAAAyc,SAAA,SAASkZ,yBAAT,UAAkCf,GAAsB50B,eAAxD,UAEW,QAAP,EAAAyc,SAAA,SAASztB,cAAsB,QAAP,EAAAytB,SAAA,mBAASztB,mBAAT,eAAsBrM,QAAS,IACvD2xC,GAAc,UAAC7X,SAAD,aAAC,EAASztB,aACxBulC,GAAqB,UAAC9X,SAAD,aAAC,EAASwE,sBAE/BqT,QAAe9wC,GACf+wC,QAAsB/wC,KAGtB+uC,GAASvyB,SACTiiB,GAAMkT,QAAuC,IAA/B5C,GAASvyB,QAAQhS,aAG/BgjC,EACA/O,GAAMtzB,OAENszB,GAAMp/B,QAGVsxC,IAAYnD,GAEPyE,KACM,QAAP,EAAAhZ,SAAA,SAASr2B,QAAO,SAAC8uC,GAAD,OAAoBloC,GAAKi1B,GAAO+S,GAAcE,MACvD,QAAP,EAAAzY,SAAA,SAAS8F,SAAQ,SAAC2S,GAAD,OAAoBhoC,GAAM+0B,GAAO+S,GAAcE,MACzD,QAAP,EAAAzY,SAAA,SAASuZ,UAAS,SAAC7rC,GAAD,aAAYirC,GAAYvwC,KAAKC,IAAL,WAAU2nC,GAAUzsB,eAApB,QAA+B,EAAG7V,IAAS,MAC9E,QAAP,EAAAsyB,SAAA,SAASx7B,QACL,SACIa,EACA0H,EACAmD,EACAmH,EACA9I,EACA0mC,EACAuE,EACAtE,EACAziC,GATJ,aAWIjO,EACIa,EACA0H,EACA0wB,EACAD,EACAn4B,EAAWuxB,EAAcvxB,EAASgE,YAAStC,EAC3Cy+B,GAAMx+B,KAAKgpC,GAAUzsB,SANnB,UAOFyc,SAPE,aAOF,EAASwE,mBACTt0B,EACAmH,EACA9I,EACA0mC,EACAuE,EACAtE,EACAziC,MAGL,QAAP,EAAAutB,SAAA,SAASoF,YAAW,SAACiB,GAAc,IAAD,EAC9BgS,GAAYhS,GACL,QAAP,EAAArG,SAAA,SAASqG,SAASA,MAEf,QAAP,EAAArG,SAAA,SAASyZ,cAAT,uCAAuB,WAAOloC,EAAaknC,GAApB,SAAApuC,EAAA,6DACf8kC,GAAW5rB,SACXiiB,GAAMtzB,OAFS,SAKbsmC,GAAmB,IAAdjnC,EAAoBi0B,GAAOiT,GALnB,OAOftJ,GAAW5rB,SACXiiB,GAAMp/B,QARS,2CAAvB,yDAWO,QAAP,EAAA45B,SAAA,SAASyE,qBAAT,uCAA8B,WAAOhyB,GAAP,SAAApI,EAAA,6DACtB8kC,GAAW5rB,SACXiiB,GAAMtzB,OAFgB,SAKpBqmC,GAAaO,UALO,OAMtB3J,GAAW5rB,SACXiiB,GAAMp/B,QAGV0xC,GAAsBrlC,GAVI,2CAA9B,uDAYO,QAAP,EAAAutB,SAAA,SAASiX,qBAAoB,SAAC7B,GAAD,OAAoB6B,EAAoB7B,MAC9D,QAAP,EAAApV,SAAA,SAASx2B,6BAA4B,SAACH,GAAD,OACjC+uC,IAA0B,SAACsB,GACvB,IAAMC,EAAS,eAAQD,GAEvB,OADAC,EAAUtwC,IAAUqwC,EAAOrwC,GACpBswC,QAIfX,GAAa,MAnM7B,iEAJY,wBA+MZ,OA/MY,0CA6MZD,GAAOrkC,MAAK,kBAAMsiC,OAEX,WAAO,IAAD,EACF,QAAP,EAAAhX,SAAA,SAASI,QACTyY,GAAgB,KAErB,CACCtC,EACA3mC,EACA2G,EACAivB,GACA+S,GACAC,GACAxB,EACAD,EACA/Q,EACAxhC,EACAyyC,EACAC,EACAC,EACAvgB,EACA6G,EACA4Y,EACA7Y,EACA8Y,EACA9c,EACAkQ,GACA8M,EACAC,EACAkC,KAqBJ39B,qBAAU,WACF47B,GAA4Bd,GAASvyB,mBAAmB8vB,IACxDyC,GAASvyB,QAAQq2B,sBAEtB,CAAChD,IAEJ57B,qBAAU,WACF87B,GAA6BA,EAA0BzqC,UAAY,IAC/DypC,GAASvyB,mBAAmB8vB,IAC5ByC,GAASvyB,QAAQs2B,0BAA0B/C,EAA0BrB,QAGzEuC,IAAqC,SAAC8B,GAKlC,OAJIA,GAAqChD,EAA0BrB,QAC/DllC,GAAKi1B,GAAO+S,IAAc,IAGvB,QAGhB,CAACzB,EAA2BtR,GAAO+S,KAEtCv9B,qBAAU,WACF67B,GAAuB1H,GAAW5rB,UAClC9S,GAAM+0B,GAAO+S,IAAc,GAC3BP,IAAqC,MAE1C,CAACnB,EAAqBrR,GAAO+S,KAEhCv9B,qBAAU,WACN,GAAIqrB,KAAa92B,EAAS81B,WAIrBp/B,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAI6zC,GAAU,EACVC,EAAmB,IAEjBj7B,EAAWwa,YAAW,sBAAC,8CAAAlvB,EAAA,yDACnBnE,EAAS8pC,GAAUzsB,QADA,iDAOnBse,EAAW2D,GAAM3D,SAAS37B,GAE5B+zC,EAAqB,EACrBC,GAAgB,EAEX5yC,EAAIrB,EAAUC,OAAS,EAZP,YAYUoB,GAAK,GAZf,oBAafC,EAAItB,EAAUqB,GACdlB,EAAQmB,EAAEnB,MAAQF,EAClBG,EAAMkB,EAAElB,IAAMH,IAEhB27B,GAAYz7B,GAjBK,wBAkBby7B,EAAWx7B,GACX6zC,EAAe5yC,EACf2yC,EAAqB3yC,GAErB2yC,EAAqB7xC,KAAKwF,IAAI3H,EAAUC,OAAS,EAAGoB,EAAI,GAtB3C,+BAYoBA,EAZpB,0BA6BrB4yC,IAAiBD,EA7BI,uBA8BfE,EAAel0C,EAAUg0C,IAEd7zC,MAAQy7B,EAAW37B,EAAS8zC,EAAmB,KAhC3C,sDAoCjB7K,GAAW5rB,SACXiiB,GAAMtzB,OAGL6nC,EAxCgB,wBAyCjBA,GAAU,EACJK,EAAKl2B,KAAKhd,MA1CC,UA2CXsxC,GAAK2B,EAAa/zC,MAAOo/B,IAAO,GA3CrB,QA4CjBwU,EAAmB91B,KAAKhd,MAAQkzC,EAChCL,GAAU,EA7CO,QAgDjB5K,GAAW5rB,SACXiiB,GAAMp/B,QAjDW,4CAoD1B,KAEH,OAAO,kBAAM8jC,cAAcnrB,OAC5B,CAAC9Y,EAAWogC,GAAUb,GAAOgT,KAEhC,IAAM6B,GAAiCt+B,uBAAY,WAC3CsqB,KAAa92B,EAAS+1B,WAAa/uB,EAAiB+jC,sBAAwBhrC,EAAoBirC,SAIpG9pC,GAAM+0B,GAAO+S,IAAc,KAC5B,CAAClS,GAAUb,GAAO+S,GAAchiC,IAE7BikC,GAAkCz+B,uBAAY,WAC5CsqB,KAAa92B,EAAS+1B,WAAa/uB,EAAiB+jC,sBAAwBhrC,EAAoBmrC,OAIpGhqC,GAAM+0B,GAAO+S,IAAc,KAC5B,CAAClS,GAAUb,GAAO+S,GAAchiC,IAEnCyE,qBAAU,WACF07B,GAAe3W,IAAauW,GAC5BtyC,OAAOiX,KACHy/B,6BAEIC,mBAAmBrE,GACnB,YACAvW,GACA,eACJ,mBAAqBuW,EACrB,kCAIRqB,GAA0BzzB,KAAKhd,SAChC,CAACwvC,EAAa3W,GAAWuW,EAAcE,IAE1C,IAAMoE,GAAa7+B,uBAAY,kBAAMxL,GAAKi1B,GAAO+S,IAAc,KAAO,CAAC/S,GAAO+S,KACxEsC,GAAc9+B,uBAAY,kBAAMtL,GAAM+0B,GAAO+S,IAAc,KAAO,CAAC/S,GAAO+S,KAC1E5O,GAAa5tB,sBAAW,uCAC1B,WAAO8lB,GAAP,SAAAx3B,EAAA,yDACS2lC,GAAUzsB,QADnB,wDAKQ4rB,GAAW5rB,SACXiiB,GAAMtzB,OANd,SASUsmC,GAAK3W,EAAWmO,GAAUzsB,QAASiiB,IAAO,GATpD,OAWQ2J,GAAW5rB,SACXiiB,GAAMp/B,QAZd,2CAD0B,sDAgB1B,CAACo/B,GAAOgT,KAGNsC,GAAuB/+B,sBAAW,uCACpC,WAAO/U,EAAc+zC,GAArB,SAAA1wC,EAAA,6DACS0wC,GACDtqC,GAAM+0B,GAAO+S,IAAc,GAG3BpJ,GAAW5rB,SACXiiB,GAAMtzB,OANd,SASUsmC,GAAKxxC,EAAMw+B,IAAO,GAT5B,OAWQuV,IAAe5L,GAAW5rB,SAE1BhT,GAAKi1B,GAAO+S,IAAc,GAblC,2CADoC,wDAiBpC,CAAC/S,GAAOgT,GAAMD,KAGZyC,GAA+Bj/B,uBACjC,SACI1W,EACA0H,EACAkoC,EACAC,GAEA1wC,EACIa,EACA0H,EACA0wB,EACAD,EACA5G,EAAcvxB,EAASgE,OACvBm8B,GAAMx+B,KAAKgpC,GAAUzsB,SACrBihB,QACAz9B,OACAA,OACAA,EACAkuC,GACA,EACAC,OACAnuC,KAGR,CAACy+B,GAAOhhC,EAAQi5B,EAAWD,EAAW5G,EAAe4N,KAGnDyW,GAAkBl/B,uBAAY,SAACtR,GACjCm7B,GAAiBriB,QAAQuI,EAAIrhB,EAAEywC,QAC/BtV,GAAiBriB,QAAQiK,EAAI/iB,EAAE0wC,UAChC,IAEGtQ,GAA2B9uB,sBAAW,uCACxC,WAAOtJ,GAAP,SAAApI,EAAA,6DACQyrC,GAASvyB,mBAAmB8vB,IAC5ByC,GAASvyB,QAAQ63B,mBAAmB3oC,GAGxChC,GAAM+0B,GAAO+S,IAAc,GAL/B,SAOUC,GAAK,EAAGhT,IAAO,GAPzB,OASQ2J,GAAW5rB,SACXhT,GAAKi1B,GAAO+S,IAAc,GAVlC,2CADwC,sDAcxC,CAAC/S,GAAO+S,GAAcC,KAGpB6C,GAAqBt/B,uBACvB,SAACrO,GAAoB,IAAD,EAChBirC,GAAYvwC,KAAKC,IAAL,WAAU2nC,GAAUzsB,eAApB,QAA+B,EAAG7V,IAAS,KAE3D,CAACirC,KAGC/M,GAAqB7vB,uBAAY,SAAC+sB,GAChC+M,GAAStyB,mBAAmB+3B,mBAC5BzF,GAAStyB,QAAQulB,OAASA,KAE/B,IAEGyS,GAAiBx/B,uBAAY,SAACsqB,GAAD,OAAwBgS,GAAYhS,KAAW,IAE5EmV,GAA4Bz/B,uBAC9B,SAAC1S,GAAD,OACI+uC,IAA0B,SAACsB,GACvB,IAAMC,EAAS,eAAQD,GAEvB,OADAC,EAAUtwC,IAAUqwC,EAAOrwC,GACpBswC,OAEf,IAGJ3+B,qBAAU,WACN,IAAIwe,EAAJ,CAIA,IAAMza,EAAWwa,YAAW,sBAAC,4BAAAlvB,EAAA,yDACnBnE,EAAS8pC,GAAUzsB,UACRiiB,GAAM3D,SAAS37B,IAEhB,GAJS,uBAKrBuK,GAAM+0B,GAAO+S,IAAc,GALN,SAMfC,GAAK,EAAGhT,IAAO,GANA,OAOrBmS,GAA0BzzB,KAAKhd,OAPV,2CAS1B,KAEH,OAAO,kBAAMgjC,cAAcnrB,OAC5B,CAACymB,GAAOv/B,EAAWsyC,GAAcC,GAAMhf,IAE1Cxe,qBAAU,WACN,IAAM7V,EAAS+pC,EAAUuM,UACrB,SAACr2C,GACGA,EAAMof,iBAEFihB,GACAh1B,GAAM+0B,GAAO+S,IAAc,GAE3BhoC,GAAKi1B,GAAO+S,IAAc,MAGlC,kBAAMrS,KAGV,OAAO,kBAAM/gC,OACd,CAAC+pC,EAAWzJ,GAASD,GAAO+S,GAAcrS,IAE7ClrB,qBAAU,WACN,OAAOk0B,EAAUwM,eACb,SAACt2C,GACG,IAAIo0B,EAAJ,CAIAp0B,EAAMof,iBACN,IAAMm3B,EAActV,KAAa92B,EAAS+1B,UAAY/1B,EAASud,OAASvd,EAAS+1B,UACjF+S,GAAYsD,GACZvE,EAA8BuE,OAElC,kBAAMzV,OAEX,CAACgJ,EAAWhJ,EAAkB3vB,EAAkB8vB,GAAU7M,EAAK4d,IAElEp8B,qBAAU,WACN,IAAKyiB,GAAaD,MAAgBv3B,GAAkC,IAArBA,EAAUC,QAAe,CACpE,IAAM01C,EAAa1M,EAAUwD,UACzB,SAACttC,EAAOC,GACJD,EAAMof,iBACNpf,EAAMqf,kBACN,IAAM1X,EAAuBQ,EAAyBlI,EAAU2qC,GAAUzsB,QAAS,KACnF/e,EACIa,EACA0H,EACA0wB,EACAD,OACAz2B,EACAy+B,GAAMx+B,KAAKgpC,GAAUzsB,SACrBihB,QACAz9B,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,MAGR,kBAAMm/B,KACN,WACI,GAAK8J,GAAUzsB,QAAf,CAIA,IAAMlX,EAAYm5B,GAAMx+B,KAAKgpC,GAAUzsB,SACjCld,EAAM+B,KAAKwF,IAAIvB,EAAY,IAAM2jC,GAAUzsB,SAEjD,MAAO,CACH1V,KAAM,GACNzH,MAAOiG,EACPrE,cAAeqE,EACfhG,IAAKA,EACLyH,YAAazH,EACbgD,MAAO,OAKbwyC,EAAmB3M,EAAU2D,gBAC/B,SAACztC,GACGA,EAAMof,iBACNpf,EAAMqf,kBACN,IAAMpY,EAAYm5B,GAAMx+B,KAAKgpC,GAAUzsB,SACjCld,EAAM+B,KAAKwF,IAAIvB,EAAY,IAAM2jC,GAAUzsB,SAC3Cle,EAAW,CACbwI,KAAM,GACNzH,MAAOiG,EACPrE,cAAeqE,EACfhG,IAAKA,EACLyH,YAAazH,EACbgD,MAAO,GAEL0D,EAAuBQ,EAAyBlI,EAAU2qC,GAAUzsB,QAAS,KACnF/e,EACIa,EACA0H,EACA0wB,EACAD,OACAz2B,EACAsF,EACAm4B,QACAz9B,OACAA,OACAA,EACAsI,EAAeyjC,gBACf,OACA/rC,OACAA,MAGR,kBAAM,KAGV,OAAO,WACH60C,IACAC,QAGT,CAAC3M,EAAWzR,EAAWD,EAAWv3B,EAAWu/B,GAAOhB,GAAoB0B,EAAkB1hC,EAAQyyC,IAErGj8B,qBAAU,WACF86B,GAASvyB,mBAAmB8vB,IAC5ByC,GAASvyB,QAAQu4B,aAAah0B,KAEnC,CAACA,IAEJ9M,qBAAU,WACDq8B,IAIDlI,GAAW5rB,SACXiiB,GAAMtzB,OAGV4oC,GAAqBzD,EAAejxC,OAAO,MAC5C,CAACo/B,GAAO6R,EAAgByD,KAE3B,IAAM50C,GAAS8pC,GAAUzsB,QACnBw4B,GAAS1F,GAAgBC,GAAgBrwC,EACzC+1C,GAAgBC,QAAQF,IAAUzF,IAAiBI,GAEzD,OACI,sBAAKwF,YAAajB,GAAiB3/B,UAAWP,GAAQR,KAAtD,UACI,eAAC0M,GAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMyX,KAAK,SAAStjB,UAAWP,GAAQmM,UAAjE,UACK80B,IACG,cAAC/0B,GAAA,EAAD,CAAMG,MAAI,EAACtY,MAAO,CAAEmP,SAAU,EAAGoe,SAAU,KAA3C,SACI,wBACI5V,IAAK+vB,EACLl7B,UAAWP,GAAQ26B,WACnBtlC,IACIsqC,6BAEAC,mBAAmBrE,GACnB,YACAvW,GACA,gBAEJviB,MAAM,kBAIfw+B,IAAkB/1C,IAAsB,QAAT,EAAAA,SAAA,eAAWC,QAAS,IAClD,eAAC+gB,GAAA,EAAD,CACIG,MAAI,EACJtY,MAAO,CACHmP,SAAU+9B,GAAgB,EAAI,EAC9B/nC,MAAO+nC,IAAiB/D,GAAqB,EAAI,QAJzD,UAOK8D,MAAYzF,IAAiBI,IAC1B,cAACnR,GAAD,CACIK,iBAAkBA,GAClBH,QAASA,GACTD,MAAOA,GACPt/B,OAAQA,GACRy/B,cAAeiQ,GAAYC,GAAUC,GAAU7vC,GAAW,GAC1DsM,YAAaA,GACbiyB,mBAAoBA,GACpB/L,MAAQ6d,IAAiBD,GAAgBM,QAAkB5vC,EAC3D+9B,YAAatL,EACbiE,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAWnvB,KACtBkvB,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAWlvB,KACtBo3B,eAAe,EACfh4B,OAAQA,GACR04B,cAAe6V,QAAQ5F,GACvB/P,gBAAiB2V,QAAQ3F,GAAgBD,GACzChQ,SAAUA,GACV18B,OAAQixC,GACR9U,QAAS+U,GACTzX,OAAQuG,GACRlF,qBAAsBoG,GACtB9F,cAAeA,EACfgB,cAAe,kBAAMsQ,GAAgBtQ,EAAcsQ,IACnDrQ,cAAe,kBAAMsQ,GAAgBtQ,EAAcsQ,IACnDxuC,eAAgBuzC,GAChBpV,eAAgB2F,GAChBxG,WAAYmW,GACZrV,iBAAkBA,EAClB3vB,iBAAkBA,EAClB4wB,qBAAqB,IAG7B,cAACwH,GAAD,CACIlJ,QAASA,GACTx/B,UAAWA,EACXu/B,MAAOA,GACPt/B,OAAQA,GACR4oC,eAAgBA,EAChBpY,WAAYA,EACZ5O,aAAcA,EACd8kB,WAAYqP,QAAQ3F,IAAiBI,GACrC9I,uBAA2B7mC,IAARyyB,EACnB7Q,QAAS6uB,EACTzI,aAAsB,OAATtR,QAAS,IAATA,OAAA,EAAAA,EAAWnvB,OAASooC,IAAW,OAAIlZ,QAAJ,IAAIA,OAAJ,EAAIA,EAAWlvB,YAASvH,EACpEm/B,iBAAkBA,EAClB8I,uBAAwBA,GACxBrY,OAAQqlB,IAAiB/D,GACzBhJ,uBAAwBA,GACxB7L,OAAQ0X,GACRt2C,OAAQw2C,GACRlzC,eAAgBuzC,GAChBryC,sBAAuBwyC,GACvB5M,iBAAkByL,GAClBxL,kBAAmB2L,GACnBjkC,iBAAkBA,EAClB24B,UAAWA,UAK3B,uBAAOzoB,IAAKovB,GAAUzlC,IAAKimC,O,wBC19BxB,SAAS8F,GAAT,GAA4F,IAA/DlhC,EAA8D,EAA9DA,KAAMkF,EAAwD,EAAxDA,UAAWE,EAA6C,EAA7CA,SAAU+7B,EAAmC,EAAnCA,yBACnE,EAAkCz4C,mBAAiB,IAAnD,mBAAOiW,EAAP,KAAkByiC,EAAlB,KAEArhC,qBAAU,WACNqhC,EAAa,MACd,CAACphC,IAEJ,IAAMqhC,EAAc,sBACbF,GADa,CAEhB,WACA,OACA,aACA,SACA,QACA,UACFllC,SAAS0C,GAEX,OACI,eAACyD,GAAA,EAAD,CACIpC,KAAMA,EACNkL,qBAAmB,EACnBC,WAAS,EACTtS,SAAS,KACTqH,QAASkF,EALb,UAOI,cAACk8B,GAAA,EAAD,+BACA,cAAC/1B,GAAA,EAAD,UACI,+BACI,cAACjK,GAAA,EAAD,CACIxQ,MAAOuwC,EACPv1B,WAAYu1B,GAAW,gBAAa1iC,EAAb,mBACvB2M,QAAQ,SACRH,WAAS,EACT1H,MAAM,aACN/E,MAAOC,EACP8M,MAAM,YACNlK,SAAU,SAAC/R,GAAD,OAAO4xC,EAAa5xC,EAAEG,OAAO+O,cAInD,eAACgO,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAQ3B,QAAS,kBAAM5F,KAAvB,oBACA,cAACuH,GAAA,EAAD,CAAQ3H,SAAUq8B,GAAoC,KAArB1iC,EAAUyC,OAAe4J,QAAS,kBAAM9F,EAAUvG,EAAUyC,SAA7F,0B,sKCtBVI,GAAYnC,cAAkB,SAACoC,GAAD,MAAY,CAC5CnC,KAAM,CACF,uBAAwB,CACpBmN,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,KAGpCw+B,gBAAiB,CACb,uBAAwB,CACpB90B,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,KAGpCy+B,gBAAiB,CACbn0B,gBAAgB,0BAAD,OAA4B5L,EAAM6C,QAAQpF,OAAOqF,mBAAjD,2DAAsH9C,EAAM6C,QAAQpF,OAAOqF,mBAA3I,2EAAgO9C,EAAM6C,QAAQpF,OAAOqF,mBAArP,0DAAyT9C,EAAM6C,QAAQpF,OAAOqF,mBAA9U,SACf7C,eAAgB,YAChB0L,mBAAoB,qCACpBX,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,GAC5BlK,SAAU,OACVuL,QAAS,IAEbq9B,qBAAsB,CAClB/G,OAAQ,OACR1hC,MAAO,OACPkU,UAAW,SACX7I,gBAAiB,gBACjB,UAAW,CACPq9B,QAAS,SAGjBC,eAAgB,CACZ3oC,MAAO,YAIT4oC,GAA6BviC,cAAkB,SAACoC,GAAD,MAAY,CAC7DogC,YAAa,CACThb,OAAQplB,EAAMsB,QAAQ,GACtBqe,SAAU,KAEd9hB,KAAM,CACFxL,QAAS,OACTkZ,cAAe,MACfzN,eAAgB,MAChB0N,WAAY,gBAcpB,SAAS60B,GAAT,GAQ4B,IAPxBr+B,EAOuB,EAPvBA,MACA/E,EAMuB,EANvBA,MACAqjC,EAKuB,EALvBA,WACAC,EAIuB,EAJvBA,UACAzgC,EAGuB,EAHvBA,SACA0gC,EAEuB,EAFvBA,kBACAC,EACuB,EADvBA,UAEMpiC,EAAU8hC,KAEhB,OACI,sBAAKvhC,UAAWP,EAAQR,KAAxB,UACI,cAACgC,GAAA,EAAD,CACImC,MAAOA,EACP/E,MAAOA,EACP6C,SAAUA,EACV4J,WAAS,EACTM,MAAM,YACNE,WAAY,CACRC,aAAco2B,GACV,cAACl9B,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,SACI,cAACuL,GAAA,EAAD,CAAYC,QAAS,SAACxb,GAAD,cAAO0yC,QAAP,IAAOA,OAAP,EAAOA,KAA5B,SACI,cAAC,KAAD,WAMpB,eAACC,GAAA,EAAD,CAAa9hC,UAAWP,EAAQ+hC,YAAhC,UACI,cAACO,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAQ3jC,MAAOA,EAAOsG,UAAW+8B,EAAYt2B,MAAM,YAAYlK,SAAU0gC,EAAzE,SACKF,GACGA,EAAW7pC,KAAI,SAAC5L,GAAD,OACX,cAACg2C,GAAA,EAAD,CAAkB5jC,MAAOpS,EAAzB,SACKA,GADUA,cAe3C,IAAMi2C,GAAiE,CACnE34C,aAAc,CAAE6Z,MAAO,wBAAyB++B,qBAAqB,GACrEl4C,WAAY,CAAEmZ,MAAO,6CAA8C++B,qBAAqB,GACxF/3C,eAAgB,CACZgZ,MAAO,gFACP++B,qBAAqB,GAEzB7zC,WAAY,CAAE8U,MAAO,aAAc++B,qBAAqB,GACxD3zC,gBAAiB,CAAE4U,MAAO,oBAAqB++B,qBAAqB,GACpE10C,gBAAiB,CAAE2V,MAAO,mBAAoB++B,qBAAqB,GACnEv0C,0BAA2B,CAAEwV,MAAO,mCAAoC++B,qBAAqB,GAC7Ft0C,0BAA2B,CAAEuV,MAAO,mCAAoC++B,qBAAqB,GAC7Fh0C,8BAA+B,CAAEiV,MAAO,uCAAwC++B,qBAAqB,GACrG/zC,8BAA+B,CAAEgV,MAAO,uCAAwC++B,qBAAqB,GACrG91C,aAAc,CAAE+W,MAAO,2BAA4B++B,qBAAqB,GACxE71C,YAAa,CAAE8W,MAAO,0BAA2B++B,qBAAqB,GACtEl3C,uBAAwB,CAAEmY,MAAO,4BAA6B++B,qBAAqB,GACnFh3C,mBAAoB,CAAEiY,MAAO,wBAAyB++B,qBAAqB,GAC3E52C,iCAAkC,CAAE6X,MAAO,wCAAyC++B,qBAAqB,GACzGx1C,+BAAgC,CAC5ByW,MAAO,2EACP++B,qBAAqB,GAEzBv1C,2BAA4B,CACxBwW,MAAO,uEACP++B,qBAAqB,GAEzB90C,eAAgB,CAAE+V,MAAO,mCAAoC++B,qBAAqB,GAClFh1C,eAAgB,CAAEiW,MAAO,mCAAoC++B,qBAAqB,IAIhFC,GAAqDC,WACrD,GACA,CACI,SAAK,OACL,SAAK,QACL,SAAK,OAGTC,GAAe,CAAC,SAAK,SAAK,SAAK,OAAQ,QAAS,MAAO,SAAU,UAAW,UAAW,UAEvFC,GAAwBvjC,cAAkB,SAACoC,GAAD,MAAY,CACxDwK,UAAW,CACPQ,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,IAEhC8/B,UAAW,OAWf,SAASC,GAAT,GAAwH,IAAhGr/B,EAA+F,EAA/FA,MAAO5Z,EAAwF,EAAxFA,KAAM24C,EAAkF,EAAlFA,oBAAqBO,EAA6D,EAA7DA,aAAcC,EAA+C,EAA/CA,yBAC9DljC,EAAU8iC,KAChB,EAAgDl6C,mBAAiBmB,GAAjE,mBAAOo5C,EAAP,KAAyBC,EAAzB,KACMC,EAAsB5a,mBAC5B4a,EAAoB76B,QAAU26B,EAC9B,IAAMG,EAAkB7a,mBACxB6a,EAAgB96B,QAAUy6B,EAC1B,IAgFI3R,EAhFJ,EAA8B1oC,oBAAkB,GAAhD,mBAAO26C,EAAP,KAAgBC,EAAhB,KAEMC,EAAuBziC,uBACzB,SAAC3W,GACoC,IAA7BA,EAAMq5C,YAAYC,SAIlBjB,EACAQ,KAIJE,EAAoB,IACpBI,GAAW,OAEf,CAACN,EAA0BR,IAGzBh3B,EAAM+c,iBAA0B,MAuEtC,OArEAxoB,qBAAU,WACN,GAAKsjC,EAAL,CAIA,IAAMv5C,EAAU,SAACK,GACb,GAAmB,YAAfA,EAAMwG,KAAoB,CAG1B,IAAM+yC,EAAU15C,IAAQ25C,sBACxBv6B,QAAQw6B,IAAIF,GACZR,EACIQ,EACKxrC,KAAI,SAACmrB,GAAS,IAAD,EACV,iBAAOof,GAAwBpf,UAA/B,QAAuCA,KAE1CjlB,MAAK,SAAChP,EAAGwjB,GACN,IAAMixB,EAAclB,GAAa1mC,SAAS7M,GACpC00C,EAAcnB,GAAa1mC,SAAS2W,GAE1C,OAAIixB,IAAgBC,GACR,GAGPD,GAAeC,EACT,EAGJ,KAEV/kC,KAAK,UAEQ,UAAf5U,EAAMwG,OACb2yC,GAAW,GAIPH,EAAoB76B,SACpB86B,EAAgB96B,QAAS66B,EAAoB76B,WAMzD,OADAte,YAAQ,IAAK,CAAE+5C,OAAO,GAAQj6C,GACvB,kBAAME,IAAQE,OAAO,IAAKJ,OAClC,CAACu5C,IAEJtjC,qBAAU,WACN,IAAMjW,EAAU,SAACK,GAAuB,IAAD,GAC/Bk5C,GAAW,UAAC73B,EAAIlD,eAAL,OAAC,EAAa07B,SAAS75C,EAAMwF,UACxC2zC,GAAW,GACXJ,EAAoB,IACpBH,EAAa,MAIrB,OADAh6C,OAAO0K,SAASvK,iBAAiB,QAASY,GACnC,kBAAMf,OAAO0K,SAAStK,oBAAoB,QAASW,MAC3D,CAACu5C,EAASN,IAKT3R,EADAiS,EACc,YACPb,EACO,aAEA,UAId,eAACx2B,GAAA,EAAD,CAAMC,WAAS,EAAC5L,UAAWP,EAAQmM,UAAW0X,KAAM,SAAU5gB,QAAS,EAAvE,UACI,cAACiJ,GAAA,EAAD,CAAMG,MAAI,EAAC9L,UAAWP,EAAQ+iC,UAAWoB,GAAI,EAA7C,SACI,cAAC54B,GAAA,EAAD,UAAa5H,MAEjB,cAACuI,GAAA,EAAD,CAAMG,MAAI,EAAC83B,GAAI,EAAf,SACI,cAAC3iC,GAAA,EAAD,CACI8vB,YAAaA,EACbzoC,KAAK,QACLu7C,iBAAiB,EACjBl/B,SAAUw9B,EACV12B,WAAY02B,EAAsB,8BAA2B12C,EAC7D4S,MAAOukC,EACPx3B,MAAM,YACNE,WAAY,CACRC,aACI,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,SACI,cAACuL,GAAA,EAAD,CAAYS,IAAKA,EAAKR,QAASu4B,EAA/B,SACI,cAAC,KAAD,gBAmBrB,SAASY,GAAT,GAA8E,IAApDv+B,EAAmD,EAAnDA,KAAMjR,EAA6C,EAA7CA,UAAWqL,EAAkC,EAAlCA,KAAMu6B,EAA4B,EAA5BA,SAAUr6B,EAAkB,EAAlBA,QAChEJ,EAAU0B,KAChB,EAA4C9Y,mBAAiB6xC,EAAS/+B,gBAAtE,mBAAOA,EAAP,KAAuB4oC,EAAvB,KACA,EAAsD17C,qBAAtD,mBAAO27C,EAAP,KAA4BC,EAA5B,KACA,EAA0E57C,mBAAiB,GAA3F,mBAAO67C,EAAP,KAAsCC,EAAtC,KACA,EAAwB97C,mBAAiB6xC,EAASp9B,MAAQ,IAA1D,mBAAOA,EAAP,KAAasnC,EAAb,KACA,EAAkC/7C,qBAAlC,mBAAOg8C,EAAP,KAAkBC,EAAlB,KACA,EAAgCj8C,mBAAiB6xC,EAASn9B,UAAY,IAAtE,mBAAOA,EAAP,KAAiBwnC,EAAjB,KACA,EAAoCl8C,qBAApC,mBAAOm8C,EAAP,KAAmBC,EAAnB,KACA,EAA0Cp8C,mBAAiB6xC,EAAS79B,eAAiB,IAArF,mBAAOA,EAAP,KAAsBqoC,EAAtB,KACA,EAA8Cr8C,mBAAiB6xC,EAAS59B,iBAAmB,IAA3F,mBAAOA,EAAP,KAAwBqoC,EAAxB,KACA,EAAoCt8C,mBAAiB6xC,EAAS38B,YAAc,IAA5E,mBAAOA,GAAP,KAAmBqnC,GAAnB,KACA,GAAoCv8C,mBAAiB6xC,EAASr8B,YAAc,IAA5E,qBAAOA,GAAP,MAAmBgnC,GAAnB,MACA,GAAkCx8C,mBAAiB6xC,EAAS1+B,WAAa,IAAzE,qBAAOA,GAAP,MAAkBspC,GAAlB,MACA,GAAsCz8C,mBAAiB6xC,EAAS39B,aAAe,IAA/E,qBAAOA,GAAP,MAAoBwoC,GAApB,MACA,GAAgC18C,mBAAiB6xC,EAAS19B,UAAY,IAAtE,qBAAOA,GAAP,MAAiBwoC,GAAjB,MACA,GAAwC38C,mBAAoC6xC,EAASx9B,kBAArF,qBAAO4I,GAAP,MAAqB2/B,GAArB,MACA,GAAwB58C,mBAAmB6xC,EAASj+B,MAApD,qBAAOA,GAAP,MAAa2K,GAAb,MACA,GAAkCve,mBAAkB6xC,EAAS1xB,WAA7D,qBAAOA,GAAP,MAAkB08B,GAAlB,MACA,GAAoC78C,qBAApC,qBAAO88C,GAAP,MAAmBC,GAAnB,MACA,GAA0D/8C,oBAAkB,GAA5E,qBAAOg9C,GAAP,MAA8BC,GAA9B,MACA,GAAkDj9C,mBAAiB6xC,EAASxxB,mBAA5E,qBAAOA,GAAP,MAA0B68B,GAA1B,MACA,GAA8Cl9C,mBAAiB6xC,EAASvxB,iBAAxE,qBAAOA,GAAP,MAAwB68B,GAAxB,MACA,GAA0Cn9C,mBAAiB6xC,EAASuL,eAApE,qBAAOA,GAAP,MAAsBC,GAAtB,MACA,GAA4Cr9C,mBAAiB6xC,EAASyL,gBAAtE,qBAAOA,GAAP,MAAuBC,GAAvB,MACA,GAA8Ev9C,mBAC1E6xC,EAASnD,iCADb,qBAAOA,GAAP,MAAwC8O,GAAxC,MAGA,GAA4Ex9C,mBACxE6xC,EAASlD,gCADb,qBAAOA,GAAP,MAAuC8O,GAAvC,MAGA,GAA0Cz9C,mBAAiB6xC,EAAS3b,eAApE,qBAAOA,GAAP,MAAsBwnB,GAAtB,MACA,GAAwC19C,mBAAiB6xC,EAAS1b,cAAlE,qBAAOA,GAAP,MAAqBwnB,GAArB,MACA,GAAwD39C,mBAAiB6xC,EAASxb,sBAAlF,qBAAOA,GAAP,MAA6BunB,GAA7B,MACA,GAAgE59C,mBAAiB6xC,EAASzb,0BAA1F,qBAAOA,GAAP,MAAiCynB,GAAjC,MACA,GAA8D79C,mBAAiB6xC,EAAStb,yBAAxF,qBAAOA,GAAP,MAAgCunB,GAAhC,MACA,GAAkE99C,mBAC9D6xC,EAASvb,2BADb,qBAAOA,GAAP,MAAkCynB,GAAlC,MAGA,GAAoD/9C,mBAAiB6xC,EAASrb,oBAA9E,qBAAOA,GAAP,MAA2BwnB,GAA3B,MACA,GAA0Eh+C,mBACtE6xC,EAASoM,+BADb,qBAAOA,GAAP,MAAsCC,GAAtC,MAGA,GAA8Cl+C,mBAAiB6xC,EAASiH,iBAAxE,qBAAOA,GAAP,MAAwBqF,GAAxB,MACA,GAAkCn+C,mBAA2B6xC,EAASuM,WAAtE,qBAAOA,GAAP,MAAkBC,GAAlB,MACA,GAA0Dr+C,mBAAkB6xC,EAASyM,uBAArF,qBAAOA,GAAP,MAA8BC,GAA9B,MACA,GAAsDv+C,mBAA8B6xC,EAAS8E,qBAA7F,qBAAOA,GAAP,MAA4B6H,GAA5B,MACA,GAAoCx+C,mBAAqB6xC,EAASlxC,YAAlE,qBAAOA,GAAP,MAAmB89C,GAAnB,MAEMC,GAA6BtmC,uBAAY,SAACtR,GAC5C40C,EAAkB50C,EAAEG,OAAO+O,OAC3B8lC,EAAiCv7B,KAAKhd,SACvC,IAEGo7C,GAA4BvmC,uBAC9B,SAACtR,GAAD,OAA4Cg1C,EAAiCv7B,KAAKhd,SAClF,IAEEq7C,GAAmBxmC,uBACrB,SAACtR,GAAD,OAA4Di1C,EAAQj1C,EAAEG,OAAO+O,SAC7E,IAEE6oC,GAA4BzmC,uBAC9B,SAACtR,GAAD,OAAmEi1C,EAAQj1C,EAAEG,OAAO+O,SACpF,IAEE8oC,GAAuB1mC,uBACzB,SAACtR,GAAD,OAA4Do1C,EAAYp1C,EAAEG,OAAO+O,SACjF,IAEE+oC,GAAgC3mC,uBAClC,SAACtR,GAAD,OAAmEo1C,EAAYp1C,EAAEG,OAAO+O,SACxF,IAEEgpC,GAA4B5mC,uBAC9B,SAACtR,GAAD,OAA4Du1C,EAAiBv1C,EAAEG,OAAO+O,SACtF,IAEEipC,GAAqC7mC,uBACvC,SAACtR,GAAD,OAAmEu1C,EAAiBv1C,EAAEG,OAAO+O,SAC7F,IAEEkpC,GAA8B9mC,uBAChC,SAACtR,GAAD,OAA4Dw1C,EAAmBx1C,EAAEG,OAAO+O,SACxF,IAEEmpC,GAAuC/mC,uBACzC,SAACtR,GAAD,OAAmEw1C,EAAmBx1C,EAAEG,OAAO+O,SAC/F,IAEEopC,GAAyBhnC,uBAC3B,SAACtR,GAAD,OAA4Dy1C,GAAcz1C,EAAEG,OAAO+O,SACnF,IAEEqpC,GAAkCjnC,uBACpC,SAACtR,GAAD,OAAmEy1C,GAAcz1C,EAAEG,OAAO+O,SAC1F,IAEEspC,GAAyBlnC,uBAC3B,SAACtR,GAAD,OAA4D01C,GAAc11C,EAAEG,OAAO+O,SACnF,IAEEupC,GAAkCnnC,uBACpC,SAACtR,GAAD,OAAmE01C,GAAc11C,EAAEG,OAAO+O,SAC1F,IAEEwpC,GAAwBpnC,uBAC1B,SAACtR,GAAD,OAA4D21C,GAAa31C,EAAEG,OAAO+O,SAClF,IAEEypC,GAAiCrnC,uBACnC,SAACtR,GAAD,OAAmE21C,GAAa31C,EAAEG,OAAO+O,SACzF,IAEE0pC,GAA0BtnC,uBAC5B,SAACtR,GAAD,OAA4D41C,GAAe51C,EAAEG,OAAO+O,SACpF,IAEE2pC,GAAmCvnC,uBACrC,SAACtR,GAAD,OAAmE41C,GAAe51C,EAAEG,OAAO+O,SAC3F,IAEE4pC,GAAuBxnC,uBACzB,SAACtR,GAAD,OAA4D61C,GAAY71C,EAAEG,OAAO+O,SACjF,IAEE6pC,GAAgCznC,uBAClC,SAACtR,GAAD,OAAmE61C,GAAY71C,EAAEG,OAAO+O,SACxF,IAEE8pC,GAA0B1nC,uBAC5B,SAACtR,GAAD,OAA4Do2C,GAAqBz5C,OAAOqD,EAAEG,OAAO+O,UACjG,IAEE+pC,GAAwB3nC,uBAC1B,SAACtR,GAAD,OAA4Dq2C,GAAmB15C,OAAOqD,EAAEG,OAAO+O,UAC/F,IAEEgqC,GAAsB5nC,uBACxB,SAACtR,GAAD,OAA4Du2C,GAAiB55C,OAAOqD,EAAEG,OAAO+O,UAC7F,IAEEiqC,GAAuB7nC,uBACzB,SAACtR,GAAD,OAA4Dy2C,GAAkB95C,OAAOqD,EAAEG,OAAO+O,UAC9F,IAEEkqC,GAAwC9nC,uBAC1C,SAACtR,GAAD,OACI02C,GAAmC/5C,OAAOqD,EAAEG,OAAO+O,UACvD,IAEEmqC,GAAuC/nC,uBACzC,SAACtR,GAAD,OACI22C,GAAkCh6C,OAAOqD,EAAEG,OAAO+O,UACtD,IAEEoqC,GAA4BhoC,uBAC9B,SAACtR,GAAD,OAA4D42C,GAAiB52C,EAAEG,OAAO+O,SACtF,IAEEqqC,GAA2BjoC,uBAC7B,SAACtR,GAAD,OAA4D62C,GAAgBl6C,OAAOqD,EAAEG,OAAO+O,UAC5F,IAEEsqC,GAAmCloC,uBACrC,SAACtR,GAAD,OAA4D82C,GAAwB92C,EAAEG,OAAO+O,SAC7F,IAEEuqC,GAAuCnoC,uBACzC,SAACtR,GAAD,OAA4D+2C,GAA4Bp6C,OAAOqD,EAAEG,OAAO+O,UACxG,IAEEwqC,GAAsCpoC,uBACxC,SAACtR,GAAD,OAA4Dg3C,GAA2Bh3C,EAAEG,OAAO+O,SAChG,IAEEyqC,GAAwCroC,uBAC1C,SAACtR,GAAD,OACIi3C,GAA6Bt6C,OAAOqD,EAAEG,OAAO+O,UACjD,IAEE0qC,GAAiCtoC,uBACnC,SAACtR,GAAD,OAA4Dk3C,GAAsBl3C,EAAEG,OAAO+O,SAC3F,IAEE2qC,GAA8BvoC,uBAChC,SAACtR,GAAD,OAA4Dq3C,GAAmBr3C,EAAEG,OAAO+O,SACxF,IAEE4qC,GAA4CxoC,uBAC9C,SAACtR,GAAD,OACIo3C,GAAiCz6C,OAAOqD,EAAEG,OAAO+O,UACrD,IAEE6qC,GAAuBzoC,uBAAY,SAAChE,GACtCwoC,IAAgB,SAACkE,GACb,IAAMC,EAA6C,GAGnD,OAFAzxC,OAAO2R,OAAO8/B,EAAiBD,GAC/BC,EAAgB3sC,GAAmB,GAC5B2sC,KAEX9D,IAAyB,KAC1B,IACGl8B,GAA0B3I,uBAAY,SAAChE,EAAyB4B,GAClE4mC,IAAgB,SAACkE,GACb,IAAMC,EAA6C,GAGnD,OAFAzxC,OAAO2R,OAAO8/B,EAAiBD,GAC/BC,EAAgB3sC,GAAmB4B,EAC5B+qC,OAEZ,IACGC,GAA2B5oC,uBAC7B,SAAChE,GAAD,OACIwoC,IAAgB,SAACkE,GACb,IAAMC,EAA6C,GAGnD,OAFAzxC,OAAO2R,OAAO8/B,EAAiBD,UACxBC,EAAgB3sC,GAChB2sC,OAEf,IAEEE,GAAmB7oC,uBAAY,SAACG,GAClCgG,GAAQhG,KACT,IACG2oC,GAAwB9oC,uBAAY,SAACtR,GAAD,OAAsC+1C,GAAa/1C,EAAEG,OAAOk6C,WAAU,IAC1GC,GAAwBhpC,uBAAY,SAACtR,GACvC,GAAuB,SAAnBA,EAAEG,OAAO+O,OAAuC,UAAnBlP,EAAEG,OAAO+O,MACtC,MAAM,IAAI9O,MAAJ,6BAAgCJ,EAAEG,OAAO+O,QAGnDqoC,GAAav3C,EAAEG,OAAO+O,SACvB,IACGqrC,GAA8BjpC,uBAChC,SAACtR,GAAD,OAAsCy3C,GAAyBz3C,EAAEG,OAAOk6C,WACxE,IAEEG,GAAkClpC,uBAAY,SAACtR,GACjD03C,GAAuB/6C,OAAOqD,EAAEG,OAAO+O,UACxC,IACGurC,GAAmBnpC,uBAAY,SAACjX,EAAcqgD,GAChD/C,IAAc,SAAC99C,GACX,IAAM8gD,EAAa,eAAQ9gD,GAE3B,OADA8gD,EAAcD,GAAe,CAAErgD,QACxBsgD,OAEZ,IAEGC,GAAwB9V,mBAC1B,kBACI3V,GAAc,CACVC,cAAeA,GACfC,aAAcA,GACdC,yBAA0BA,GAC1BC,qBAAsBA,GACtBC,0BAA2BA,GAC3BC,wBAAyBA,GACzBC,mBAAoBA,OAE5B,CACIN,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,KAIRnf,qBAAU,WACN,IAAIsqC,GAAW,EAETpqC,EAAU1K,WAAU,sBAAC,sBAAAnG,EAAA,mEAEfi7C,EAFe,iEAMbzkC,EAAK0kC,kBAAkB9uC,GANV,mBAOnBmpC,EAPmB,SAOA/+B,EAAK8+B,UAAUlpC,GAPf,8CAQnBspC,EARmB,UAQCl/B,EAAKi/B,WAAWrpC,GARjB,mCASnB8oC,OAAuBx4C,GATJ,sDAWfu+C,EAXe,mDAenBjhC,QAAQtY,MAAR,MACA6zC,OAAa74C,GACbg5C,OAAch5C,GAEV,gBAAa8D,MACb00C,EAAuB,KAAEvzC,SACL,kBAAN,EAAP,GACPuzC,EAAuB,EAAD,IAEtBA,EAAuB1yC,OAAO,EAAD,KAxBd,0DA2BxB,KAEH,OAAO,WACHy4C,GAAW,EACXjqC,aAAaH,MAElB,CAAC2F,EAAMpK,EAAgB+oC,IAE1BxkC,qBAAU,WACN,GAAK3C,IAAYinC,EAAjB,CAIA,IAAIgG,GAAW,EA8Bf,OAnCY,mCAiCZE,GAEO,WACHF,GAAW,GApCH,4CAOZ,sBAAAj7C,EAAA,mEAEYi7C,EAFZ,6DAMQ5E,GANR,MAMuB,IANvB,kBAMqC7/B,EAAK4kC,gBAAgBptC,EAAU5B,GANpE,uFAOQ8oC,OAAuBx4C,GAP/B,sDASYu+C,EATZ,mDAaQjhC,QAAQtY,MAAR,MACA20C,QAAc35C,GAEV,gBAAa8D,MACb00C,EAAuB,KAAEvzC,SACL,kBAAN,EAAP,GACPuzC,EAAuB,EAAD,IAEtBA,EAAuB1yC,OAAO,EAAD,KArBzC,2DAPY,yBAsCb,CAACgU,EAAMxI,EAAU5B,EAAgB6oC,EAAqBE,IAEzD,IAAMkG,GAAc3pC,uBAAY,WAC5BZ,EAAQ,CACJ1E,eAAgBA,EAChB2B,KAAMA,EACNC,SAAUA,EACVV,cAAeA,EACfC,gBAAiBA,EACjBiB,WAAYA,GACZM,WAAYA,GACZrC,UAAWA,GACXe,YAAaA,GACbC,SAAUA,GACVP,KAAMA,GAAKnO,QAAO,SAACoJ,GAAD,MAAa,KAANA,KACzBsnB,aAAc1yB,OAAO0yB,IACrBD,cAAeA,GACfE,yBAA0B3yB,OAAO2yB,IACjCC,qBAAsBA,GACtBE,wBAAyBA,GACzBD,0BAA2B7yB,OAAO6yB,IAClCE,mBAAoBA,GACpBsiB,gBAAiBA,GACjBmF,8BAA+BA,GAC/B5pC,iBAAkB4I,GAClBkD,UAAWA,GACXi+B,UAAWA,GACX/9B,kBAAmBA,GACnBC,gBAAiBA,GACjB88B,cAAeA,GACfE,eAAgBA,GAChB5O,gCAAiCA,GACjCC,+BAAgCA,GAChCxJ,OAAQ0M,EAAS1M,OACjB6c,YAAanQ,EAASmQ,YACtB1D,sBAAuBA,GACvB3H,oBAAqBA,GACrBh2C,WAAYA,OAEjB,CACC6W,EACA1E,EACA2B,EACAC,EACAV,EACAC,EACAiB,GACAM,GACArC,GACAe,GACAC,GACA8I,GACArJ,GACAuM,GACAgW,GACAD,GACAE,GACAC,GACAE,GACAD,GACAE,GACAsiB,GACAmF,GACAG,GACA/9B,GACAC,GACA88B,GACAE,GACA5O,GACAC,GACAkD,EAAS1M,OACT0M,EAASmQ,YACT1D,GACA3H,GACAh2C,KAGEshD,GAAoB3yC,OAAOnO,KAAK8b,IAAczN,KAAI,SAAC4E,GACrD,OACI,cAACglC,GAAD,CAEIr+B,MAAK,UAAK3G,EAAL,UACL4B,MAAOiH,GAAa7I,GACpBilC,WAAYyD,GACZjkC,SAAU,SAAC/R,GAAD,OAAOia,GAAwB3M,EAAiBtN,EAAEG,OAAO+O,QACnEujC,kBAAmB,SAACzyC,GAAD,OAAOia,GAAwB3M,EAAiBtN,EAAEG,OAAO+O,QAC5EwjC,UAAW,kBAAMwH,GAAyB5sC,IAC1CklC,WAAW,GAPNllC,MAYjB,OACI,eAAC,IAAM8mB,SAAP,WACI,cAACsd,GAAD,CACIlhC,KAAM0lC,GACNvE,yBAA0BnpC,OAAOnO,KAAK8b,IACtCT,UAAWqkC,GACXnkC,SAAU,kBAAMugC,IAAyB,MAE7C,eAACvjC,GAAA,EAAD,CAAQpC,KAAMA,EAAMnH,SAAS,KAAKsS,WAAS,EAACjL,QAASuqC,GAArD,UACI,cAACnJ,GAAA,EAAD,uBACA,cAAC/1B,GAAA,EAAD,UACI,eAACS,GAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASnJ,QAAS,EAA5C,UACI,eAACiJ,GAAA,EAAD,CAAMG,MAAI,EAAV,UACI,cAACy+B,GAAA,EAAD,mBACA,eAACC,GAAA,EAAD,CAAWxqC,UAAWP,EAAQR,KAA9B,UACI,cAACgC,GAAA,EAAD,CACImC,MAAM,mBACN/E,MAAOlD,EACP1K,MAAOkwC,QAAQqD,GACfv4B,WAAYu4B,EACZ54B,MAAM,YACNlK,SAAU6lC,GACVz7B,WAAY,CACRC,aACI,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,SACI,cAACuL,GAAA,EAAD,CAAYC,QAASq8B,GAArB,SACI,cAAC,KAAD,WAMpB,eAACyD,GAAA,EAAD,0BACiB/hD,OAAOgiD,SAAS1S,SAAW,KAAOtvC,OAAOgiD,SAASC,SADnE,uEAE8D,IAC1D,cAACpmB,GAAA,EAAD,CACInZ,MAAM,YACN9b,OAAO,SACP2tB,IAAI,aACJvpB,KAAK,oCAJT,mBAHJ,OAaA,cAAC+tC,GAAD,CACIr+B,MAAM,OACN/E,MAAOvB,EACP4kC,WAAY2C,EACZnjC,SAAU+lC,GACVrF,kBAAmBsF,KAEvB,cAACzF,GAAD,CACIr+B,MAAM,YACN/E,MAAOtB,EACP2kC,WAAY8C,EACZtjC,SAAUimC,GACVvF,kBAAmBwF,KAEvB,cAAC3F,GAAD,CACIr+B,MAAM,iBACN/E,MAAOhC,EACPqlC,WAAYyD,GACZjkC,SAAUmmC,GACVzF,kBAAmB0F,KAEvB,cAAC7F,GAAD,CACIr+B,MAAM,mBACN/E,MAAO/B,EACPolC,WAAYyD,GACZjkC,SAAUqmC,GACV3F,kBAAmB4F,KAEvB,cAAC/F,GAAD,CACIr+B,MAAM,aACN/E,MAAO7C,GACPkmC,WAAYyD,GACZjkC,SAAU2mC,GACVjG,kBAAmBkG,KAEvB,cAACrG,GAAD,CACIr+B,MAAM,cACN/E,MAAOd,GACPmkC,WAAYyD,GACZjkC,SAAUumC,GACV7F,kBAAmB8F,KAEvB,cAACjG,GAAD,CACIr+B,MAAM,cACN/E,MAAOR,GACP6jC,WAAYyD,GACZjkC,SAAUymC,GACV/F,kBAAmBgG,KAEvB,cAACnG,GAAD,CACIr+B,MAAM,eACN/E,MAAO9B,GACPmlC,WAAYyD,GACZjkC,SAAU6mC,GACVnG,kBAAmBoG,KAEvB,cAACvG,GAAD,CACIr+B,MAAM,YACN/E,MAAO7B,GACPklC,WAAYyD,GACZjkC,SAAU+mC,GACVrG,kBAAmBsG,KAEtBoC,GACD,cAACh+B,GAAA,EAAD,CACItM,UAAWP,EAAQ6hC,eACnB32B,QAAS,SAACxb,GAAD,OAAOm2C,IAAyB,IAF7C,8BAMA,cAACjlC,GAAD,CACI+C,MAAM,OACNqI,WAAW,kCACXX,WAAS,EACTM,MAAM,YACNnP,KAAMA,GACNqE,aAAcgpC,WAI1B,eAAC39B,GAAA,EAAD,CAAMG,MAAI,EAAV,UACI,cAACy+B,GAAA,EAAD,qBACA,eAACC,GAAA,EAAD,CAAWxqC,UAAWP,EAAQR,KAA9B,UACI,cAAC2rC,GAAA,EAAD,CACIC,QAAS,cAACC,GAAA,EAAD,CAAUtB,QAAShhC,GAAWtH,SAAUqoC,KACjDnmC,MAAM,oCAEV,cAACwnC,GAAA,EAAD,CACIC,QACI,cAACC,GAAA,EAAD,CACItB,QAAS7C,GACTzlC,SAAUwoC,KAGlBtmC,MAAM,sCAEV,cAACnC,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,sBACN0H,WAAS,EACTzM,MAAOqK,GACP0C,MAAM,YACNlK,SAAUinC,GACV4C,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,GAEVZ,WAAY,CACRC,aAAc,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,mBAGtB,cAAC8B,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,oBACN0H,WAAS,EACTzM,MAAOsK,GACPyC,MAAM,YACNlK,SAAUknC,GACV2C,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,GAEVZ,WAAY,CACRC,aAAc,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,mBAGtB,cAAC8B,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,kBACN0H,WAAS,EACTzM,MAAOonC,GACPr6B,MAAM,YACNlK,SAAUmnC,GACV0C,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,KAGd,cAACjL,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,mBACN0H,WAAS,EACTzM,MAAOsnC,GACPv6B,MAAM,YACNlK,SAAUonC,GACVyC,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,KAGd,cAACjL,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,qCACN0H,WAAS,EACTzM,MAAO04B,GACP3rB,MAAM,YACNlK,SAAUqnC,GACVwC,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,KAGd,cAACjL,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,oCACN0H,WAAS,EACTzM,MAAO24B,GACP5rB,MAAM,YACNlK,SAAUsnC,GACVuC,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,GAEVZ,WAAY,CACRC,aAAc,cAAC9G,GAAA,EAAD,CAAgBtF,SAAS,MAAzB,yBAK9B,eAACwM,GAAA,EAAD,CAAMG,MAAI,EAAV,UACI,cAACy+B,GAAA,EAAD,oCACA,gCACI,cAACK,GAAA,EAAD,CACIC,QACI,cAACG,GAAA,EAAD,CACIxB,QAASxK,KAAwBhrC,EAAoBirC,QACrD5gC,MAAOrK,EAAoBirC,QAC3B/9B,SAAUyoC,KAGlBvmC,MAAM,sBAEV,cAACwnC,GAAA,EAAD,CACIC,QACI,cAACG,GAAA,EAAD,CACIxB,QAASxK,KAAwBhrC,EAAoBmrC,MACrD9gC,MAAOrK,EAAoBmrC,MAC3Bj+B,SAAUyoC,KAGlBvmC,MAAM,oBAEV,cAACqnC,GAAA,EAAD,kHAMR,eAAC9+B,GAAA,EAAD,CAAMG,MAAI,EAAV,UACI,cAACy+B,GAAA,EAAD,wCACA,eAACC,GAAA,EAAD,CAAWxqC,UAAWP,EAAQR,KAA9B,UACI,qBAAKe,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,QACL8S,MAAM,iBACN0H,WAAS,EACTzM,MAAOkgB,GACPnT,MAAM,YACNlK,SAAUunC,OAGlB,qBAAKzoC,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,gBACN0H,WAAS,EACTzM,MAAOmgB,GACPpT,MAAM,YACNlK,SAAUwnC,GACVqC,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,OAIlB,qBAAKlM,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,QACL8S,MAAM,yBACN0H,WAAS,EACTzM,MAAOqgB,GACPtT,MAAM,YACNlK,SAAUynC,OAGlB,qBAAK3oC,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,6BACN0H,WAAS,EACTzM,MAAOogB,GACPvd,SAAU0nC,GACVmC,WAAY,CACRz4C,IAAK,EACL4Z,KAAM,GAEVd,MAAM,gBAGd,qBAAKpL,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,QACL8S,MAAM,4BACN0H,WAAS,EACTzM,MAAOugB,GACPxT,MAAM,YACNlK,SAAU2nC,OAGlB,qBAAK7oC,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,8BACN0H,WAAS,EACTigC,WAAY,CACRz4C,IAAK,EACLvF,IAAK,EACLmf,KAAM,IAEV7N,MAAOsgB,GACPvT,MAAM,YACNlK,SAAU4nC,OAGlB,qBAAK9oC,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,OACL8S,MAAM,uBACN2tB,YAAY,YACZjmB,WAAS,EACTzM,MAAOwgB,GACPzT,MAAM,YACNlK,SAAU6nC,OAGlB,qBAAK/oC,UAAWP,EAAQyhC,gBAAxB,SACI,cAACjgC,GAAA,EAAD,CACI3Q,KAAK,SACL8S,MAAM,oCACN2tB,YAAY,YACZjmB,WAAS,EACTigC,WAAY,CACRz4C,IAAK,EACLvF,IAAK,EACLmf,KAAM,IAEV7N,MAAOioC,GACPl7B,MAAM,YACNlK,SAAU+nC,OAGlB,qBAAKjpC,UAAWP,EAAQ0hC,gBAAxB,SACI,uBACI9iC,MAAO8iC,GACPnhC,UAAWP,EAAQ2hC,qBACnBlgC,SAAU8nC,GACVx1C,MAAOu2C,aAKvB,eAACp+B,GAAA,EAAD,CAAMG,MAAI,EAAV,UACI,cAACy+B,GAAA,EAAD,oBACA,gCACI,cAACK,GAAA,EAAD,CACIC,QACI,cAACG,GAAA,EAAD,CACIxB,QAAuB,UAAd/C,GACTpoC,MAAM,QACN6C,SAAUuoC,KAGlBrmC,MAAM,UAEV,cAACwnC,GAAA,EAAD,CACIC,QACI,cAACG,GAAA,EAAD,CACIxB,QAAuB,SAAd/C,GACTpoC,MAAM,OACN6C,SAAUuoC,KAGlBrmC,MAAM,eAIlB,eAACuI,GAAA,EAAD,CAAMG,MAAI,EAAC3U,GAAG,qBAAd,UACI,cAACozC,GAAA,EAAD,iCACA,cAACC,GAAA,EAAD,UACK7yC,OAAOnO,KAAK04C,IAAmBrqC,KAAI,SAACmrB,GACjC,IAAM6mB,EAAc7mB,EACdioB,EAAa/I,GAAkB2H,GACrC,OACI,cAACpH,GAAD,CAEIr/B,MAAO6nC,EAAW7nC,MAClB5Z,KACI8K,EAAU8oB,WAAa6tB,EAAW9I,oBAC5B,GACAn5C,GAAW6gD,GAAargD,KAElC24C,oBAAqB7tC,EAAU8oB,WAAa6tB,EAAW9I,oBACvDO,aAAc,SAACl5C,GAAD,OAAUogD,GAAiBpgD,EAAMqgD,IAC/ClH,yBAA0B,kBAAMruC,EAAU42C,kBATrCloB,gBAiBjC,cAAC3W,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CAAQ3B,QAASy/B,GAAjB,wBC5pCpB,IAgBMe,GAA6Bn3C,EAAoBmrC,MACjDiM,GAAgC,CAClC98C,WAAY,CAAE9E,KAAM,SACpBgF,gBAAiB,CAAEhF,KAAM64C,WAAU,WAAQ,WAC3C50C,gBAAiB,CAAEjE,KAAM,KACzBoE,0BAA2B,CAAEpE,KAAM,OACnCqE,0BAA2B,CAAErE,KAAM,OACnC2E,8BAA+B,CAAE3E,KAAM,KACvC4E,8BAA+B,CAAE5E,KAAM,KACvC6C,aAAc,CAAE7C,KAAM,KACtB8C,YAAa,CAAE9C,KAAM,KACrByB,uBAAwB,CAAEzB,KAAM,QAChC2B,mBAAoB,CAAE3B,KAAM,SAC5B+B,iCAAkC,CAAE/B,KAAM,QAC1CmD,+BAAgC,CAAEnD,KAAM64C,WAAU,cAAW,aAC7Dz1C,2BAA4B,CAAEpD,KAAM64C,WAAU,eAAY,cAC1Dl1C,eAAgB,CAAE3D,KAAM64C,WAAU,qBAAa,oBAC/Ch1C,eAAgB,CAAE7D,KAAM64C,WAAU,sBAAc,mBAChD94C,aAAc,CAAEC,KAAM64C,WAAU,kBAAU,gBAC1Cp4C,WAAY,CAAET,KAAM64C,WAAU,kBAAU,gBACxCj4C,eAAgB,CAAEZ,KAAM64C,WAAU,kBAAU,iBAG1CgJ,GAAoB,iBACpBC,GAAU,OACVC,GAAc,WACdC,GAAmB,gBACnBC,GAAqB,kBACrBC,GAAgB,aAChBC,GAAgB,aAChBC,GAAe,YACfC,GAAiB,cACjBC,GAAc,WACdC,GAAsB,mBACtBC,GAAU,OACVC,GAAkB,eAClBC,GAAmB,gBACnBC,GAA8B,2BAC9BC,GAA0B,uBAC1BC,GAA6B,0BAC7BC,GAA+B,4BAC/BC,GAAwB,qBACxBC,GAAqB,kBACrBC,GAAmC,gCACnCC,GAAuB,oBACvBC,GAAqB,kBACrBC,GAAmB,gBACnBC,GAAoB,iBACpBC,GAAqC,kCACrCC,GAAoC,iCACpCC,GAAY,SACZC,GAAiB,cACjBC,GAAe,YACfC,GAAe,YACfC,GAA2B,wBAC3BC,GAAyB,sBACzBC,GAAgB,aAEDC,G,WAIjB,aAAe,yBAHPC,WAGM,OAFNC,iBAEM,EAEVxkD,KAAKukD,MAAQvkD,KAAKgT,KAClBhT,KAAKwkD,YAAcxkD,KAAKD,W,0CAG5B,WACI,MAAO,CACHmS,eAAgBlS,KAAKkS,eACrB2B,KAAM7T,KAAK6T,KACXC,SAAU9T,KAAK8T,SACfV,cAAepT,KAAKoT,cACpBC,gBAAiBrT,KAAKqT,gBACtBiB,WAAYtU,KAAKsU,WACjBM,WAAY5U,KAAK4U,WACjBrC,UAAWvS,KAAKuS,UAChBgB,SAAUvT,KAAKuT,SACfE,iBAAkBzT,KAAKyT,iBACvBT,KAAMhT,KAAKgT,KACXM,YAAatT,KAAKsT,YAClBiiB,aAAcv1B,KAAKu1B,aACnBD,cAAet1B,KAAKs1B,cACpBE,yBAA0Bx1B,KAAKw1B,yBAC/BC,qBAAsBz1B,KAAKy1B,qBAC3BE,wBAAyB31B,KAAK21B,wBAC9BD,0BAA2B11B,KAAK01B,0BAChCE,mBAAoB51B,KAAK41B,mBACzBsiB,gBAAiBl4C,KAAKk4C,gBACtBmF,8BAA+Br9C,KAAKq9C,8BACpC99B,UAAWvf,KAAKuf,UAChBi+B,UAAWx9C,KAAKw9C,UAChB/9B,kBAAmBzf,KAAKyf,kBACxBC,gBAAiB1f,KAAK0f,gBACtB88B,cAAex8C,KAAKw8C,cACpBE,eAAgB18C,KAAK08C,eACrB5O,gCAAiC9tC,KAAK8tC,gCACtCC,+BAAgC/tC,KAAK+tC,+BACrCxJ,OAAQvkC,KAAKukC,OACb6c,YAAaphD,KAAKohD,YAClB1D,sBAAuB19C,KAAK09C,sBAC5B3H,oBAAqB/1C,KAAK+1C,oBAC1Bh2C,WAAYC,KAAKD,a,IAIzB,SAAa0kD,GACTzkD,KAAKkS,eAAiBuyC,EAAYvyC,eAClClS,KAAK6T,KAAO4wC,EAAY5wC,KACxB7T,KAAK8T,SAAW2wC,EAAY3wC,SAC5B9T,KAAKoT,cAAgBqxC,EAAYrxC,cACjCpT,KAAKqT,gBAAkBoxC,EAAYpxC,gBACnCrT,KAAKsU,WAAamwC,EAAYnwC,WAC9BtU,KAAK4U,WAAa6vC,EAAY7vC,WAC9B5U,KAAKuS,UAAYkyC,EAAYlyC,UAC7BvS,KAAKsT,YAAcmxC,EAAYnxC,YAC/BtT,KAAKuT,SAAWkxC,EAAYlxC,SAC5BvT,KAAKgT,KAAOyxC,EAAYzxC,KACxBhT,KAAKu1B,aAAekvB,EAAYlvB,aAChCv1B,KAAKs1B,cAAgBmvB,EAAYnvB,cACjCt1B,KAAKw1B,yBAA2BivB,EAAYjvB,yBAC5Cx1B,KAAKy1B,qBAAuBgvB,EAAYhvB,qBACxCz1B,KAAK21B,wBAA0B8uB,EAAY9uB,wBAC3C31B,KAAK01B,0BAA4B+uB,EAAY/uB,0BAC7C11B,KAAK41B,mBAAqB6uB,EAAY7uB,mBACtC51B,KAAKk4C,gBAAkBuM,EAAYvM,gBACnCl4C,KAAKq9C,8BAAgCoH,EAAYpH,8BACjDr9C,KAAKyT,iBAAmBgxC,EAAYhxC,iBACpCzT,KAAKuf,UAAYklC,EAAYllC,UAC7Bvf,KAAKw9C,UAAYiH,EAAYjH,UAC7Bx9C,KAAKyf,kBAAoBglC,EAAYhlC,kBACrCzf,KAAK0f,gBAAkB+kC,EAAY/kC,gBACnC1f,KAAKw8C,cAAgBiI,EAAYjI,cACjCx8C,KAAK08C,eAAiB+H,EAAY/H,eAClC18C,KAAK8tC,gCAAkC2W,EAAY3W,gCACnD9tC,KAAK+tC,+BAAiC0W,EAAY1W,+BAClD/tC,KAAKukC,OAASkgB,EAAYlgB,OAC1BvkC,KAAKohD,YAAcqD,EAAYrD,YAC/BphD,KAAK09C,sBAAwB+G,EAAY/G,sBACzC19C,KAAK+1C,oBAAsB0O,EAAY1O,oBACvC/1C,KAAKD,WAAa0kD,EAAY1kD,a,4BAGlC,WACI,MAAO,CACHw1B,aAAcv1B,KAAKu1B,aACnBD,cAAet1B,KAAKs1B,cACpBE,yBAA0Bx1B,KAAKw1B,yBAC/BC,qBAAsBz1B,KAAKy1B,qBAC3BE,wBAAyB31B,KAAK21B,wBAC9BD,0BAA2B11B,KAAK01B,0BAChCE,mBAAoB51B,KAAK41B,mBACzBynB,8BAA+Br9C,KAAKq9C,iC,wBAI5C,WACI,MAAO,CACHnrC,eAAgBlS,KAAKkS,eACrB2B,KAAM7T,KAAK6T,KACXC,SAAU9T,KAAK8T,SACfV,cAAepT,KAAKoT,cACpBC,gBAAiBrT,KAAKqT,gBACtBiB,WAAYtU,KAAKsU,WACjBM,WAAY5U,KAAK4U,WACjBrC,UAAWvS,KAAKuS,UAChBe,YAAatT,KAAKsT,YAClBC,SAAUvT,KAAKuT,SACfE,iBAAkBzT,KAAKyT,iBACvBT,KAAMhT,KAAKgT,KACXuM,UAAWvf,KAAKuf,UAChBE,kBAAmBzf,KAAKyf,kBACxBC,gBAAiB1f,KAAK0f,gBACtB88B,cAAex8C,KAAKw8C,cACpBE,eAAgB18C,KAAK08C,eACrB5O,gCAAiC9tC,KAAK8tC,gCACtCC,+BAAgC/tC,KAAK+tC,kC,wBAI7C,WACI,MAAO,CACHyP,UAAWx9C,KAAKw9C,UAChBE,sBAAuB19C,KAAK09C,sBAC5B3H,oBAAqB/1C,KAAK+1C,oBAC1Bh2C,WAAYC,KAAKD,c,4BAIzB,SAAeg6B,EAAa2N,GACxB,IAAMtyB,EAAQsvC,aAAaC,QAAQ5qB,GAEnC,OAAc,OAAV3kB,EACOsyB,EAGJ7kC,OAAOuS,K,8BAGlB,SAAiB2kB,EAAa3kB,GACL,qBAAVA,EACPsvC,aAAaE,WAAW7qB,GAExB2qB,aAAaG,QAAQ9qB,EAAK3kB,K,0BAIlC,WACI,OAAOsvC,aAAaC,QAAQvC,KAjON,yB,IAoO1B,SAAmBp4C,GACf06C,aAAaG,QAAQzC,GAAmBp4C,K,gBAG5C,WAAY,IAAD,EACP,iBAAO06C,aAAaC,QAAQtC,WAA5B,aAAwC7/C,G,IAG5C,SAASqR,GACL7T,KAAK8kD,iBAAiBzC,GAASxuC,K,oBAGnC,WAAgB,IAAD,EACX,iBAAO6wC,aAAaC,QAAQrC,WAA5B,aAA4C9/C,G,IAGhD,SAAasR,GACT9T,KAAK8kD,iBAAiBxC,GAAaxuC,K,yBAGvC,WAAqB,IAAD,EAChB,iBAAO4wC,aAAaC,QAAQpC,WAA5B,aAAiD//C,G,IAGrD,SAAkB4Q,GACdpT,KAAK8kD,iBAAiBvC,GAAkBnvC,K,2BAG5C,WAAuB,IAAD,EAClB,iBAAOsxC,aAAaC,QAAQnC,WAA5B,aAAmDhgD,G,IAGvD,SAAoB6Q,GAChBrT,KAAK8kD,iBAAiBtC,GAAoBnvC,K,sBAG9C,WAAkB,IAAD,EACb,iBAAOqxC,aAAaC,QAAQlC,WAA5B,aAA8CjgD,G,IAGlD,SAAe8R,GACXtU,KAAK8kD,iBAAiBrC,GAAenuC,K,sBAGzC,WAAkB,IAAD,EACb,iBAAOowC,aAAaC,QAAQjC,WAA5B,aAA8ClgD,G,IAGlD,SAAeoS,GACX5U,KAAK8kD,iBAAiBpC,GAAe9tC,K,qBAGzC,WAAiB,IAAD,EACZ,iBAAO8vC,aAAaC,QAAQhC,WAA5B,aAA6CngD,G,IAGjD,SAAc+P,GACVvS,KAAK8kD,iBAAiBnC,GAAcpwC,K,uBAGxC,WAAmB,IAAD,EACd,iBAAOmyC,aAAaC,QAAQ/B,WAA5B,aAA+CpgD,G,IAGnD,SAAgB8Q,GACZtT,KAAK8kD,iBAAiBlC,GAAgBtvC,K,oBAG1C,WAAgB,IAAD,EACX,iBAAOoxC,aAAaC,QAAQ9B,WAA5B,aAA4CrgD,G,IAGhD,SAAa+Q,GACTvT,KAAK8kD,iBAAiBjC,GAAatvC,K,4BAGvC,WACI,IAAMwxC,EAAmBL,aAAaC,QAAQ7B,IAE9C,OAAIiC,EACOrzC,KAAKid,MAAMo2B,GAGf,I,IAGX,SAAqBtxC,GACjBixC,aAAaG,QAAQ/B,GAAqBpxC,KAAKC,UAAU8B,M,gBAG7D,WACI,GAA0B,qBAAfzT,KAAKukD,MACZ,OAAOvkD,KAAKukD,MAGhB,IAAMS,EAAaN,aAAaC,QAAQ5B,IAExC,OAAIiC,GACAhlD,KAAKukD,MAAQ7yC,KAAKid,MAAMq2B,GACjBhlD,KAAKukD,OAGT,I,IAGX,SAASvxC,GACL0xC,aAAaG,QAAQ9B,GAASrxC,KAAKC,UAAUqB,IAC7ChT,KAAKukD,WAAQ/hD,I,yBAGjB,WACI,OAAOkiD,aAAaC,QAAQ1B,KAjVP,W,IAoVzB,SAAkB3tB,GACdovB,aAAaG,QAAQ5B,GAAkB3tB,K,wBAG3C,WACI,OAAOt1B,KAAKilD,eAAejC,GA1VP,K,IA6VxB,SAAiBztB,GACbmvB,aAAaG,QAAQ7B,GAAiB16C,OAAOitB,M,gCAGjD,WACI,OAAOmvB,aAAaC,QAAQxB,KA/VA,W,IAkWhC,SAAyB1tB,GACrBivB,aAAaG,QAAQ1B,GAAyB1tB,K,oCAGlD,WACI,OAAOz1B,KAAKilD,eAAe/B,GAxWK,I,IA2WpC,SAA6B1tB,GACzBkvB,aAAaG,QAAQ3B,GAA6B56C,OAAOktB,M,mCAG7D,WACI,OAAOkvB,aAAaC,QAAQvB,KA9WG,W,IAiXnC,SAA4BztB,GACxB+uB,aAAaG,QAAQzB,GAA4BztB,K,qCAGrD,WACI,OAAO31B,KAAKilD,eAAe5B,GArXM,K,IAwXrC,SAA8B3tB,GAC1BgvB,aAAaG,QAAQxB,GAA8B/6C,OAAOotB,M,8BAG9D,WACI,OAAOgvB,aAAaC,QAAQrB,KA5XF,I,IA+X9B,SAAuB1tB,GACnB8uB,aAAaG,QAAQvB,GAAuB1tB,K,2BAGhD,WACI,OAAO8uB,aAAaC,QAAQpB,KAnYL,sB,IAsY3B,SAAoBrL,GAChBwM,aAAaG,QAAQtB,GAAoBrL,K,yCAG7C,WACI,OAAOl4C,KAAKilD,eAAezB,GAAkC,I,IAGjE,SAAkCnG,GAC9BqH,aAAaG,QAAQrB,GAAkCl7C,OAAO+0C,M,kBAGlE,WACI,OAAOr9C,KAAKilD,eAAelB,GAlZb,M,IAqZlB,SAAWxf,GACPmgB,aAAaG,QAAQd,GAAWz7C,OAAOi8B,M,uBAG3C,WACI,MAAgD,SAAzCmgB,aAAaC,QAAQX,MAA8B,G,IAG9D,SAAgB5C,GACZsD,aAAaG,QAAQb,GAAgB17C,OAAO84C,M,qBAGhD,WACI,MAA8C,SAAvCsD,aAAaC,QAAQV,MAA4B,G,IAG5D,SAAc1kC,GACVmlC,aAAaG,QAAQZ,GAAc37C,OAAOiX,M,qBAG9C,WACI,IAAMi+B,EAAYkH,aAAaC,QAAQT,IAEvC,OAAkB,OAAd1G,EACO,OAGJA,G,IAGX,SAAcA,GACVkH,aAAaG,QAAQX,GAAc1G,K,6BAGvC,WACI,IAAMpoC,EAAQsvC,aAAaC,QAAQlB,IAEnC,OAAKruC,EAIEvS,OAAOuS,GA7bW,G,IAgc7B,SAAsBqK,GAClBilC,aAAaG,QAAQpB,GAAsBn7C,OAAOmX,M,2BAGtD,WACI,OAAOzf,KAAKilD,eAAevB,GApcJ,M,IAuc3B,SAAoBhkC,GAChBglC,aAAaG,QAAQnB,GAAoBp7C,OAAOoX,M,yBAGpD,WACI,IAAMtK,EAAQsvC,aAAaC,QAAQhB,IAEnC,OAAKvuC,EAIEvS,OAAOuS,GAjdO,G,IAodzB,SAAkBonC,GACdkI,aAAaG,QAAQlB,GAAkBr7C,OAAOk0C,M,0BAGlD,WACI,OAAOx8C,KAAKilD,eAAerB,GAxdL,I,IA2d1B,SAAmBlH,GACfgI,aAAaG,QAAQjB,GAAmBt7C,OAAOo0C,M,2CAGnD,WACI,OAAO18C,KAAKilD,eAAepB,GA/dY,I,IAke3C,SAAoC/V,GAChC4W,aAAaG,QAAQhB,GAAoCv7C,OAAOwlC,M,0CAGpE,WACI,OAAO9tC,KAAKilD,eAAenB,GAteW,M,IAye1C,SAAmC/V,GAC/B2W,aAAaG,QAAQf,GAAmCx7C,OAAOylC,M,iCAGnE,WACI,MAA0D,SAAnD2W,aAAaC,QAAQR,MAAwC,G,IAGxE,SAA0BzG,GACtBgH,aAAaG,QAAQV,GAA0B77C,OAAOo1C,M,+BAG1D,WACI,OAAO19C,KAAKilD,eAAeb,GAAwBlC,K,IAGvD,SAAwBnM,GACpB2O,aAAaG,QAAQT,GAAwB97C,OAAOytC,M,sBAGxD,WACI,QAAyBvzC,IAArBxC,KAAKwkD,YACL,OAAOxkD,KAAKwkD,YAGhB,IAAIU,EAAaR,aAAaC,QAAQN,IAEtC,GAAmB,OAAfa,EAEA,OADAllD,KAAKwkD,YAAcrC,GACZA,GAKX,IAFA,IAAMpiD,EAAa2R,KAAKid,MAAMu2B,GAE9B,MAAkBx2C,OAAOnO,KAAK4hD,IAA9B,eAAkD,CAA7C,IACKvB,EADI,UAGsBp+C,IAA5BzC,EAAW6gD,KACX7gD,EAAW6gD,GAAeuB,GAAkBvB,IAKpD,OADA5gD,KAAKwkD,YAAczkD,EACZA,G,IAGX,SAAeA,GACX2kD,aAAaG,QAAQR,GAAe3yC,KAAKC,UAAU5R,IACnDC,KAAKwkD,iBAAchiD,M,KCnhBN2iD,G,WAmBjB,WAAY1pB,GAAkB,yBAlBtBA,aAkBqB,OAjBrBh5B,UAiBqB,OAhBrBwsC,oBAgBqB,OAfrBC,mBAeqB,OAdrBC,oBAcqB,OAbrBE,0BAaqB,OAZrBD,iCAYqB,OAXrBgW,oBAWqB,OAVrBC,wBAUqB,OATrB3V,uBASqB,OARrBC,uCAQqB,OAPrBC,2BAOqB,OANrBC,gCAMqB,OALrByV,wCAKqB,OAJrBC,+BAIqB,OAHrBC,2BAGqB,OAFrBC,2BAEqB,EACzBzlD,KAAKy7B,QAAU,IAAIE,iBAAiBF,GACpCz7B,KAAKyC,KAAO,EACZzC,KAAKkvC,cAAgB,GACrBlvC,KAAKmvC,eAAiB,GACtBnvC,KAAKqvC,qBAAuB,GAC5BrvC,KAAKovC,4BAA8B,GACnCpvC,KAAKolD,eAAiB,GACtBplD,KAAKivC,eAAiB,GACtBjvC,KAAKqlD,mBAAqB,GAC1BrlD,KAAK0vC,kBAAoB,GACzB1vC,KAAK2vC,kCAAoC,GACzC3vC,KAAK4vC,sBAAwB,GAC7B5vC,KAAK6vC,2BAA6B,GAClC7vC,KAAKslD,mCAAqC,GAC1CtlD,KAAKulD,0BAA4B,GACjCvlD,KAAKwlD,sBAAwB,GAC7BxlD,KAAKylD,sBAAwB,GAE7B,IAAM7pB,EAAO57B,KAEbA,KAAKy7B,QAAQx0B,UAAY,SAACpG,GACtB,OAAQA,EAAMsG,KAAKJ,SACf,IAAK,OAED,MACJ,IAAK,QACD,IADJ,EACUgpC,EAAelvC,EAAMsG,KAD/B,cAGyBy0B,EAAKqT,gBAH9B,IAGI,2BAA0C,EACtCpoB,EADsC,SAC7BkpB,EAAa3e,WAJ9B,8BAMI,MACJ,IAAK,OAAL,oBACyBwK,EAAKsT,eAD9B,IACI,2BAAyC,EACrCroB,EADqC,YAD7C,8BAII,MACJ,IAAK,QAAL,oBACyB+U,EAAKuT,gBAD9B,IACI,2BAA0C,EACtCtoB,EADsC,YAD9C,8BAII,MACJ,IAAK,cACD,IADJ,EACU0pB,EAAqB1vC,EAAMsG,KADrC,cAGyBy0B,EAAKyT,sBAH9B,IAGI,2BAAgD,EAC5CxoB,EAD4C,SACnC0pB,EAAmBn7B,QAJpC,8BAMI,MACJ,IAAK,qBACD,IADJ,EACUk7B,EAA4BzvC,EAAMsG,KAD5C,cAGyBy0B,EAAKwT,6BAH9B,IAGI,2BAAuD,EACnDvoB,EADmD,SAC1CypB,EAA0BpiC,KAJ3C,8BAMI,MACJ,IAAK,QAAL,oBACyB0tB,EAAKwpB,gBAD9B,IACI,2BAA0C,EACtCv+B,EADsC,YAD9C,8BAII,MACJ,IAAK,YACD,IADJ,EACU6+B,EAAmB7kD,EAAMsG,KADnC,cAGyBy0B,EAAKypB,oBAH9B,IAGI,2BAA8C,EAC1Cx+B,EAD0C,SACjC6+B,EAAiBtwC,QAJlC,8BAMI,MACJ,IAAK,mBACD,IADJ,EACUuwC,EAA0B9kD,EAAMsG,KAD1C,cAGyBy0B,EAAK2pB,2BAH9B,IAGI,2BAAqD,EACjD1+B,EADiD,SACxC8+B,EAAwBvwC,QAJzC,8BAMI,MACJ,IAAK,WACD,IADJ,EACUwwC,EAAkB/kD,EAAMsG,KADlC,cAGyBy0B,EAAK8T,mBAH9B,IAGI,2BAA6C,EACzC7oB,EADyC,SAChC++B,EAAgB9jB,WAJjC,8BAMI,MACJ,IAAK,2BACD,IADJ,EACU+jB,EAAkChlD,EAAMsG,KADlD,cAGyBy0B,EAAK+T,mCAH9B,IAGI,2BAA6D,EACzD9oB,EADyD,SAChDg/B,EAAgCzwC,QAJjD,8BAMI,MACJ,IAAK,eACD,IADJ,EACU0wC,EAAsBjlD,EAAMsG,KADtC,cAGyBy0B,EAAKgU,uBAH9B,IAGI,2BAAiD,EAC7C/oB,EAD6C,SACpCi/B,EAAoB1wC,QAJrC,8BAMI,MACJ,IAAK,oBAAL,oBACyBwmB,EAAKiU,4BAD9B,IACI,2BAAsD,EAClDhpB,EADkD,YAD1D,8BAII,MACJ,IAAK,4BACD,IADJ,EACUk/B,EAAmCllD,EAAMsG,KADnD,cAGyBy0B,EAAK0pB,oCAH9B,IAGI,2BAA8D,EAC1Dz+B,EAD0D,SACjDk/B,EAAiC7U,SAJlD,8BAMI,MACJ,IAAK,eACD,IADJ,EACU8U,EAAsBnlD,EAAMsG,KADtC,cAGyBy0B,EAAK6pB,uBAH9B,IAGI,2BAAiD,EAC7C5+B,EAD6C,SACpCm/B,EAAoB5wC,QAJrC,8BAMI,MACJ,IAAK,eACD,IADJ,EACU6wC,EAAsBplD,EAAMsG,KADtC,cAGyBy0B,EAAK4pB,uBAH9B,IAGI,2BAAiD,EAC7C3+B,EAD6C,SACpCo/B,EAAoB7wC,QAJrC,8BAMI,MACJ,QACI0K,QAAQtY,MAAM,sBAAwB3G,EAAMsG,KAAKJ,W,6CAKjE,SAAgBqO,GAAgB,IAAD,EAC3BpV,KAAKyC,KAAO2S,EACZ,UAAApV,KAAKy7B,eAAL,SAAc30B,YAAY,CAAEC,QAAS,cAAeqO,MAAOpV,KAAKyC,KAAM2tC,MAAM,M,oBAGhF,SAAOvpB,GACH7mB,KAAKkvC,cAAclqC,KAAK6hB,K,qBAG5B,SAAQA,GACJ7mB,KAAKmvC,eAAenqC,KAAK6hB,K,2BAG7B,SAAcA,GACV7mB,KAAKqvC,qBAAqBrqC,KAAK6hB,K,kCAGnC,SAAqBA,GACjB7mB,KAAKovC,4BAA4BpqC,KAAK6hB,K,qBAG1C,SAAQA,GACJ7mB,KAAKolD,eAAepgD,KAAK6hB,K,qBAG7B,SAAQA,GACJ7mB,KAAKivC,eAAejqC,KAAK6hB,K,yBAG7B,SAAYA,GACR7mB,KAAKqlD,mBAAmBrgD,KAAK6hB,K,wBAGjC,SAAWA,GACP7mB,KAAK0vC,kBAAkB1qC,KAAK6hB,K,wCAGhC,SAA2BA,GACvB7mB,KAAK2vC,kCAAkC3qC,KAAK6hB,K,4BAGhD,SAAeA,GACX7mB,KAAK4vC,sBAAsB5qC,KAAK6hB,K,iCAGpC,SAAoBA,GAChB7mB,KAAK6vC,2BAA2B7qC,KAAK6hB,K,yCAGzC,SAA4BA,GACxB7mB,KAAKslD,mCAAmCtgD,KAAK6hB,K,gCAGjD,SAAmBA,GACf7mB,KAAKulD,0BAA0BvgD,KAAK6hB,K,4BAGxC,SAAeA,GACX7mB,KAAKwlD,sBAAsBxgD,KAAK6hB,K,4BAGpC,SAAeA,GACX7mB,KAAKylD,sBAAsBzgD,KAAK6hB,K,mBAGpC,SACIuK,EACA4e,EACAhiC,EACAiyB,GACD,IAAD,EACQx4B,EAAiC,CACnCV,QAAS,QACTqqB,SAAUA,EACV4e,OAAQA,EACRhjC,YAAa,EACbgB,YAAaA,EACbiyB,mBAAoBA,EACpBimB,aAAc,GAGlB,UAAAlmD,KAAKy7B,eAAL,SAAc30B,YAAYW,K,wBAG9B,SAAWygC,GAAqB,IAAD,EACrBzgC,EAAsC,CAAEV,QAAS,aAAcqO,MAAO8yB,GAC5E,UAAAloC,KAAKy7B,eAAL,SAAc30B,YAAYW,K,kBAG9B,WAAQ,IAAD,EAEH,UAAAzH,KAAKy7B,eAAL,SAAc30B,YADwB,CAAEC,QAAS,OAAQqpC,MAAM,M,mBAInE,WAAS,IAAD,EAEJ,UAAApwC,KAAKy7B,eAAL,SAAc30B,YADyB,CAAEC,QAAS,QAASqpC,MAAM,M,gCAIrE,SAAmBliC,GAAa,IAAD,EACrBzG,EAA8C,CAAEV,QAAS,qBAAsBmH,GAAIA,GACzF,UAAAlO,KAAKy7B,eAAL,SAAc30B,YAAYW,K,oBAG9B,SAAO0B,GAAiB,IAAD,EACb1B,EAAkC,CAAEV,QAAS,SAAUqO,MAAOjM,GACpE,UAAAnJ,KAAKy7B,eAAL,SAAc30B,YAAYW,K,0BAG9B,WAAgB,IAAD,EACX,UAAAzH,KAAKy7B,eAAL,SAAc30B,YAAY,CAAEC,QAAS,mB,kBAGzC,SACIjG,EACA0H,EACAkoC,EACAC,GACD,IAAD,EACQlpC,EAAuB,CACzBV,QAAS,OACTjG,SAAUA,EACV0H,qBAAsBA,EACtBmoC,iBAAkBA,EAClBD,eAAgBA,GAGpB,UAAA1wC,KAAKy7B,eAAL,SAAc30B,YAAYW,K,qIAG9B,SAASq6B,GAAqB,IAAD,EACzB,UAAA9hC,KAAKy7B,eAAL,SAAc30B,YAAY,CAAEC,QAAS,WAAY+6B,SAAUA,Q,sCAG/D,WAA4B,IAAD,EACvB,UAAA9hC,KAAKy7B,eAAL,SAAc30B,YAAY,CAAEC,QAAS,+B,0BAGzC,WAAgB,IAAD,EACX,UAAA/G,KAAKy7B,eAAL,SAAc30B,YAAY,CAAEC,QAAS,mB,+BAGzC,SAAkB8pC,GAA0B,IAAD,EACjCppC,EAA6C,CAC/CV,QAAS,oBACT8pC,eAAgBA,GAEpB,UAAA7wC,KAAKy7B,eAAL,SAAc30B,YAAYW,K,uCAG9B,SAA0B3C,GAAgB,IAAD,EAC/B2C,EAAqD,CACvDV,QAAS,4BACTjC,MAAOA,GAEX,UAAA9E,KAAKy7B,eAAL,SAAc30B,YAAYW,K,mBAG9B,WACQzH,KAAKy7B,UACLz7B,KAAKy7B,QAAQ30B,YAAY,CAAEC,QAAS,SACpC/G,KAAKy7B,QAAQI,QACb77B,KAAKy7B,aAAUj5B,EACfxC,KAAKkvC,cAAgB,GACrBlvC,KAAKmvC,eAAiB,GACtBnvC,KAAKqvC,qBAAuB,GAC5BrvC,KAAKovC,4BAA8B,GACnCpvC,KAAKolD,eAAiB,GACtBplD,KAAKivC,eAAiB,GACtBjvC,KAAKqlD,mBAAqB,GAC1BrlD,KAAK0vC,kBAAoB,GACzB1vC,KAAK2vC,kCAAoC,GACzC3vC,KAAK4vC,sBAAwB,GAC7B5vC,KAAK6vC,2BAA6B,GAClC7vC,KAAKslD,mCAAqC,GAC1CtlD,KAAKulD,0BAA4B,GACjCvlD,KAAKwlD,sBAAwB,GAC7BxlD,KAAKylD,sBAAwB,Q,KChWpBU,G,WAOjB,WAAYxb,EAA6Bt/B,GAA6B,IAAD,gCANpD+6C,sBAMoD,OALpD/6C,eAKoD,OAJpDg7C,aAAmD,GAIC,KAHpDC,mBAAyD,GAGL,KAFpDC,uBAA6D,GAG1EvmD,KAAKomD,iBAAmBzb,EACxB3qC,KAAKqL,UAAYA,EA0BjBA,EAAU2wB,WAxBQ,SAACv0B,GACf,GAA6B,kBAAzBA,EAAQN,KAAKJ,QAA6B,CAC1C,IACIhC,EADEgC,EAAUU,EAAQN,KAGxB,OAAQJ,EAAQ2pC,gBACZ,KAAK5lC,EAAesjC,KAChBrpC,EAAW,EAAKshD,aAChB,MACJ,KAAKv7C,EAAeyjC,eAChBxpC,EAAW,EAAKuhD,mBAChB,MACJ,KAAKx7C,EAAe3J,eAChB4D,EAAW,EAAKwhD,uBAChB,MACJ,QACIzmC,QAAQtY,MAAM,4BAA8BT,EAAQ2pC,gBAflB,oBAkB1B3rC,GAlB0B,IAkB1C,2BAA2B,EACvByhD,EADuB,SACrB,IAAIC,cAAc,UAnBkB,mC,4CA0BtD,SACIxmD,EACAC,EACAC,EACAC,GACW,IAAD,OACV,GAAIJ,KAAKqL,UAAU8oB,UAAW,CAC1B,IAAM3zB,EAAUR,KAAKomD,iBAAiB3lD,YAAYR,EAAQC,EAAgBC,GAE1E,OADAH,KAAKqmD,aAAarhD,KAAKxE,GAChB,WACH,EAAK00B,QAAQ10B,EAAS,EAAK6lD,eAInC,OAAOrmD,KAAKomD,iBAAiBjY,SAASluC,EAAQC,EAAgBC,EAAgBC,K,4BAGlF,SACIW,EACAb,EACAE,GACW,IAAD,OACV,GAAIJ,KAAKqL,UAAU8oB,UAAW,CAC1B,IAAM3zB,EAAUR,KAAKomD,iBAAiBnlD,kBAAkBF,EAAcb,GAEtE,OADAF,KAAKsmD,mBAAmBthD,KAAKxE,GACtB,WACH,EAAK00B,QAAQ10B,EAAS,EAAK8lD,qBAInC,OAAOtmD,KAAKomD,iBAAiB9X,eAAevtC,EAAcb,EAAgBE,K,gCAG9E,SACIc,EACAhB,EACAE,GACW,IAAD,OACV,GAAIJ,KAAKqL,UAAU8oB,UAAW,CAC1B,IAAM3zB,EAAUR,KAAKomD,iBAAiBhlD,sBAAsBF,EAAkBhB,GAE9E,OADAF,KAAKumD,uBAAuBvhD,KAAKxE,GAC1B,WACH,EAAK00B,QAAQ10B,EAAS,EAAK+lD,yBAInC,OAAOvmD,KAAKomD,iBAAiB5X,mBAAmBttC,EAAkBhB,EAAgBE,K,qBAGtF,SAAgBymB,EAA0CsZ,GACtD,IAAK,IAAIp9B,EAAIo9B,EAAKx+B,OAAS,EAAGoB,GAAK,IAAKA,EACpC,GAAI8jB,IAAasZ,EAAKp9B,GAAI,CACtBo9B,EAAK/K,OAAOryB,EAAG,GACf,S,gCAKZ,SACI1B,EACAnB,EACAoB,EACAC,EACAnB,GAEA,OAAOJ,KAAKomD,iBAAiB5Y,mBAAmBnsC,EAAkBnB,EAAgBoB,EAAYC,EAAiBnB,K,kDAGnH,SACIiC,EACAnC,EACAoB,EACAC,EACAnB,GAEA,OAAOJ,KAAKomD,iBAAiB3Y,qCAAqCprC,EAAoCnC,EAAgBoB,EAAYC,EAAiBnB,K,uCAGvJ,SACI8C,EACAhD,EACAE,GAEA,OAAOJ,KAAKomD,iBAAiB1Y,0BAA0BxqC,EAAyBhD,EAAgBE,K,kCAGpG,SACImD,EACArD,EACAoB,EACAC,EACAnB,GAEA,OAAOJ,KAAKomD,iBAAiB7Y,qBAAqBhqC,EAAgBrD,EAAgBoB,EAAYC,EAAiBnB,K,8BAGnH,SACImD,EACArD,EACAqB,EACAnB,GAEA,OAAOJ,KAAKomD,iBAAiB9Y,iBAAiB/pC,EAAgBrD,EAAgBqB,EAAiBnB,K,iCAGnG,SACImE,EACArE,EACAE,GAEA,OAAOJ,KAAKomD,iBAAiBM,oBAAoBniD,EAAmBrE,EAAgBE,K,4CAGxF,SACIqE,EACAvE,EACAE,GAEA,OAAOJ,KAAKomD,iBAAiBO,+BAA+BliD,EAAuBvE,EAAgBE,K,2CAGvG,SACI6E,EACA/E,EACAE,GAEA,OAAOJ,KAAKomD,iBAAiB/X,8BAA8BppC,EAA6B/E,EAAgBE,K,sBAG5G,SACIgF,EACAlF,EACAE,GAEA,OAAOJ,KAAKomD,iBAAiBlP,SAAS9xC,EAAQlF,EAAgBE,K,2BAGlE,SACIkF,EACApF,EACAE,GAEA,OAAOJ,KAAKomD,iBAAiBjP,cAAc7xC,EAAapF,EAAgBE,O,KCxJ1E8X,GAAYnC,YAAW,CACzBC,KAAM,CACFE,SAAU,WACV6E,gBAAiB,QACjBnL,OAAQ,QACRg3C,SAAU,SACVp8C,QAAS,OACTkZ,cAAe,SACfzN,eAAgB,SAChB0N,WAAY,UAEhB7S,MAAO,CACHysB,OAAQ,QAEZspB,aAAc,CACVjtC,OAAQ,QAEZktC,kBAAmB,CACf5wC,SAAU,WACVyhB,YAAa,GACbC,aAAc,GACd2E,OAAQ,IACR3Y,UAAW,SACX+kB,WAAY,WACZoe,WAAY,YAIpB,SAASC,GACLloC,EACAmoC,EACA3T,EACAC,GAEA,GAAI9zC,OAAOynD,YAAcpoC,EAAQ9N,WAAa,GAAK8N,EAAQ7N,YAAc,EAAG,CACxE,IAAM04B,EAAalqC,OAAO6Z,OAAOqwB,YAAclqC,OAAOynD,WAAaznD,OAAOC,YACpEynD,EAAc1nD,OAAO6Z,OAAO6tC,aAAe1nD,OAAO2nD,YAAc3nD,OAAOE,aACvE2Y,EAAczU,KAAKwF,IAAI,EAAGxF,KAAKwF,IAAIsgC,EAAa7qB,EAAQ9N,WAAYm2C,EAAcroC,EAAQ7N,cAEhGxR,OAAO4nD,SACH/uC,EAAcwG,EAAQ9N,YAAcvR,OAAOynD,WAAaznD,OAAOC,YAC/D4Y,EAAcwG,EAAQ7N,aAAexR,OAAO2nD,YAAc3nD,OAAOE,cAIzE,IAAIw1C,EACAmS,EAEJ,GAAIxoC,EAAQ9Q,YAAa,CACrBmnC,EAAS,GADY,oBAGPr2B,EAAQ9Q,aAHD,IAGrB,2BAAmC,CAAC,IAA3BC,EAA0B,QAC/BknC,EAAOnwC,KAAK,CACRkJ,GAAID,EAAEC,GACNiM,MAAOlM,EAAEkM,MACTkmB,SAAUpyB,EAAEoyB,WAGZpyB,EAAE9O,UACFmoD,EAAgBr5C,EAAEC,KAXL,oCAerBinC,OAAS3yC,EACT8kD,OAAgB9kD,EAGpB8wC,EAAe6B,GACf5B,EAAsB+T,GACtBL,EAAcrS,MAAM91B,EAAQsS,SAAUtS,EAAQkxB,OAAQmF,EAAQmS,GAqDnD,SAASC,GAAT,GAQJ,IAPPv1C,EAOM,EAPNA,iBACA3G,EAMM,EANNA,UACA4tB,EAKM,EALNA,UACAwC,EAIM,EAJNA,QACA2G,EAGM,EAHNA,OACAoQ,EAEM,EAFNA,QACAK,EACM,EADNA,8BAEMr8B,EAAU0B,KACVsvC,EAAevoB,mBACfsS,EAAWtS,mBACjB,EAAoC//B,GAAc,GAAlD,mBAAOwZ,EAAP,KAAoBC,EAApB,KACI44B,EAASvyB,UACTuyB,EAASvyB,QAAQtP,MAAQgJ,EACzB64B,EAASvyB,QAAQpP,OAAS+I,GAE9B,IAAMsuC,EAAgBjc,mBAAQ,kBAAM,IAAIma,GAAc1pB,KAAU,CAACA,IACjE,EAA8Br8B,oBAAkB,GAAhD,mBAAO8hC,EAAP,KAAgBiS,EAAhB,KACM5Q,EA9CV,WACI,MAAoCnjC,mBAASs4C,QAAQvtC,SAASs9C,oBAA9D,mBAAOllB,EAAP,KAAmBmlB,EAAnB,KASA,OAPAjxC,qBAAU,WACN,IAAMslB,EAAW,kBAAM2rB,EAAchQ,QAAQvtC,SAASs9C,qBAGtD,OAFAt9C,SAASvK,iBAAiB,mBAAoBm8B,GAEvC,kBAAM5xB,SAAStK,oBAAoB,mBAAoBk8B,MAC/D,IAEIwG,EAoCYolB,GACbC,EAAgB3oB,mBACtB2oB,EAAc5oC,QAAUujB,EACxB,IAAMqI,EAAa3L,mBACnB2L,EAAW5rB,QAAUkiB,EACrB,MAA4B9hC,mBAAiB,GAA7C,mBAAOuC,EAAP,KAAekmD,EAAf,KACA,EAA4BzoD,mBAAiB,GAA7C,mBAAO+J,EAAP,KAAekqC,EAAf,KACA,EAAsCj0C,qBAAtC,mBAAO4O,EAAP,KAAoBslC,EAApB,KACA,EAAoDl0C,qBAApD,mBAAO6gC,EAAP,KAA2BsT,EAA3B,KACA,GAAkCn0C,mBAA0B,IAA5D,qBAAOsC,GAAP,MAAkBqxC,GAAlB,MACA,GAA0C3zC,mBAAiC,IAA3E,qBAAO0oD,GAAP,MAAsBC,GAAtB,MACA,GAAgD3oD,oBAAS,GAAzD,qBAAO4iC,GAAP,MAAyBgmB,GAAzB,MACA,GAA4D5oD,mBAAuC,IAAnG,qBAAOsrC,GAAP,MAA+BmJ,GAA/B,MACA,GAAgCz0C,mBAAmB4L,EAASud,QAA5D,qBAAOuZ,GAAP,MAAiBgS,GAAjB,MACA,GAAwD10C,oBAAkB,GAA1E,qBAAOsjC,GAAP,MAA6BulB,GAA7B,MACA,GAAwC7oD,mBAAkB4S,EAAiBovC,aAA3E,qBAAO79B,GAAP,MAAqB2kC,GAArB,MACMC,GAAmBlpB,iBAA+B,IACxDkpB,GAAiBnpC,QAAU8oC,GAC3B,IAAM7mB,GAAQ+J,mBAAe,kBAAM,IAAI7O,KAAS,IAC1CkF,GAAmBpC,iBAAc,CAAE1X,EAAG,EAAG0B,EAAG,IAClD,GAAoC7pB,oBAAkB,GAAtD,qBAAOgpD,GAAP,MAAmBC,GAAnB,MACMC,GAA6BrpB,iBAAe,GAC5CD,GAAeC,iBAAuB,MAC5C,GAA0B7/B,qBAA1B,qBAAOmpD,GAAP,MAAcC,GAAd,MACA,GAAkCppD,oBAAkB,GAApD,qBAAOqpD,GAAP,MAAkBC,GAAlB,MACA,GACItpD,oBAAkB,GADtB,qBAAOupD,GAAP,MAAsDC,GAAtD,MAEMC,GAAmD5pB,mBACzD4pB,GAAiD7pC,QAAU2pC,GAC3D,OAAwCvpD,mBAAuB4S,EAAiB+iC,cAAhF,qBAAOA,GAAP,MAAqB+T,GAArB,MACA,GAAgD1pD,mBAA2B4S,EAAiB6iC,kBAA5F,qBAAOA,GAAP,MAAyBkU,GAAzB,MACA,GAAwC3pD,mBAAuB4S,EAAiB8iC,cAAhF,qBAAOA,GAAP,MAAqBkU,GAArB,MACMre,GAAYK,mBAAQ,kBAAM,IAAImb,GAAa,IAAIrmD,EAAiBi1C,GAAah1C,YAAasL,KAAY,CAAC0pC,GAAah1C,WAAYsL,IAChI49C,GAAmBzxC,uBACrB,SAACsH,GACG,GAAIA,EAAS,CACT,IAAMoqC,EAAepqC,EACrByyB,EAASvyB,QAAUkqC,EAEa,IAA5BA,EAAahhB,WACb8e,GAAYkC,EAAcjC,EAAe3T,EAAgBC,GAEzD2V,EAAaC,aAAe,SAACtoD,GACzBmmD,GAAYkC,EAAcjC,EAAe3T,EAAgBC,IAIjE2V,EAAah8C,UAAY,SAACrM,GACtBomD,EAAc/e,WAAW,GAErB0C,EAAW5rB,SACXiiB,GAAMp/B,SAIdqnD,EAAaE,aAAe,SAACvoD,GAAD,OAAWogC,GAAMkT,QAA8B,IAAtBr1B,EAAQ9R,cAE7Dk8C,EAAa3hD,QAAU,SAAC1G,GAAD,OAAW2xC,EA9HlD,SAAsB1zB,GAA4B,IAAD,IACzCtX,EACJ,iBAAQsX,EAAQtX,aAAhB,aAAQ,EAAe6hD,MACnB,KAAK,EACD7hD,EAAQ,UACR,MACJ,KAAK,EACDA,EAAQ,gBACR,MACJ,KAAK,EACDA,EAAQ,iBACR,MACJ,KAAK,EACDA,EAAQ,uBACR,MACJ,QACIA,EAAQ,gBAIhB,OAAOA,EAAQ,OAAQ,UAAAsX,EAAQtX,aAAR,eAAeC,UAAW,qBA0GK6hD,CAAaxqC,QAG/D,CAACmiB,GAAOgmB,EAAezU,IAG3B,SAAS+W,GAAiBr7C,GAAa,IAAD,EAC5BF,EAAW,UAAGujC,EAASvyB,eAAZ,aAAG,EAAkBhR,YAEtC,GAAKA,EAAL,CAHkC,oBAQlBA,GARkB,IAQlC,2BAA6B,CAAC,IAAnBC,EAAkB,QACrBA,EAAEC,KAAOA,EACTD,EAAE9O,SAAU,EAEZ8O,EAAE9O,SAAU,GAZc,gCAiBtCsX,qBAAU,WAmFN,OAlFAwwC,EAAc1S,SAAQ,SAACnjB,GAAD,OAAcy2B,EAAUz2B,MAE9C61B,EAAc7hD,OAAd,sBAAqB,4BAAAU,EAAA,gFACXyrC,EAASvyB,eADE,aACX,EAAkBhT,OADP,OAEjBi1B,GAAMp/B,QACNsxC,GAAW,GAHM,4CAMrB8T,EAAc1lB,SAAQ,WAAO,IAAD,EACxB,UAAAgQ,EAASvyB,eAAT,SAAkB9S,QAClB+0B,GAAMtzB,OACNwlC,GAAW,MAGf8T,EAAc/R,eAAc,SAACloC,GAAiB,IAAD,EACrCukC,EAASvyB,UACTuyB,EAASvyB,QAAQhS,YAAcA,GAGE,KAAjC,UAAAukC,EAASvyB,eAAT,eAAkBkpB,aAClB+e,EAAc/e,WAAW,GAG7BjH,GAAMtzB,OACNszB,GAAMkT,QAAsB,IAAdnnC,MAGlBi6C,EAAc/mB,sBAAqB,SAAChyB,GAChCq7C,GAAiBr7C,GACjBqlC,EAAsBrlC,GACtB+4C,EAAcpQ,mBAAmB3oC,MAGrC+4C,EAAcrwC,SAAQ,WAClBqwC,EAAcprB,QACdp8B,OAAOo8B,WAGXorB,EAAcuC,aAAY,SAAC9nD,GAGvB,GAFAqxC,GAAarxC,GAETA,GAAaA,EAAUC,OAAS,EAAG,CACnC,IAAMqB,EAAItB,EAAU,GACdyH,EAASnG,EAAEnB,MAAQmB,EAAES,cAC3B4vC,EAAUlqC,OAIlB89C,EAAcpmB,YAAW,SAACiB,GAAD,OAAcgS,GAAYhS,MACnDmlB,EAActkB,4BAA2B,SAACvQ,GAAD,OAAY61B,GAAwB71B,MAC7E60B,EAActU,gBAAe,SAACvgB,GAAD,OAAY81B,GAAgB91B,MACzD60B,EAAcvU,qBAAoB,WAC1BkV,EAAc5oC,UAAYojB,IAC1Bj4B,SAASs/C,iBACTb,IAAiD,OAIzD3B,EAAcyC,4BAAd,uCAA0C,WAAOxY,GAAP,eAAAprC,EAAA,0DAClC+iD,GAAiD7pC,QADf,qBAE9BkyB,EAF8B,oDAIpBlS,GAAahgB,eAJO,aAIpB,EAAsB2qC,oBAJF,uDAM1B7pC,QAAQtY,MAAR,MAN0B,QAUlCohD,IAAiD,GAVf,yDAA1C,uDAcA3B,EAAc2C,mBAAmBb,IACjC9B,EAAc4C,eAAef,IAC7B7B,EAAc6C,eAAed,IAE7BvpD,OAAOsqD,eAAiB,SAAC7jD,GAChBshD,EAAaxoC,SACdioC,EAAcprB,SAIf,kBAAMorB,EAAcprB,WAC5B,CAACoF,GAAOgmB,EAAe7kB,IAE1B,IAAMiU,GAAa7+B,uBAAY,WACvB+5B,EAASvyB,SACTioC,EAAcj7C,SAEnB,CAACi7C,IAEE3Q,GAAc9+B,uBAAY,kBAAMyvC,EAAc/6C,UAAS,CAAC+6C,IAExD7hB,GAAa5tB,uBACf,SAAC8lB,GACOsN,EAAW5rB,SACXiiB,GAAMtzB,OAGV,IAAMlL,EAAO66B,EAAW37B,EACxBslD,EAAcj6C,YAAcvK,EAAO,MAEvC,CAACd,EAAQs/B,GAAOgmB,IAepB,IAAM3gB,GAA2B9uB,uBAC7B,SAACtJ,GACO08B,EAAW5rB,UACXiiB,GAAMtzB,OACNs5C,EAAc/6C,SAGlBq9C,GAAiBr7C,GACjBqlC,EAAsBrlC,GACtB+4C,EAAcj6C,YAAc,EAC5Bi6C,EAAcpQ,mBAAmB3oC,KAErC,CAAC+4C,EAAehmB,KAGpBxqB,qBAAU,WACN,GAAK/U,IAAkC,IAArBA,GAAUC,OAA5B,CAIA,IAAM6Y,EAAWwa,aAAY,WAIzB,IAHA,IAAMryB,EAAMs+B,GAAMx+B,KAAKd,GACnBmmD,EAAgB,GAEX/kD,EAAI,EAAGA,EAAIrB,GAAUC,SAAUoB,EAAG,CACvC,IAAMC,EAAItB,GAAUqB,GAMpB,GAJIJ,GAAOK,EAAEnB,OAASc,EAAMK,EAAElB,MAAQ4oC,GAAuB1nC,EAAE8B,QAC3DgjD,EAAc9iD,KAAd,2BAAwBhC,GAAxB,IAA2ByF,MAAO1F,KAGlCJ,EAAMK,EAAEnB,MACR,OhBhZb,SAAqBiE,EAAUwjB,GAAiD,IAAvC0gC,EAAsC,uDAA7B,SAAClkD,EAAQwjB,GAAT,OAAoBxjB,IAAMwjB,GAC/E,GAAIxjB,EAAEnE,SAAW2nB,EAAE3nB,OACf,OAAO,EAGX,IAAK,IAAIoB,EAAI,EAAGA,EAAI+C,EAAEnE,SAAUoB,EAC5B,IAAKinD,EAAOlkD,EAAE/C,GAAIumB,EAAEvmB,IAChB,OAAO,EAIf,OAAO,GgB2YMknD,CAFLnC,EAAgBA,EAAchzC,MAAK,SAACo1C,EAAIC,GAAL,OAAYD,EAAGplD,MAAQqlD,EAAGrlD,SAE7BqjD,GAAiBnpC,SAAS,SAACkrC,EAAIC,GAAL,OAAYD,EAAGzhD,QAAU0hD,EAAG1hD,UAClFs/C,GAAiBD,KAEtB,IAEH,OAAO,kBAAMhxC,aAAa0D,OAC3B,CAAC9Y,GAAWgpC,GAAwBzJ,GAAOt/B,IAE9C,IAAMm1C,GAAqBt/B,uBACvB,SAACrO,GACGkqC,EAAUlqC,GACV4pC,IAAa,SAACrxC,GAAD,OACTA,EAAUkN,KAAI,SAAC5L,GAAD,MAAQ,CAClBsG,KAAMtG,EAAEsG,KACR+P,UAAWrW,EAAEqW,UACbxX,MAAOmB,EAAES,cAAgB0F,EACzB1F,cAAeT,EAAES,cACjB3B,IAAKkB,EAAEuG,YAAcJ,EACrBI,YAAavG,EAAEuG,YACfzE,MAAO9B,EAAE8B,aAGjBmiD,EAAc99C,OAAOA,KAEzB,CAAC89C,IAGLxwC,qBAAU,WACN,OAAOk0B,GAAU6C,oBACb,SAAC3sC,EAAOC,GACJD,EAAMqf,kBACNrf,EAAMof,iBACNgnC,EAAcj6C,YAAclM,EAASe,MAAQ,OAEjD,kBAAO0vC,EAASvyB,WAChB,kBAAMiiB,GAAMx+B,KAAKd,MACjB,kBAAMD,QAEX,CAACipC,GAAWsc,EAAevlD,GAAWC,EAAQs/B,KAEjDxqB,qBAAU,WACN,OAAOk0B,GAAU8C,sCACb,SAAC5sC,EAAOC,GACJD,EAAMqf,kBACNrf,EAAMof,iBACNgnC,EAAcj6C,YAAclM,EAASe,MAAQ,OAEjD,kBAAO0vC,EAASvyB,WAChB,kBAAMiiB,GAAMx+B,KAAKd,MACjB,kBAAMD,QAEX,CAACipC,GAAWsc,EAAevlD,GAAWC,EAAQs/B,KAEjDxqB,qBAAU,WACN,OAAOk0B,GAAU+C,2BACb,SAAC7sC,EAAOY,GACJZ,EAAMqf,kBACNrf,EAAMof,iBACN,IAAMnY,EAAYm5B,GAAMx+B,KAAKd,GAGzBslD,EAAcj6C,YADdvL,EAC4BoC,KAAKwF,IAAI1H,EAAS,KAAOmG,EAAY,KAAS,KAE9CjE,KAAKC,IAAI,GAAIgE,EAAY,KAAS,QAGtE,kBAAOypC,EAASvyB,aAErB,CAAC2rB,GAAWsc,EAAetlD,EAAQs/B,KAEtC,IAAM+M,GAAgCx2B,uBAClC,SAAC/O,GACG,OAAOD,EACH9G,GACA+G,EACAqsC,GAAahH,gCACbgH,GAAa/G,kCAGrB,CAACrsC,GAAWozC,GAAahH,gCAAiCgH,GAAa/G,iCAG3Et3B,qBAAU,WACN,OAAOk0B,GAAUwD,UACb,SAACttC,EAAOC,GACJD,EAAMqf,kBACNrf,EAAMof,iBAEN,IAAMsoB,GAAe7mC,IAAkC,IAArBA,GAAUC,OAE5CslD,EAAcmD,KACVtpD,EACAynC,EACMv/B,EAAyBlI,EAAUa,EAAQ,KAC3CqsC,GAA8BltC,EAAS2H,OAC7CqC,EAAesjC,MAGf7L,IACAimB,GACsB,KAAlB1nD,EAASwI,KAAT,gBACezB,EAAkB/G,EAASe,QAD1C,mBAEkBf,EAASwI,KAF3B,MAIJo/C,IAAa,OAGrB,kBAAM,KACN,WACI,IAAKhnD,IAAkC,IAArBA,GAAUC,OAAc,CACtC,IAAMmG,EAAYm5B,GAAMx+B,KAAKd,GACvBG,EAAM+B,KAAKwF,IAAIvB,EAAY,IAAMnG,GAEvC,MAAO,CACH2H,KAAM,GACNzH,MAAOiG,EACPrE,cAAeqE,EACfhG,IAAKA,EACLyH,YAAazH,EACbgD,MAAO,EACP2D,MAAO,GAIf,GAAK0/C,GAAiBnpC,SAA+C,IAApCmpC,GAAiBnpC,QAAQrd,OAI1D,OAAOwmD,GAAiBnpC,QAAQ,QAGzC,CAAC2rB,GAAWsc,EAAehmB,GAAOt/B,EAAQD,GAAWssC,GAA+BzL,IAEvF9rB,qBAAU,WACN,OAAOk0B,GAAU2C,kBACb,SAACzsC,EAAOsI,GACJtI,EAAMof,iBACNpf,EAAMqf,kBACN42B,GAAmB3tC,MAEvB,kBAAM,KACN,kBAAMzH,QAEX,CAACipC,GAAWmM,GAAoBp1C,KAEnC+U,qBAAU,WACN,OAAOk0B,GAAU+b,qBACb,SAAC7lD,GACGA,EAAMof,iBACNpf,EAAMqf,kBACN8nC,IAAoB,SAAC7oD,GAAD,OAAcA,QAEtC,kBAAM,OAEX,CAACwrC,KAEJl0B,qBAAU,WACN,OAAOk0B,GAAUgc,gCACb,SAAC9lD,EAAOiE,GACJjE,EAAMof,iBACNpf,EAAMqf,kBACN2zB,IAA0B,SAACsB,GACvB,IAAMC,EAAS,eAAQD,GAEvB,OADAC,EAAUtwC,IAAUqwC,EAAOrwC,GACpBswC,QAGf,kBAAM,OAEX,CAACzK,KAEJl0B,qBAAU,WACN,OAAOk0B,GAAU0D,+BACb,SAACxtC,EAAOiE,GACJjE,EAAMof,iBACNpf,EAAMqf,kBACN+mC,EAAcoD,0BAA0BvlD,MAE5C,kBAAM,OAEX,CAAC6lC,GAAWsc,IAEfxwC,qBAAU,WACN,OAAOk0B,GAAU4C,sBACb,SAAC1sC,EAAOsI,GACJtI,EAAMof,iBACNpf,EAAMqf,kBACN42B,GAAmB3tC,MAEvB,kBAAM,KACN,kBAAM83B,GAAMx+B,KAAKd,MACjB,kBAAMD,QAEX,CAACipC,GAAWmM,GAAoBp1C,GAAWu/B,GAAOt/B,IAErD,IAAM2oD,GAAmB9yC,uBACrB,SACI+yC,EACAC,GAEA,GAAK9oD,IAAkC,IAArBA,GAAUC,QAarB,GAAIwmD,GAAiBnpC,SAAWmpC,GAAiBnpC,QAAQrd,OAAS,EAAG,CACxE,IAAMe,EAAkBylD,GAAiBnpC,QAAQ,GACjDwrC,EAAiB9nD,EAAiBsrC,GAA8BtrC,EAAgB+F,aAf1C,CACtC,IAAMX,EAAYm5B,GAAMx+B,KAAKd,GACvBG,EAAM+B,KAAKwF,IAAIvB,EAAY,IAAMnG,GACjCb,EAAW,CACbwI,KAAM,GACNzH,MAAOiG,EACPrE,cAAeqE,EACfhG,IAAKA,EACLyH,YAAazH,EACbgD,MAAO,GAGXylD,EAAmBzpD,EAAUkI,EAAyBlI,EAAUa,EAAQ,SAMhF,CAACD,GAAWssC,GAA+BrsC,EAAQs/B,KAGvDxqB,qBAAU,WACN,OAAOk0B,GAAU2D,gBACb,SAACztC,GACGA,EAAMof,iBACNpf,EAAMqf,kBAENoqC,IACI,SAACxpD,EAAU0H,GAAX,OACIy+C,EAAcmD,KAAKtpD,EAAU0H,EAAsBsC,EAAeyjC,gBAAgB,MACtF,SAACztC,EAAU0H,GAAX,OACIy+C,EAAcmD,KAAKtpD,EAAU0H,EAAsBsC,EAAeyjC,gBAAgB,SAG9F,kBAAM,OAEX,CAAC5D,GAAWsc,EAAeqD,GAAkB/nB,IAEhD9rB,qBAAU,WACN,OAAOk0B,GAAU6D,oBACb,SAAC3tC,GACGA,EAAMof,iBACNpf,EAAMqf,kBAENoqC,IACI,SAACxpD,EAAU0H,GAAX,OACIy+C,EAAcmD,KAAKtpD,EAAU0H,EAAsBsC,EAAe3J,gBAAgB,MACtF,SAACL,EAAU0H,GAAX,OACIy+C,EAAcmD,KAAKtpD,EAAU0H,EAAsBsC,EAAe3J,gBAAgB,SAG9F,kBAAM,OAEX,CAACwpC,GAAWsc,EAAeqD,KAE9B7zC,qBAAU,WACN,OAAOk0B,GAAUuM,UACb,SAACr2C,GACGA,EAAMof,iBAEFihB,EACA+lB,EAAc/6C,QAEd+6C,EAAcj7C,UAGtB,kBAAM,OAEX,CAAC2+B,GAAWzJ,EAAS+lB,IAExBxwC,qBAAU,WACN,OAAOk0B,GAAUwM,eACb,SAACt2C,GACGA,EAAMof,iBACN,IAAMm3B,EAActV,KAAa92B,EAAS+1B,UAAY/1B,EAASud,OAASvd,EAAS+1B,UACjFkmB,EAAcnlB,SAASsV,GACvBvE,EAA8BuE,MAElC,kBAAM,OAEX,CAACzM,GAAWsc,EAAenlB,GAAU+Q,IAExC,IAAM4X,GAAwBjzC,uBAAY,kBAAMwwC,IAAoB,SAAChmB,GAAD,OAAuBA,OAAmB,IAExG0oB,GAAyBlzC,uBAAY,WAG/B,IAAD,EAFH+qB,EACAp4B,SAASs/C,iBAET,UAAAzqB,GAAahgB,eAAb,SAAsB2qC,sBAE3B,CAACpnB,IAEE8E,GAAqB7vB,uBAAY,SAAC+sB,GAChCgN,EAASvyB,UACTuyB,EAASvyB,QAAQulB,OAASA,KAE/B,IAEGomB,GAAqBnzC,uBAAY,WACnCyvC,EAAc2D,eACVxoB,IACAolB,EAAaxoC,SAAU,EACvBvf,OAAOo8B,WAEZ,CAACorB,EAAe7kB,IAEb4U,GAAiBx/B,uBACnB,SAACsqB,GACGmlB,EAAcnlB,SAASA,KAE3B,CAACmlB,IAGC9F,GAAc3pC,uBAAY,WAC5ByvC,EAAcprB,QACdp8B,OAAOo8B,UACR,CAACorB,IAEE4D,GAAiCrzC,uBAAY,WAC/CyvC,EAActS,6BACf,CAACsS,IAEE6D,GAA0BtzC,uBAAY,WACxCyvC,EAAc1P,iBACf,CAAC0P,IAEE/nB,GAAc1nB,uBAAY,WACxB0pB,EACA+lB,EAAc/6C,QAEd+6C,EAAcj7C,SAEnB,CAACi7C,EAAe/lB,IAEb6pB,GAAoBvzC,uBAAY,kBAAMkzC,OAA0B,CAACA,KAEjEM,GAAoBxzC,uBAAY,kBAAMkxC,IAAa,KAAQ,IAE7DnzB,GAQAsf,GARAtf,aACAD,GAOAuf,GAPAvf,cACAE,GAMAqf,GANArf,yBACAC,GAKAof,GALApf,qBACAE,GAIAkf,GAJAlf,wBACAD,GAGAmf,GAHAnf,0BACAE,GAEAif,GAFAjf,mBACAynB,GACAxI,GADAwI,8BAEE4N,GAAiBjgB,mBACnB,kBACI3V,GAAc,CACVE,gBACAD,iBACAE,4BACAC,wBACAE,2BACAD,6BACAE,0BAER,CACIL,GACAD,GACAE,GACAC,GACAE,GACAD,GACAE,KAkBR,OAdAnf,qBAAU,WACN,IAAM+D,EAAWwa,aAAY,WACrBrV,KAAKhd,MAAQ2lD,GAA2BtpC,QAAU,IAC9CopC,IACAC,IAAc,GAEVD,IACRC,IAAc,KAEnB,KAEH,OAAO,kBAAM1iB,cAAcnrB,MAC5B,CAAC4tC,KAGA,sBAAKlmC,IAAK8c,GAAc2Y,YAlb5B,SAAyBzxC,GAGrB,GAFAoiD,GAA2BtpC,QAAUW,KAAKhd,MAErCq8B,GAAahgB,QAAlB,CAIA,IAAIksC,EAASlsB,GAAahgB,QAAQD,wBAClCsiB,GAAiBriB,QAAQuI,EAAIrhB,EAAEilD,QAAUD,EAAO5uB,KAChD+E,GAAiBriB,QAAQiK,EAAI/iB,EAAEklD,QAAUF,EAAO/0C,MAyaMY,UAAWP,EAAQR,KAAzE,UACI,uBACIlK,QAAQ,OACRu/C,UAAU,EACV3pC,QAASwd,GACTosB,cAAeP,GACfh0C,UAAWqxC,GAAa5xC,EAAQ1F,MAAX,UAAsB0F,EAAQqwC,aAA9B,YAA8CrwC,EAAQ1F,OAC3EoR,IAAK+mC,GACLp9C,IAAKotB,IAER+I,IACG,qBAAKjrB,UAAWP,EAAQswC,kBAAxB,SACKgB,GAAcl5C,KAAI,SAAC9N,EAAU2H,GAC1B,IAAIgb,EAEoB,IAApB3iB,EAASuY,UACToK,EACI,cAACvK,GAAD,CACIC,eAAc,oBAAEo4B,EAASvyB,eAAX,aAAE,EAAkBtP,aAApB,QAA6BjQ,OAAO6Z,OAAOqwB,WACzD7oC,SAAUA,EACVsY,MAAOikC,KAIf55B,EAAU,sBAAMlZ,MAAO0gD,GAAb,SAA8BnqD,EAASwI,OAGrD,OAAIb,EAAQq/C,GAAcnmD,OAAS,EAE3B,eAAC,IAAM24B,SAAP,WACK7W,EACD,yBAFiB3iB,EAAS2H,OAO/B,cAAC,IAAM6xB,SAAP,UAAsC7W,GAAjB3iB,EAAS2H,YAIhD85B,GACG,cAAC,GAAD,CAAO7rB,KAAM+xC,GAAW7xC,QAASo0C,GAAmBn0C,iBAAkB,IAAMK,SAAS,UAArF,SACKqxC,KAGT,cAACvnB,GAAD,CACIK,iBAAkBA,GAClBH,QAASA,EACTD,MAAOA,GACPt/B,OAAQA,EACRqM,YAAaA,EACbiyB,mBAAoBA,EACpBgC,gBAAiBvgC,IAAaA,GAAUC,OAAS,EACjDqgC,iBAAkBA,GAClBb,eAAe,EACfh4B,OAAQA,EACRm5B,mBAAmB,EACnBC,WAAYA,EACZX,cAAeQ,EACfA,OAAQA,EACRP,eAAe,EACfM,eAAgBopB,YAChBxpB,iBAAiB,EACjBD,SAAUA,GACVW,iCAA0C,OAAT/gC,SAAS,IAATA,QAAA,EAAAA,GAAWC,QAAS,IAAMygC,IAAWG,EACtEG,qBAAsBA,GACtBt9B,OAAQixC,GACR9U,QAAS+U,GACTzX,OAAQuG,GACRlF,qBAAsBoG,GACtBpE,kBAAmBuoB,GACnBjoB,mBAAoBkoB,GACpBhpB,eAAgB2F,GAChB9jC,eAAgBuzC,GAChBzU,eAAgBsoB,GAChB9pB,WAAYmW,GACZpgC,QAASuqC,GACTxe,2BAA4BkoB,GAC5B74C,iBAAkBA,EAClB4wB,qBAAqB,EACrBC,0BAA2BT,EAC3BU,mBAAoBvf,GACpBwf,oBAAqB+nB,QC9zBrC,IAGMU,GAAmBz1C,aAAgC,SAACoC,GAAD,MAAY,CACjEsL,QAAS,CACL/J,SAAU,EACVqX,WAAY5Y,EAAM6Y,YAAYC,OAAO,SAAU,CAC3CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOC,MACjCC,SAAUjZ,EAAM6Y,YAAYI,SAASC,gBAEzCR,YAAa,GAEjB46B,aAAc,gBAAGl6B,EAAH,EAAGA,YAAH,MAAsB,CAChCR,WAAY5Y,EAAM6Y,YAAYC,OAAO,SAAU,CAC3CC,OAAQ/Y,EAAM6Y,YAAYE,OAAOM,QACjCJ,SAAUjZ,EAAM6Y,YAAYI,SAASK,iBAEzCZ,YAAaU,QA2DrB,SAASm6B,GACL7oC,EACA7I,EACA2xC,EACAC,GAEA,GAAI/oC,EAAKlX,MAAO,CAAC,IAAD,QACN9J,EAAK,UAAGghB,EAAKlX,MAAM9J,aAAd,QAAuBghB,EAAKhhB,MACjCC,EAAG,UAAG+gB,EAAKlX,MAAM7J,WAAd,QAAqB+gB,EAAK/gB,IAEnC,OAAOkN,EAAU68C,WACbhpC,EAAKipC,aAAc/hD,KACnBlG,KAAKC,IAAI,EAAGjC,GAAK,UAAIghB,EAAKlX,MAAMggD,oBAAf,QAA+B,IAChD7pD,GAAG,UAAI+gB,EAAKlX,MAAMigD,kBAAf,QAA6B,GAChC/oC,EAAKlX,MAAMP,OACXyX,EAAKlX,MAAMN,WAKf,IAAIxJ,EACAC,EAFR,GAAI+gB,EAAKqW,WAAarW,EAAKoW,UAYvB,OARIjf,GACAnY,EAAQmY,EAAcxW,cACtB1B,EAAMkY,EAAckF,cAEpBrd,EAAQghB,EAAKhhB,MACbC,EAAM+gB,EAAK/gB,KAGRkN,EAAU+8C,SACZlpC,EAAKqW,WAAarW,EAAKoW,UACxBp1B,KAAKC,IAAI,EAAGjC,EAAQ8pD,GACpB7pD,EAAM8pD,EACN/oC,EAAKmpC,YAOjB,SAASC,GAAcppC,EAAuBtT,EAAkBC,GAC5D,OAAIqT,EAAK/P,MACEzB,EAAMw6C,WAAWhpC,EAAKipC,aAAc/hD,KAAM8Y,EAAKhhB,MAAOghB,EAAK/P,MAAM1H,OAAQyX,EAAK/P,MAAMzH,WAG3FwX,EAAKoW,UACE5nB,EAAM06C,SAASlpC,EAAKoW,UAApB,UAA+BpW,EAAKqpC,sBAApC,QAAsDrpC,EAAKhhB,MAAO0N,EAAUC,QADvF,EAAqB,IAAD,EAOxB,SAAS28C,GAAiBtpC,GAAoC,IAAD,UACzD,GAAKA,EAAL,CAIA,IAAMhV,EAAM,8BAAGgV,EAAKipC,oBAAR,aAAG,EAAmB/hD,YAAtB,kBAA8B8Y,EAAKqW,iBAAnC,aAA8B,EAAgBnvB,YAA9C,kBAAsD8Y,EAAKoW,iBAA3D,aAAsD,EAAgBlvB,KAElF,GAAK8D,EAIL,MAAM,GAAN,OAAUA,EAAV,aAAqBhG,EAAkBgb,EAAKhhB,OAA5C,MA+BJ,SAASuqD,GAAT,GAAkE,IAAvCC,EAAsC,EAAtCA,aACjBpzB,EAAYozB,EAAaC,IAAI,SAC7B7wB,EAAU4wB,EAAaC,IAAI,WAC3BlqB,EAASiqB,EAAaC,IAAI,UAEhC,OACI,cAAC,IAAD,CAAUC,GAAI,gBAAkBnW,mBAAmBnd,GAAa,YAAcwC,EAAU,WAAa2G,IAY7G,SAASoqB,GAAT,GAMsB,IALlBH,EAKiB,EALjBA,aACAr6C,EAIiB,EAJjBA,iBACA3G,EAGiB,EAHjBA,UACAmnC,EAEiB,EAFjBA,QACAK,EACiB,EADjBA,8BAEM5Z,EAAYozB,EAAaC,IAAI,SAC7B7wB,EAAU4wB,EAAaC,IAAI,WAC3BlqB,EAAyC,SAAhCiqB,EAAaC,IAAI,UAEhC,OACI,cAAC/E,GAAD,CACIv1C,iBAAkBA,EAClB3G,UAAWA,EACX4tB,UAAWA,EACXmJ,OAAQA,EACR3G,QAASA,EACT+W,QAASA,EACTK,8BAA+BA,IAW3C,SAAS4Z,GAAQl2C,GACb,IAAMC,EAAUg1C,GAAiBj1C,GAEjC,OACI,sBACIQ,UAAW4c,YAAKnd,EAAQiN,QAAT,eACVjN,EAAQi1C,aAAel1C,EAAM4b,aAFtC,SAKK5b,EAAMY,WAy+BJu1C,OAp+Bf,WACI,IAAM1a,EAAiBhH,mBAAwB,kBAAM,IAAIje,KAAkB,IACrE/a,EAAmBg5B,mBAA0B,kBAAM,IAAIsZ,KAAoB,IAC3EnsC,EAAQ6yB,mBACV,kBACI2hB,YAAY,CACR3xC,QAAS,CACLge,QAAS,CACL4zB,KAAM,WAEV30B,UAAW,CACP20B,KAAM,WAEVplD,MAAO,CACHolD,KAAMC,IAAIC,MAEdzlD,KAAM2K,EAAiBwrC,eAGnC,CAACxrC,EAAiBwrC,YAEhBlhC,EAAO0uB,mBAAc,kBAAM,IAAIj5B,EAAKC,KAAmB,CAACA,IACxDyvC,EAAWsL,cACjB,EAAuBC,cAAhBX,EAAP,oBAEMY,EAAsC,WAAtBxL,EAASyL,UAAuD,OAA9Bb,EAAaC,IAAI,SACnEjhD,EAAY2/B,mBAAyB,kBAAM,IAAI/W,KAAmB,IAClE0W,EAAYK,mBACd,kBAAM,IAAImb,GAAa,IAAIrmD,EAAiBkS,EAAiBjS,YAAasL,KAC1E,CAAC2G,EAAiBjS,WAAYsL,IAE5B4mC,EAAgBhT,iBAA0B,MAC1CiT,EAAkBjT,iBAAqB,MAC7C,EAAgB//B,GAAe+tD,GAAxBv9C,EAAP,oBACMy9C,EAAclb,EAAcjzB,QAAU,GAAM,GAC5CouC,EAAgBnb,EAAcjzB,QAAU,IAAM,IAC9CuS,EAAc1tB,KAAKC,IAAIspD,EAAe19C,EAAQy9C,GACpD,EAA8C/tD,mBAA4B,IAA1E,mBAAOiuD,EAAP,KAAwBC,EAAxB,KACMC,EAAqBtuB,iBAA0B,IACrDsuB,EAAmBvuC,QAAUquC,EAC7B,MAA8CjuD,oBAAkB,GAAhE,mBAAOouD,EAAP,KAAwBC,EAAxB,KACA,EAAsCruD,mBAAkB4S,EAAiBovC,aAAzE,mBAAOA,EAAP,KAAoBsM,EAApB,KACA,EAAsCtuD,oBAAkB,GAAxD,mBAAO+yC,EAAP,KAAoBwb,GAApB,KACA,GAA0BvuD,qBAA1B,qBAAOmpD,GAAP,MAAcC,GAAd,MACA,GAAkCppD,oBAAkB,GAApD,qBAAOqpD,GAAP,MAAkBC,GAAlB,MACA,GAA0CtpD,qBAA1C,qBAAOwuD,GAAP,MAAsBC,GAAtB,MACA,GAA4CzuD,qBAA5C,qBAAOmrC,GAAP,MAAuBujB,GAAvB,MACA,GAA4C1uD,qBAA5C,qBAAO0zC,GAAP,MAAuBib,GAAvB,MACA,GAA8B3uD,mBAAuB,CAAEizB,cAAe,KAAtE,qBAAOwf,GAAP,MAAgBmc,GAAhB,MACA,GAA8B5uD,oBAAkB,GAAhD,qBAAOglB,GAAP,MAAgB6pC,GAAhB,MACA,GAAgC7uD,oBAAkB,GAAlD,qBAAOkkB,GAAP,MAAiB4qC,GAAjB,MACMC,GAAelvB,iBAAuB,MAC5C,GAAgC7/B,qBAAhC,qBAAOsV,GAAP,MAAiB05C,GAAjB,MACA,GAA4ChvD,oBAAkB,GAA9D,qBAAOivD,GAAP,MAAuBC,GAAvB,MACA,GAAoDlvD,oBAAkB,GAAtE,qBAAOmvD,GAAP,MAA2BC,GAA3B,MACA,GAA4CpvD,qBAA5C,qBAAOqvD,GAAP,MAAuBC,GAAvB,MACMC,GAA8B3jB,mBAChC,kBAAMyjB,IAnJd,SAA2B5rC,GACvB,GAAKA,EAIL,MAAO,CACHrf,cAAeqf,EAAKhhB,MACpBqd,YAAa2D,EAAK/gB,IAClBJ,UAAWmhB,EAAKra,sBAAwB,CACpC,CAAE3G,MAAOghB,EAAKhhB,MAAOC,IAAK+gB,EAAK/gB,IAAKwH,KAAMuZ,EAAKvZ,KAAMxE,MAAO+d,EAAK/d,SA0I7C8pD,CAAkBH,MAC1C,CAACA,KAECI,GAAsB7jB,mBACxB,kBACIyjB,IACA/C,GACI+C,GACAE,GACA38C,EAAiByN,kBACjBzN,EAAiB0N,mBAEzB,CACI+uC,GACAE,GACA38C,EAAiByN,kBACjBzN,EAAiB0N,kBAGnBovC,GAAkB9jB,mBACpB,kBACIyjB,IACAxC,GAAcwC,GAAgBz8C,EAAiBwqC,cAAexqC,EAAiB0qC,kBACnF,CAAC+R,GAAgBz8C,EAAiBwqC,cAAexqC,EAAiB0qC,iBAEtE,GAAgEt9C,qBAAhE,qBAAOizC,GAAP,MAAiC0c,GAAjC,MACA,GAAsD3vD,oBAAkB,GAAxE,qBAAOkzC,GAAP,MAA4B0c,GAA5B,MACA,GAAkE5vD,mBAAoC,CAClG0I,UAAW,EACXopC,QAAQ,IAFZ,qBAAOqB,GAAP,MAAkC0c,GAAlC,MAIA,GAAoD7vD,oBAAkB,GAAtE,qBAAO8vD,GAAP,MAA2BC,GAA3B,MACA,GAA8C/vD,oBAAkB,GAAhE,qBAAOgwD,GAAP,MAAwBC,GAAxB,MACA,GAAgDjwD,oBAAkB,GAAlE,qBAAOuiC,GAAP,MAAyB2tB,GAAzB,MACA,GAA0BlwD,qBAA1B,qBAAO0T,GAAP,MAAcy8C,GAAd,MACA,GAAsBnwD,qBAAtB,qBAAO61B,GAAP,MAAYu6B,GAAZ,MACA,GAA0CpwD,mBAA0B,IAApE,qBAAOgzC,GAAP,MAAsBqd,GAAtB,MACMC,GAAezwB,iBAAyB,MACxC0wB,GAAyB1wB,kBAAgB,GAC/C0wB,GAAuB3wC,QAAUszB,GACjC,IAAQjgB,GAAkBwf,GAAlBxf,cAEFu9B,GAAcp4C,uBAAY,SAAC/P,GAC7BomD,GAAiB,SACjBrF,GAAS/gD,GACTihD,IAAa,KACd,IAEGmH,GAA0Br4C,uBAAY,SAACq5B,EAA0B4d,GACnE,GAAKA,GAAyD,IAAvClB,EAAmBvuC,QAASrd,OAAnD,CAIA,IAAMkhB,EAAI,OAAG4rC,QAAH,IAAGA,IAAkBlB,EAAmBvuC,QAAQuuC,EAAmBvuC,QAAQrd,OAAS,GAC9F+sD,GAAkB7rC,GAClByrC,IAAkB,GAClBE,IAAsB,GACtBc,IAAoB,GACpBN,IAAuB,GAEnBne,GACAke,GAA4BpvC,KAAKhd,UAEtC,IAEGmtD,GAA0Bt4C,sBAAW,uCACvC,WACIlO,EACAsJ,EACAC,EACAC,EACAT,EACAxE,EACA7D,EACA+I,EACAC,EACAC,GAVJ,eAAAnN,EAAA,6DAYI0oD,IAAsB,GAZ1B,kBAe6BlyC,EAAKyzC,OACtBzmD,EACAsJ,EACAC,EACAC,EACAT,EACAxE,EACA7D,EACA+I,EACAC,EACAC,GAzBZ,OAeczM,EAfd,OA4BqB,QAATyM,IACa,YAATA,GACA46C,GAAiB,WACjBrF,GAAS,kBAAoBhiD,GAC7BkiD,IAAa,IACG,eAATz1C,IACP46C,GAAiB,WACjBrF,GAAS,iBAAmBhiD,GAC5BkiD,IAAa,IAGjB4F,IAAkB,GAIdqB,GAAuB3wC,UACvBiwC,GAA6B,CAAEnnD,UAAW6X,KAAKhd,MAAOuuC,QAAQ,IAC9D8d,IAAuB,KA7CvC,gDAiDQlvC,QAAQtY,MAAR,MACI,gBAAalB,MACbspD,GAAY,KAAEnoD,SAEdmoD,GAAYtnD,OAAO,EAAD,KArD9B,yBAwDQkmD,IAAsB,GACtBc,IAAoB,GAzD5B,4EADuC,wEA6DvC,CAAChzC,EAAMszC,KAGLr3B,GAAa/gB,uBACf,SACI1W,EACA0H,EACA0wB,EACAD,EACA6yB,EACAI,EACAF,EACArgD,EACAmH,EACA9I,EACA0mC,EACAuE,EACAtE,EACAziC,GACE,IAAD,EACGpN,GAAYkR,EAAiB0rC,uBAC7Bx8B,UAAUC,UAAUqX,UAAU13B,EAASwI,MAG3C,IAAM0mD,EAAiB,2BAChBlvD,GADgB,IAEnB0H,qBAAsBA,EACtBV,UAAW6X,KAAKhd,MAChBuL,GAAIA,GAAMumB,cACV1qB,KAAM2K,GACNo3C,aAAcA,EACd5yB,UAAWA,EACXD,UAAWA,EACXizB,eAAgBA,EAChBF,WAAYA,EACZrgD,MAAOA,EACPmH,MAAOA,EACP9I,IAAKA,IA2BT,OAxBAsjD,GAAmB,SAACD,GAChB,GAAI1c,GAAoB0c,EAAgB1rD,OAAS,EAAG,CAAC,IAAD,EAC1CsuD,EAAO5C,EAAgBA,EAAgB1rD,OAAS,GAEtD,GACIb,EAASe,QAAUouD,EAAKpuD,OACxBf,EAASgB,MAAQmuD,EAAKnuD,KACtBhB,EAASwI,OAAS2mD,EAAK3mD,OACX,OAAZwiD,QAAY,IAAZA,OAAA,EAAAA,EAAc/hD,SAAd,UAAuBkmD,EAAKnE,oBAA5B,aAAuB,EAAmB/hD,MAC5C,CACE,QAAuBvH,IAAnB0pD,GAAgCA,IAAmB+D,EAAK/D,eAAgB,CACxE,IAAMgE,EAAkB,YAAO7C,GAE/B,OADA6C,EAAmBA,EAAmBvuD,OAAS,GAAKquD,EAC7CE,EAGX,OAAO7C,GAKf,MAAM,GAAN,mBAAWA,GAAX,CAA4B2C,OAGhC,OAAQtf,QAAR,IAAQA,IAAkB5lC,EAAesjC,MACrC,KAAKtjC,EAAesjC,KAChB,MACJ,KAAKtjC,EAAeyjC,eAChBshB,GAAwB5a,EAAW+a,GACnC,MACJ,KAAKllD,EAAe3J,eAEhB6tD,IAAuB,GACvBc,GACIhvD,EAASwI,KACT,GACAoiD,GACIsE,OACAxtD,EACAwP,EAAiByN,kBACjBzN,EAAiB0N,iBAErBusC,GACI+D,EACAh+C,EAAiBwqC,cACjBxqC,EAAiB0qC,gBAErB,GAdmB,UAenByP,GAAiB6D,UAfE,QAeoB,GACvC,GACA,GACAh+C,EAAiBgB,KACjB,cAEJ,MACJ,QACI,MAAM,IAAI1M,MAAM,6BAA+BoqC,GAGnD5vC,IACA+sD,GAAiB,WACjBrF,GACsB,KAAlB1nD,EAASwI,KAAT,gBAAgCzB,EAAkB/G,EAASe,QAA3D,mBAAkFf,EAASwI,KAA3F,MAEJo/C,IAAa,MAGrB,CAACh0C,GAAU1C,EAAkB89C,GAAyBD,KAGpDM,GAAwB34C,uBAAY,kBAAMi2C,GAAmB,SAACD,GAAD,OAAsBA,OAAkB,IACrG4C,GAAyB54C,uBAAY,kBAAMi2C,GAAmB,KAAQ,IACtE4C,GAAqB74C,uBAAY,WACnCxF,EAAiBovC,aAAepvC,EAAiBovC,YACjDsM,EAAe17C,EAAiBovC,eACjC,CAACpvC,IACEs+C,GAAoB94C,uBAAY,WAClCm2C,IAAe,SAACxb,GAAD,OAAkBA,OAClC,IACGoe,GAAqB/4C,uBAAY,WACnC83C,IAAoB,GACpBH,IAAsB,KACvB,IACGnE,GAAoBxzC,uBAAY,kBAAMkxC,IAAa,KAAQ,IAC3D8H,GAA0Bh5C,uBAAY,kBAAM63C,IAAmB,KAAQ,IACvEoB,GAAsBj5C,uBACxB,SAACitC,GAAoC,IAAD,MAChCzyC,EAAiBi/B,SAAWwT,EAC5B0K,IAAsB,GAItBG,GAAoBjB,IAEpB,UAAAnc,EAAgBlzB,eAAhB,SAAyB61B,iBAAiB7iC,EAAiB6iC,kBAC3D,UAAA3C,EAAgBlzB,eAAhB,SAAyB81B,aAAa9iC,EAAiB8iC,cACvD,UAAA5C,EAAgBlzB,eAAhB,SAAyB+1B,aAAa/iC,EAAiB+iC,gBAE3D,CAAC/iC,EAAkBq8C,KAGjBqC,GAA8Bl5C,uBAChC,SAACqL,GACG,IADuB,EACjBqtC,EAAqB,GADJ,cAGF7C,GAHE,IAGvB,2BAAsC,CAAC,IAA9BvsD,EAA6B,QAC9B+hB,EAAK3U,KAAOpN,EAASoN,IACrBgiD,EAAmBlrD,KAAKlE,IALT,8BASvBwsD,EAAmB4C,KAEvB,CAAC7C,IAGCzmB,GAAoBpvB,uBACtB,SAACs6B,GACOA,IAAiBD,GAAQC,cAI7Bkc,IAAW,SAAC2C,GAGR,OAFA1mD,IAAIW,gBAAgBknC,GAEb,CACHzf,cAAes+B,EAASt+B,cACxB6G,eAAW12B,EACXsvC,kBAActvC,EACdy2B,UAAW03B,EAAS13B,UACpB8Y,aAAc4e,EAAS5e,mBAInC,CAACF,KAGC9K,GAAoBvvB,uBACtB,SAACu6B,GACOA,IAAiBF,GAAQE,cAI7Bic,IAAW,SAAC2C,GAGR,OAFA1mD,IAAIW,gBAAgBmnC,GAEb,CACH1f,cAAes+B,EAASt+B,cACxB6G,UAAWy3B,EAASz3B,UACpB4Y,aAAc6e,EAAS7e,aACvB7Y,eAAWz2B,EACXuvC,kBAAcvvC,QAI1B,CAACqvC,KAGCnZ,GAAkBlhB,sBAAW,uCAC/B,WAAOqL,GAAP,eAAA/c,EAAA,+EAE2B4lD,GACf7oC,OACArgB,EACAwP,EAAiByN,kBACjBzN,EAAiB0N,iBAN7B,OAEckxC,EAFd,OASY5+C,EAAiBuN,UACjBqxC,EAAMpxC,QAAQ1V,WAEd8mD,EAAM9mD,WAZlB,gDAeQgW,QAAQtY,MAAR,MACI,gBAAalB,MACbspD,GAAY,KAAEnoD,SAEdmoD,GAAYtnD,OAAO,EAAD,KAnB9B,yDAD+B,sDAwB/B,CAACsnD,GAAa59C,IAGZ2mB,GAAsBnhB,sBAAW,uCACnC,WAAOqL,GAAP,SAAA/c,EAAA,+EAEemmD,GACHppC,EACA7Q,EAAiBwqC,cACjBxqC,EAAiB0qC,gBAL7B,cAMY5yC,WANZ,gDAQQgW,QAAQtY,MAAR,MACI,gBAAalB,MACbspD,GAAY,KAAEnoD,SAEdmoD,GAAYtnD,OAAO,EAAD,KAZ9B,yDADmC,sDAiBnC,CAACsnD,GAAa59C,IAGZ6+C,GAAwCr5C,uBAC1C,SAACzN,EAAc2vB,GACX,IADwC,EAClCo3B,EAAgC,GADE,cAGrBp3B,GAHqB,yBAG7B7W,EAH6B,aAMhCrgB,IADAsuD,EAAa/oC,MAAK,SAAChlB,GAAD,OAAOA,EAAElB,QAAUghB,EAAKhhB,OAASkB,EAAEjB,MAAQ+gB,EAAK/gB,KAAOiB,EAAEuG,OAASuZ,EAAKvZ,SAGzFwnD,EAAa9rD,KAAK6d,IAL1B,2BAA2B,IAHa,8BAYxC/Y,EACI,IAAI5C,KAAK,CAAC8qC,EAAerhB,eAAemgC,IAAgB,CAAEzpD,KAAM,eAD5D,UAED0C,EAFC,2BAEqB,IAAI4V,MAAOoxC,cAFhC,WAKZ,CAAC/e,IAGCgf,GAA8Bx5C,uBAChC,SAACqL,GACwE,IAAD,EAA/DwP,GAActK,MAAK,SAACoF,GAAD,aAAOA,EAAEpjB,QAAF,UAAW8Y,EAAKipC,oBAAhB,aAAW,EAAmB/hD,SAK7D+jD,GAAkB,CACdxkD,KAAMuZ,EAAKvZ,KACXzH,MAAOghB,EAAKhhB,MACZC,IAAK+gB,EAAK/gB,IACV2B,cAAeof,EAAKpf,cACpB8F,YAAasZ,EAAKtZ,YAClBzE,MAAO+d,EAAK/d,QAVZ8qD,GAAY,4BAAmB/sC,EAAKipC,oBAAxB,aAAmB,EAAmB/hD,MAAO,mBAajE,CAACsoB,GAAeu9B,KAGdqB,GAAaz5C,uBAAY,SAACqL,GAC5B6rC,GAAkB7rC,GAClByrC,IAAkB,GAClBE,IAAsB,GACtBc,IAAoB,KACrB,IAEG4B,GAAyB15C,uBAAY,WACvC82C,IAAkB,GAClBE,IAAsB,GACtBc,IAAoB,GAEhBhd,KACA2c,GAA6B,CAAEnnD,UAAW6X,KAAKhd,MAAOuuC,QAAQ,IAC9D8d,IAAuB,MAE5B,CAAC1c,KAEE6e,GAAyB35C,uBAAY,WACvC,GAAKi3C,GAIL,GAAKp8B,GAActK,MAAK,SAACoF,GAAD,aAAOA,EAAEpjB,QAAF,UAAW0kD,GAAe3C,oBAA1B,aAAW,EAA6B/hD,SAAvE,CAKA,IAAMjJ,EAAW,CACbwI,KAAMmlD,GAAenlD,KACrBzH,MAAO4sD,GAAe5sD,MACtBC,IAAK2sD,GAAe3sD,IACpB2B,cAAegrD,GAAehrD,cAC9B8F,YAAaklD,GAAellD,YAC5BzE,MAAO2pD,GAAe3pD,OAE1BipD,GAAkBjtD,GAClBgtD,GAAkBhtD,GAElBowD,SAhBA,CAA+E,IAAD,EAC1EtB,GAAY,4BAAmBnB,GAAe3C,oBAAlC,aAAmB,EAA6B/hD,MAAO,oBAgBxE,CAAC0kD,GAAgBp8B,GAAe6+B,GAAwBtB,KAErDtvC,GAAkB9I,uBAAY,SAAC1E,GACjCy8C,GAASz8C,GACTu8C,IAAmB,KACpB,IAEH54C,qBAAU,WACN,SAAS26C,EAAOl9B,GACZ,GAAIA,EAAKvyB,SAAWywC,GAAczwC,OAC9B8tD,GAAiBv7B,OACd,CAGH,IAFA,IAAIgY,GAAS,EAEJnpC,EAAI,EAAGA,EAAIqvC,GAAczwC,SAAUoB,EAAG,CAC3C,IAAMsuD,EAAKjf,GAAcrvC,GACnBuuD,EAAKp9B,EAAKnxB,GAChB,GAAIsuD,EAAGnjD,KAAOojD,EAAGpjD,IAAMmjD,EAAGp4C,QAAUq4C,EAAGr4C,OAASo4C,EAAGxlD,MAAQylD,EAAGzlD,IAAK,CAC/DqgC,GAAS,EACT,OAIJA,GACAujB,GAAiBv7B,GAIAe,IAA2E,IAApEf,EAAKrvB,QAAO,SAACoJ,GAAD,OAAOA,EAAEC,KAAO+mB,GAAI/mB,IAAMD,EAAEpC,MAAQopB,GAAIppB,OAAKlK,SAGrF6tD,QAAOhtD,GACPotD,GAAY,4BAA8B36B,GAAK/mB,GAAK,IAAM+mB,GAAKhc,QAMvE,OAFA5N,EAAUkmD,cAAcH,GAEjB,kBAAM/lD,EAAUmmD,gBAAgBJ,MACxC,CAAChf,GAAend,GAAK5pB,EAAWukD,KAEnC,IAAMnpB,GAAoBjvB,uBAAY,SAACyd,GAAD,OAAwBu6B,GAAOv6B,KAAM,IAErEw8B,GAAcj6C,uBAChB,SAACyV,GACG,IACI,MA/vBhB,SAAwBA,GAKpB,IAJA,IAAIoF,EAAgB,GAChB6G,OAAY12B,EACZy2B,OAAYz2B,EAEPO,EAAI,EAAGA,EAAIkqB,EAAMtrB,SAAUoB,EAAG,CACnC,IAAMoqB,EAAIF,EAAMlqB,GACV2uD,EAAsBvkC,EAAEpjB,KAAKoF,YAAY,KAE/C,IAA6B,IAAzBuiD,EACA,MAAM,IAAIprD,MAAM,oCAAsC6mB,EAAEpjB,MAG5D,IAAMsB,EAAY8hB,EAAEpjB,KAAK6C,UAAU8kD,EAAsB,EAAGvkC,EAAEpjB,KAAKpI,QACnE,OAAQ0J,GACJ,IAAK,MACL,IAAK,MACL,IAAK,MAGL,IAAK,MACDgnB,EAAcrtB,KAAKmoB,GACnB,MACJ,IAAK,MACL,IAAK,MACL,IAAK,MACD,GAAI8L,EACA,MAAM,IAAI3yB,MAAM,8CAEpB2yB,EAAY9L,EACZ,MACJ,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,OACL,IAAK,MACL,IAAK,MACL,IAAK,OACD,GAAI+L,EACA,MAAM,IAAI5yB,MAAM,8CAEpB4yB,EAAY/L,EACZ,MACJ,QACI,MAAM,IAAI7mB,MAAM,yBAA2B+E,IAIvD,GAAI4tB,GAAaC,EACb,MAAM,IAAI5yB,MAAM,2DAGpB,MAAO,CAAE+rB,cAAeA,EAAe6G,UAAWA,EAAWD,UAAWA,GA2sBd04B,CAAe1kC,GAAvDoF,EAAN,EAAMA,cAAe6G,EAArB,EAAqBA,UAAWD,EAAhC,EAAgCA,UAoChC,GAlCA+0B,IAAW,SAAC2C,GACR1C,IAAW,GAEX,IAAIlc,OAAevvC,EACfsvC,OAAetvC,EA2BnB,OAzBIy2B,GAAaC,IA9nBrC,SAAoB2Y,GACZA,EAAQC,cACR7nC,IAAIW,gBAAgBinC,EAAQC,cAG5BD,EAAQE,cACR9nC,IAAIW,gBAAgBinC,EAAQE,cAynBZ6f,CAAWjB,GAEP13B,EACA8Y,EAAe9nC,IAAIC,gBAAgB+uB,GAC5BC,IACP4Y,EAAe7nC,IAAIC,gBAAgBgvB,IAGvCs2B,QAAOhtD,KAEPy2B,EAAY03B,EAAS13B,UACrB8Y,EAAe4e,EAAS5e,aACxB7Y,EAAYy3B,EAASz3B,UACrB4Y,EAAe6e,EAAS7e,cAGZ,CACZzf,cAAwC,IAAzBA,EAAc1wB,OAAegvD,EAASt+B,cAAgBA,EACrE6G,UAAWA,EACX4Y,aAAcA,EACd7Y,UAAWA,EACX8Y,aAAcA,MAMlB1f,EAAc1wB,OAAS,EAAG,CAC1B,IAAMuN,EAAmBmjB,EAAc,GAAGtoB,KAC1CqkD,GAAYl/C,EAAiBtC,UAAU,EAAGsC,EAAiBC,YAAY,QAE7E,MAAOjJ,GACL4Z,QAAQtY,MAAMtB,GACVA,aAAaI,MACbspD,GAAY1pD,EAAEuB,SAEdmoD,GAAYtnD,OAAOpC,OAI/B,CAAC0pD,KAGCiC,GAAkBr6C,sBAAW,uCAC/B,WAAOkiB,GAAP,6BAAA5zB,EAAA,yDACyB,IAAjB4zB,EAAM/3B,OADd,uBAEQiuD,GAAY,iDAFpB,8BAMUkC,EAAkBp4B,EAAM,GAAGq4B,qBAERD,EAAgBE,YAR7C,uBASQpC,GAAY,4BATpB,iCAaUqC,EAA2BH,EAbrC,mBAgB8B,IAAInsD,SAA2B,SAACC,EAASC,GAAV,OACjDosD,EAAyBC,eAAeC,YAAYvsD,EAASC,MAjBzE,aAgBcusD,EAhBd,QAoBoBrqC,MAAK,SAAC7hB,GAAD,OAAOA,EAAE8rD,eApBlC,wBAqBYpC,GAAY,+CArBxB,2BAyBcyC,EAAeD,EAAQxjD,KACzB,SAAC1I,GAAD,OAAO,IAAIP,SAAc,SAACC,EAASC,GAAV,OAAsBK,EAA0BmG,KAAKzG,EAASC,SAErFonB,EAAgB,GA5B9B,cA8BwBolC,GA9BxB,kEA8BmBllC,EA9BnB,aA+BYF,EA/BZ,UA+B6BE,EA/B7B,yBA+BkBnoB,KA/BlB,iKAkCQysD,GAAYxkC,GAlCpB,kDAoCQnN,QAAQtY,MAAR,MACI,gBAAalB,MACbspD,GAAY,KAAEnoD,SAEdmoD,GAAYtnD,OAAO,EAAD,KAxC9B,wEAD+B,sDA6C/B,CAACsnD,GAAa6B,KAGlBh7C,qBAAU,WACN,IAAIw2C,EAuEJ,OAFA5hD,EAAU2wB,UAAUN,GACpBrwB,EAAUinD,iBACH,kBAAMjnD,EAAU6wB,YAAYR,IAxEvB,SAKGA,EALH,8EAKZ,WAAyBj0B,GAAzB,yBAAA3B,EAAA,yDACiC,SAAzB2B,EAAQN,KAAKJ,SAA+C,WAAzBU,EAAQN,KAAKJ,QADxD,oBAU4B,KARdmtB,EAAO7oB,EAAU6oB,KAAKrvB,QAAO,SAACoJ,GAChC,OAAIA,EAAEC,KAAOzG,EAAQqtB,SAIbrtB,EAAQoE,KAAOoC,EAAEpC,MAAQpE,EAAQoE,SAGpClK,OAVjB,uBAWgB8F,EAAQoE,IACRiU,QAAQtY,MACJ,mDACIC,EAAQqtB,MACR,aACArtB,EAAQoE,IACR,kBAGRiU,QAAQtY,MACJ,mDAAqDC,EAAQqtB,MAAQ,kBArBzF,6BA4BcG,EAAMf,EAAK,GAGY,SAAzBzsB,EAAQN,KAAKJ,QA/BzB,wBAgCkBwrD,EAAc9qD,EAAQN,KAhCxC,KAkCoBqrD,KAlCpB,UAmCkCrmD,MAAM,0BAA4BomD,EAAY7wD,UAAU0J,QAnC1F,gCAmCmG3F,OAnCnG,qCAoCoB8sD,EAAY7wD,UAAUqI,KApC1C,yBAiCYsoB,EAjCZ,kCAuC4C,WAAzB5qB,EAAQN,KAAKJ,QAvChC,wBAwCkBwrD,EAAc9qD,EAAQN,KAxCxC,UAyCkCxB,QAAQunB,IAC1BqlC,EAAY7wD,UAAUkN,IAAtB,uCACI,WAAO5L,GAAP,SAAA8C,EAAA,kEACQ0sD,KADR,SAC2BrmD,MAAM,0BAA4BnJ,EAAEoI,QAD/D,8BACwE3F,OADxE,2CACiFzC,EAAE+G,KADnF,kFADJ,wDA1ChB,QAyCYsoB,EAzCZ,sCAgDYvS,QAAQtY,MAAM,mBAAqBC,EAAQN,KAAKJ,SAhD5D,2BAoDcmI,EAAmBmjB,EAAc,GAAGtoB,KAC1CqkD,GAAYl/C,EAAiBtC,UAAU,EAAGsC,EAAiBC,YAAY,OACvE6+C,GAAW,CACP37B,cAAeA,EACf6G,eAAW12B,EACXsvC,kBAActvC,EACdy2B,eAAWz2B,EACXuvC,kBAAcvvC,IAElBgtD,GAAOv6B,GA7Df,4CALY,2BAyEb,CAAC5pB,EAAW4hD,IAEf,IAAMwF,GAAoCj7C,uBAAY,SAACsqB,GACnD,OAAQA,GACJ,KAAK92B,EAAS+1B,UACVynB,GAAS,kBACTqF,GAAiB,QACjBnF,IAAa,GACb,MACJ,KAAK19C,EAASud,OACVigC,GAAS,mBACTqF,GAAiB,QACjBnF,IAAa,MAEtB,IAEGgK,GAAal7C,uBACf,SAACtR,GACOmoD,KAIJnoD,EAAE+Z,iBAEEgtC,EACA2C,GAAY,wFAIhB1B,IAAY,GACZC,GAAanvC,QAAU,KAYnB9Y,EAAEysD,aAAaj5B,OAASxzB,EAAEysD,aAAaj5B,MAAM/3B,OAAS,GAV1D,SAAwB+3B,GACpB,IAAK,IAAI32B,EAAI,EAAGA,EAAI22B,EAAM/3B,SAAUoB,EAAG,CAAC,IAAD,EACnC,GAAI,UAAC22B,EAAM32B,GAAGgvD,0BAAV,QAAC,EAA6BC,YAC9B,OAAO,EAIf,OAAO,EAGoDY,CAAe1sD,EAAEysD,aAAaj5B,OACzFm4B,GAAgB3rD,EAAEysD,aAAaj5B,OACxBxzB,EAAEysD,aAAa1lC,OAAS/mB,EAAEysD,aAAa1lC,MAAMtrB,OAAS,GAC7D8vD,GAAYvrD,EAAEysD,aAAa1lC,WAGnC,CAACggC,EAAe2C,GAAa6B,GAAaI,GAAiBxD,KAGzDwE,GAAwBr7C,uBAAY,WAAO,IAAD,EACtCyV,EAAK,UAAGyiC,GAAa1wC,eAAhB,aAAG,EAAsBiO,MAEhCA,GAASA,EAAMtrB,OAAS,GACxB8vD,GAAYxkC,KAEjB,CAACwkC,KAEEqB,GAAqBt7C,uBAAY,kCAAMk4C,GAAa1wC,eAAnB,aAAM,EAAsBrU,UAAS,IAEtEuoB,GAAmC1b,sBAAW,sBAAC,4BAAA1R,EAAA,8DACnBtD,IAA1BqvC,GAAQxf,cADqC,oDAOd,KAF7B0gC,EAAsBlhB,GAAQxf,cAAcxtB,QAAO,SAACsoB,GAAD,OAAQA,EAAEpjB,KAAK2N,SAAS,YAEzD/V,OAPyB,6DAWjDmI,EAXiD,KAYzC5C,KAZyC,SAY7B8qC,EAAeghB,WAAWD,GAZG,oCAYoB,CAC7D1rD,KAAM,cAbmC,wCAe1CqN,GAf0C,wEAiBlD,CAACA,GAAUm9B,GAAQxf,cAAe2f,IAE/BihB,GAAiBz7C,uBACnB,SAACtR,GACOmoD,IAIJnoD,EAAE+Z,mBAEN,CAACouC,KAGC6E,GAAkB17C,uBACpB,SAACtR,GACOmoD,KAIJnoD,EAAE+Z,iBACF/Z,EAAEga,kBAEG+sC,IACDkB,GAAanvC,QAAU9Y,EAAEG,OACzB6nD,IAAY,OAGpB,CAACjB,EAAeoB,KAGd8E,GAAkB37C,uBACpB,SAACtR,GACGA,EAAEg0C,YAAYj6B,iBACd/Z,EAAEg0C,YAAYh6B,kBAET+sC,GAAiBkB,GAAanvC,UAAY9Y,EAAEG,QAC7C6nD,IAAY,KAGpB,CAACjB,IAGCmG,GAAsB57C,uBAAY,kBAAMy2C,IAAW,KAAQ,IAEjE,GAA0B,MAAtBxM,EAASyL,UAAoBb,EAAaC,IAAI,SAC9C,OAAO,cAACF,GAAD,CAAiBC,aAAcA,IAG1C,IAAMgH,GACDjvC,KAAY6tB,EAAcjzB,SACO,IAAjC6yB,GAAQxf,cAAc1wB,SAAiBkwC,GAAQ3Y,YAAc2Y,GAAQ5Y,UACpE1V,QAAqC/gB,IAAtBqvC,GAAQ5Y,WAA2BmoB,IAAgBjP,EAExE,OACI,eAACmhB,EAAA,EAAD,CAAen7C,MAAOA,EAAtB,UACI,cAACo7C,GAAA,EAAD,IACA,sBACIC,OAAQd,GACRe,WAAYR,GACZS,YAAaR,GACbS,YAAaR,GAJjB,UAMI,cAAC,GAAD,CAAOz8C,KAAM+xC,GAAW7xC,QAASo0C,GAAmBn0C,iBAAkB,IAAMK,SAAU02C,GAAtF,SACKrF,KAEL,eAAC,IAAD,WACI,cAAC,IAAD,CACIqL,KAAK,SACL90C,QACI,cAAC0tC,GAAD,CACIH,aAAcA,EACdr6C,iBAAkBA,EAClB3G,UAAWA,EACXmnC,QAASod,GACT/c,8BAA+B4f,OAI3C,cAAC,IAAD,CACImB,KAAK,IACL90C,QACI,gCACI,cAACqa,GAAD,CACIO,MAAO2zB,EACP32C,KAAM82C,EACNj8B,YAAaA,EACb3a,QAASw5C,GACT93B,SAAUo4B,GACVt4B,YAAaM,GACbL,gBAAiBM,GACjBsB,uBAAwB42B,GACxB14B,SAAU64B,GACV52B,OAAQ62B,KAEZ,cAACx1C,GAAD,CACI/E,KAAM23C,GACN3yC,SAAU6yC,GACV17C,UAAWg8C,GACX/7C,MAAOg8C,GACPjhD,OAAQs+C,GAAiBsC,IACzBzkD,IAAG,OAAEykD,SAAF,IAAEA,QAAF,EAAEA,GAAgBzkD,IACrBgQ,cAAe20C,GACftyC,aAAcrK,EAAiByB,iBAC/B6I,KAAMA,EACNtK,iBAAkBA,EAClB8J,SAAUo1C,GACVr1C,SAAUs1C,GACVv1C,UAAWk0C,GACX/zC,YAAauE,GACbtE,eAAgBu0C,KAEpB,cAACl4C,GAAD,CAAa3B,KAAM04C,GAAiBt8C,MAAOA,GAAO8D,QAAS45C,KAC3D,cAAC3V,GAAD,CACIv+B,KAAMA,EACNjR,UAAWA,EACXqL,KAAMw4C,GACNt4C,QAAS65C,GACTxf,SAAUj/B,EAAiBi/B,WAE/B,cAAC/e,GAAD,CACIjZ,MAAOvE,IAAY,YACnB6c,YAAaA,EACbY,WAAYq7B,EACZp7B,OAAQ7O,GACR8O,cAAewf,GAAQxf,cACvBC,kBAAmB69B,GACnB39B,6BAA8BU,GAC9BlX,eAAgBu0C,GAChBh+B,eAAgBugC,KAEpB,uBACI5wC,IAAKwtC,GACLz3C,SAAU46C,GACVxrD,KAAK,OACLwsD,OAAO,0EACPC,UAAQ,EACR1hC,QAAM,IAEV,eAACq6B,GAAD,CAASl7B,YAAaA,EAAaY,WAAYq7B,EAA/C,UACK6F,IACG,cAACz4B,GAAD,CACIC,uBA5pCb,SA6pCaC,aA5pCvB,4DA6pCuBzvB,UAAWA,EACX+Y,QAASA,GACTd,SAAUA,GACVC,aAAcA,GACdgP,eAAgBugC,KAGxB,cAAC3uC,GAAD,CAAab,SAAUA,GAAUC,aAAcA,GAAca,QAASA,KACtE,cAACwtB,GAAD,CACII,eAAgBA,EAChBhgC,iBAAkBA,EAClB/R,OAAQs4B,GACRia,QAASod,GACTpuB,cAAeoF,GACfnF,cAAesF,GACf0L,SAAU2gB,GACV5yB,cAAeiG,GACfiM,oBAAqBmd,GACrBld,eAAgB0d,GAChBzd,cAAe0d,GACfzd,8BAA+B4f,GAC/Bx9B,IAAKA,GACLmd,cAAeA,GACfP,QAASA,GACTtH,eAAgBA,GAChBuI,eAAgBA,GAChBb,cAAeA,EACfC,gBAAiBA,EACjB7mC,UAAWA,EACX8mB,WAAYq7B,EACZjqC,aAAcA,GACd4uB,YAAaA,EACbxQ,iBAAkBA,GAClB2Q,oBAAqBA,GACrBD,yBAA0BA,GAC1BE,0BAA2BA,GAC3B5H,UAAWA,sBCluCpCopB,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqB9jD,MAAK,YAAkD,IAA/C+jD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDpBO,qBAAWpqD,SAASqqD,cAAc,UAAWC,OACzC,cAAC,IAAD,CAAeC,SAAUve,qBAAzB,SACI,cAAC,GAAD,OAOR4d,O","file":"static/js/main.b254fa3f.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './Model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './Settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (backShortcut) {\n            hotkeys(backShortcut, { capture: useCapture }, backHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (backShortcut) {\n                hotkeys.unbind(backShortcut, backHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        return () => {\n            hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            hotkeys.unbind(increaseShortcut, increaseHandler);\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.cb82d5b8.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    sign: boolean\n): boolean {\n    let next;\n\n    if (sign) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './Util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly start: number;\n    private readonly end: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this.start = start;\n        this.end = end;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n\n        await audio.play();\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                audio.pause();\n                const src = audio.src;\n                audio.src = '';\n                URL.revokeObjectURL(src);\n                resolve(undefined);\n            }, this.end - this.start + 1000);\n        });\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly start: number;\n    private readonly end: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = FileAudioData._recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this.start = start;\n        this.end = end;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    private static _recorderConfiguration() {\n        const AUDIO_TYPES: { [key: string]: string } = {\n            'audio/ogg;codecs=opus': 'ogg',\n            'audio/webm;codecs=opus': 'webm',\n        };\n        return Object.keys(AUDIO_TYPES)\n            .filter(MediaRecorder.isTypeSupported)\n            .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.readAsDataURL(await this.blob());\n            reader.onloadend = () => {\n                const result = reader.result as string;\n                const base64 = result.substring(result.indexOf(',') + 1);\n                resolve(base64);\n            };\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        await this._stopAudio(audio);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const audio = await this._audioElement(this.file, true);\n\n            audio.oncanplay = async (e) => {\n                try {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    recorder.onstop = (e) => {\n                        resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                    };\n\n                    recorder.start();\n                    await this._stopAudio(audio);\n                    recorder.stop();\n                    for (const track of stream.getAudioTracks()) {\n                        track.stop();\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            };\n        });\n    }\n\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this.start / 1000;\n                resolve(audio);\n            };\n        });\n    }\n\n    _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                audio.pause();\n                const src = audio.src;\n                audio.src = '';\n                URL.revokeObjectURL(src);\n                resolve(undefined);\n            }, this.end - this.start + 100);\n        });\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles: VideoDataSubtitleTrack[];\n    extension: string;\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import { resolveConfig } from 'prettier';\nimport sanitize from 'sanitize-filename';\nimport CanvasResizer from './CanvasResizer';\nimport { download } from './Util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    return (\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\n    );\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return sliderContext!.subtitles\n                .filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n                .filter((s) => s.text.trim() !== '')\n                .map((s) => s.text)\n                .join('\\n'); \n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(\n            initialText ??\n                selectedSubtitles\n                    .filter((s) => s.text.trim() !== '')\n                    .map((s) => s.text)\n                    .join('\\n')\n        );\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = Math.max(0, 2 * timestampBoundaryInterval[0] - timestampInterval[0]);\n        const newMax = 2 * timestampBoundaryInterval[1] - timestampInterval[1];\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={\n                                    onRerecord === undefined &&\n                                    !audioClip.isSliceable() &&\n                                    'Audio clip cannot be updated because it is pre-recorded'\n                                }\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { BufferAdapter } from \"./buffer\";\n\nexport enum SegmentType {\n    pds = 20,\n    ods = 21,\n    pcs = 22,\n    wds = 23,\n    end = 128,\n}\n\nconst segmentTypeValues = Object.values(SegmentType);\n\nexport function segmentTypeFromByte(byte: number) {\n    for (const type of segmentTypeValues) {\n        if (byte === type) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid segment type byte: ${byte}`);\n}\n\nexport enum CompositionState {\n    normal = 0,\n    acquisitionState = 64,\n    epochStart = 128,\n}\n\nconst compositionStateValues = Object.values(CompositionState);\n\nexport function compositionStateFromByte(byte: number) {\n    for (const state of compositionStateValues) {\n        if (byte === state) {\n            return state;\n        }\n    }\n\n    throw new Error(`Invalid composition state byte: ${byte}`);\n}\n\nexport function paletteUpdateFlagFromByte(byte: number) {\n    switch (byte) {\n        case 0:\n            return false;\n        case 128:\n            return true;\n        default:\n            throw new Error(`Invalid palette update flag byte: ${byte}`);\n    }\n}\n\nexport function objectCroppedFlagFromByte(byte: number) {\n    switch (byte) {\n        case 0:\n            return false;\n        case 64:\n            return true;\n        default:\n            throw new Error(`Invalid object cropped flag byte: ${byte}`);\n    }\n}\n\nexport enum LastInSequenceFlag {\n    lastInSequence = 64,\n    firstInSequence = 128,\n    firstAndLastInSequence = 192,\n}\n\nconst lastInSequenceFlagValues = Object.values(LastInSequenceFlag);\n\nexport function lastInSequenceFlagFromByte(byte: number) {\n    for (const flag of lastInSequenceFlagValues) {\n        if (byte === flag) {\n            return flag;\n        }\n    }\n\n    throw new Error(`Invalid last in sequence flag byte: ${byte}`);\n}\n\nexport interface SegmentHeader {\n    presentationTimestamp: number;\n    decodingTimestamp: number;\n    segmentType: SegmentType;\n    segmentSize: number;\n}\n\nexport interface Segment {\n    readonly header: SegmentHeader;\n}\n\nexport interface PresentationCompositionSegment extends Segment {\n    readonly width: number;\n    readonly height: number;\n    readonly compositionNumber: number;\n    readonly compositionState: CompositionState;\n    readonly paletteUpdateFlag: boolean;\n    readonly paletteId: number;\n    readonly compositionObjectCount: number;\n    readonly objectId: number;\n    readonly windowId: number;\n    readonly objectCroppedFlag: boolean;\n    readonly objectHorizontalPosition: number;\n    readonly objectVerticalPosition: number;\n    readonly objectCroppingHorizontalPosition: number;\n    readonly objectCroppingVerticalPosition: number;\n    readonly objectCroppingWidth: number;\n    readonly objectCroppingHeightPosition: number;\n}\n\nexport interface WindowDefinition {\n    readonly windowId: number;\n    readonly windowHorizontalPosition: number;\n    readonly windowVerticalPosition: number;\n    readonly windowWidth: number;\n    readonly windowHeight: number;\n}\n\nexport interface WindowDefinitionSegment extends Segment {\n    readonly windowCount: number;\n    readonly windowDefinitions: WindowDefinition[];\n}\n\nexport interface PaletteEntry {\n    readonly paletteEntryId: number;\n    readonly luminance: number;\n    readonly colorDifferenceRed: number;\n    readonly colorDifferenceBlue: number;\n    readonly transparency: number;\n}\n\nexport interface PaletteDefinitionSegment extends Segment {\n    readonly paletteId: number;\n    readonly paletteVersionNumber: number;\n    readonly paletteEntries: PaletteEntry[];\n}\n\nexport interface ObjectDefinitionSegment extends Segment {\n    readonly objectId: number;\n    readonly objectVersionNumber: number;\n    readonly lastInSequenceFlag: LastInSequenceFlag;\n    readonly objectDataLength: number;\n    readonly width?: number;\n    readonly height?: number;\n    readonly objectData: BufferAdapter;\n}\n","export interface BufferAdapter {\n    length: number;\n    at(index: number): number;\n    subarray(start: number, end: number): BufferAdapter;\n}\n\nexport class Uint8ArrayBuffer implements BufferAdapter {\n    private readonly buffer: Uint8Array;\n\n    constructor(buffer: Uint8Array) {\n        this.buffer = buffer;\n    }\n\n    get length() {\n        return this.buffer.length;\n    }\n\n    at(index: number): number {\n        return this.buffer[index];\n    }\n\n    subarray(start: number, end: number) {\n        return new Uint8ArrayBuffer(this.buffer.subarray(start, end));\n    }\n}\n\nexport class CompositeBuffer implements BufferAdapter {\n    private readonly buffers: BufferAdapter[] = [];\n\n    constructor(buffers: BufferAdapter[]) {\n        this.buffers = buffers;\n    }\n\n    get length(): number {\n        let length = 0;\n        for (const b of this.buffers) {\n            length += b.length;\n        }\n\n        return length;\n    }\n\n    at(index: number): number {\n        let previousBuffersLength = 0;\n\n        for (const buffer of this.buffers) {\n            const bufferIndex = index - previousBuffersLength;\n\n            if (bufferIndex < buffer.length) {\n                return buffer.at(bufferIndex);\n            }\n\n            previousBuffersLength += buffer.length;\n        }\n\n        throw new Error('Out of bounds');\n    }\n\n    subarray(start: number, end: number): BufferAdapter {\n        const chunks: BufferAdapter[] = [];\n        let previousBuffersLength = 0;\n\n        for (const buffer of this.buffers) {\n            const startBufferIndex = Math.max(0, start - previousBuffersLength);\n            const endBufferIndex = Math.min(buffer.length, end - previousBuffersLength);\n\n            if (endBufferIndex > 0 && startBufferIndex < endBufferIndex) {\n                chunks.push(buffer.subarray(startBufferIndex, endBufferIndex));\n            }\n\n            previousBuffersLength += buffer.length;\n        }\n\n        return new CompositeBuffer(chunks);\n    }\n}\n\nexport class CompositeBufferReader {\n    private buffers: Uint8Array[] = [];\n\n    add(buffer: Uint8Array) {\n        this.buffers.push(buffer);\n    }\n\n    get length(): number {\n        let length = 0;\n\n        for (const buffer of this.buffers) {\n            length += buffer.length;\n        }\n\n        return length;\n    }\n\n    read(bytes: number): BufferAdapter {\n        if (bytes === 0) {\n            return new CompositeBuffer([]);\n        }\n\n        const chunks: Uint8Array[] = [];\n        let accumulated = 0;\n\n        while (true) {\n            if (this.buffers.length === 0) {\n                throw new Error('Trying to read more bytes than available');\n            }\n\n            const buffer = this.buffers.shift()!;\n            const required = bytes - accumulated;\n\n            if (buffer.length === required) {\n                chunks.push(buffer);\n                break;\n            } else if (buffer.length > required) {\n                chunks.push(buffer.subarray(0, required));\n                this.buffers.unshift(buffer.subarray(required, buffer.length));\n                break;\n            }\n\n            accumulated += buffer.length;\n            chunks.push(buffer);\n        }\n\n        return new CompositeBuffer(chunks.map(c => new Uint8ArrayBuffer(c)));\n    }\n}\n\nexport class BufferGenerator {\n    private stream: ReadableStream;\n    private accumulatedBuffer: CompositeBufferReader = new CompositeBufferReader();\n\n    requestedBytes: number = 0;\n\n    constructor(stream: ReadableStream) {\n        this.stream = stream;\n    }\n\n    async *buffers() {\n        const reader = this.stream.getReader();\n\n        while (true) {\n            if (this.accumulatedBuffer.length >= this.requestedBytes) {\n                yield this.accumulatedBuffer.read(this.requestedBytes);\n            } else {\n                const result = await reader.read();\n\n                if (result.done) {\n                    break;\n                }\n\n                this.accumulatedBuffer.add(result.value as Uint8Array);\n            }\n        }\n    }\n}\n\nexport class BufferReader {\n    private buffer: BufferAdapter;\n    private _index: number = 0;\n\n    constructor(bytes: BufferAdapter) {\n        this.buffer = bytes;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get hasNext() {\n        return this._index < this.buffer.length;\n    }\n\n    readHex(bytes: number, limit?: number) {\n        if (limit !== undefined && this._index + bytes > limit) {\n            return 0;\n        }\n\n        let number = 0;\n        let digit = 0;\n        const from = this._index;\n        const to = this._index + bytes - 1;\n\n        for (let i = to; i >= from; --i) {\n            number += this.buffer.at(i) << (8 * digit);\n            ++digit;\n        }\n\n        this._index += bytes;\n        return number;\n    }\n\n    readBuffer(bytes: number) {\n        const buffer = this.buffer.subarray(this.index, this.index + bytes);\n        this._index += bytes;\n        return buffer;\n    }\n}\n","import { BufferAdapter, BufferGenerator, BufferReader, CompositeBuffer } from './buffer';\nimport {\n    CompositionState,\n    compositionStateFromByte,\n    LastInSequenceFlag,\n    lastInSequenceFlagFromByte,\n    objectCroppedFlagFromByte,\n    ObjectDefinitionSegment,\n    PaletteDefinitionSegment,\n    PaletteEntry,\n    paletteUpdateFlagFromByte,\n    PresentationCompositionSegment,\n    Segment,\n    SegmentHeader,\n    SegmentType,\n    segmentTypeFromByte,\n    WindowDefinitionSegment,\n} from './segment';\n\nconst pgMagicNumber = 20551; // 0x5047\n\nexport class RunLengthEncodedBuffer {\n    private readonly encodedBuffer: BufferAdapter;\n\n    constructor(encodedBuffer: BufferAdapter) {\n        this.encodedBuffer = encodedBuffer;\n    }\n\n    decode(callback: (x: number, y: number, color: number) => void) {\n        let encodedIndex = 0;\n        let decodedLineIndex = 0;\n        let currentLine = 0;\n        const encodedLength = this.encodedBuffer.length;\n\n        while (encodedIndex < encodedLength) {\n            const firstByte = this.encodedBuffer.at(encodedIndex);\n            let runLength;\n            let color;\n            let increment;\n\n            // Deal with each possible code\n            if (firstByte > 0) {\n                // CCCCCCCC\t- One pixel in color C\n                color = firstByte;\n                runLength = 1;\n                increment = 1;\n            } else {\n                const secondByte = this.encodedBuffer.at(encodedIndex + 1);\n\n                if (secondByte === 0) {\n                    // 00000000 00000000 - End of line\n                    color = 0;\n                    runLength = 0;\n                    increment = 2;\n                    decodedLineIndex = 0;\n                    ++currentLine;\n                } else if (secondByte < 64) {\n                    // 00000000 00LLLLLL - L pixels in color 0 (L between 1 and 63)\n                    color = 0;\n                    runLength = secondByte;\n                    increment = 2;\n                } else if (secondByte < 128) {\n                    // 00000000 01LLLLLL LLLLLLLL - L pixels in color 0 (L between 64 and 16383)\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\n                    color = 0;\n                    runLength = ((secondByte - 64) << 8) + thirdByte;\n                    increment = 3;\n                } else if (secondByte < 192) {\n                    // 00000000 10LLLLLL CCCCCCCC - L pixels in color C (L between 3 and 63)\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\n                    color = thirdByte;\n                    runLength = secondByte - 128;\n                    increment = 3;\n                } else {\n                    // 00000000 11LLLLLL LLLLLLLL CCCCCCCC - L pixels in color C (L between 64 and 16383)\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\n                    const fourthByte = this.encodedBuffer.at(encodedIndex + 3);\n                    color = fourthByte;\n                    runLength = ((secondByte - 192) << 8) + thirdByte;\n                    increment = 4;\n                }\n            }\n\n            if (runLength > 0) {\n                for (let x = decodedLineIndex; x < decodedLineIndex + runLength; ++x) {\n                    callback(x, currentLine, color);\n                }\n                // decodedLine.fill(color, decodedLineIndex, decodedLineIndex + runLength);\n                decodedLineIndex += runLength;\n            }\n\n            encodedIndex += increment;\n        }\n    }\n}\n\nexport class DisplaySet {\n    readonly presentationCompositionSegment: PresentationCompositionSegment;\n    readonly windowDefinitionSegments: WindowDefinitionSegment[];\n    readonly paletteDefinitionSegments: PaletteDefinitionSegment[];\n    readonly objectDefinitionSegments: ObjectDefinitionSegment[];\n    readonly endDefinitionSegment: Segment;\n\n    private readonly previousDisplaySet?: DisplaySet;\n\n    constructor(\n        presentationCompositionSegment: PresentationCompositionSegment,\n        windowDefinitionSegments: WindowDefinitionSegment[],\n        paletteDefinitionSegments: PaletteDefinitionSegment[],\n        objectDefinitionSegments: ObjectDefinitionSegment[],\n        endDefinitionSegment: Segment,\n        previousDisplaySet?: DisplaySet\n    ) {\n        this.presentationCompositionSegment = presentationCompositionSegment;\n        this.windowDefinitionSegments = windowDefinitionSegments;\n        this.paletteDefinitionSegments = paletteDefinitionSegments;\n        this.objectDefinitionSegments = objectDefinitionSegments;\n        this.endDefinitionSegment = endDefinitionSegment;\n        this.previousDisplaySet = previousDisplaySet;\n    }\n\n    get firstOds() {\n        return this.objectDefinitionSegments.find(\n            (ods) =>\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\n        );\n    }\n\n    protected paletteDefinitionSegment(paletteId: number): PaletteDefinitionSegment | undefined {\n        const pds = this.paletteDefinitionSegments.find((s) => s.paletteId === paletteId);\n\n        if (pds === undefined) {\n            if (this.presentationCompositionSegment.compositionState !== CompositionState.normal) {\n                throw new Error(`PCS references invalid PDS and composition state is not 'normal'`);\n            }\n\n            if (this.previousDisplaySet === undefined) {\n                throw new Error(`PCS references invalid PDS and no previous display set to fallback to`);\n            }\n\n            return this.previousDisplaySet.paletteDefinitionSegment(paletteId);\n        }\n\n        return pds;\n    }\n\n    imageData(buffer?: Uint8ClampedArray) {\n        const pds = this.paletteDefinitionSegment(this.presentationCompositionSegment.paletteId);\n\n        if (pds === undefined) {\n            throw new Error(`PCS references invalid PDS`);\n        }\n\n        const firstOds = this.firstOds;\n\n        if (firstOds === undefined || firstOds.width === undefined || firstOds.height === undefined) {\n            throw new Error(`Missing first ODS with defined width and height`);\n        }\n\n        const imageDataArray = buffer ?? new Uint8ClampedArray(firstOds.width * firstOds.height * 4);\n        const rgbaPalette = pds.paletteEntries.map((palette) => this.ycrcbToRgba(palette));\n        const width = firstOds.width;\n\n        new RunLengthEncodedBuffer(\n            new CompositeBuffer(this.objectDefinitionSegments.map((ods) => ods.objectData))\n        ).decode((x, y, paletteIndex) => {\n            const pixelIndex = y * width + x;\n            const imageDataOffset = pixelIndex * 4;\n\n            if (paletteIndex >= rgbaPalette.length) {\n                imageDataArray[imageDataOffset] = 0;\n                imageDataArray[imageDataOffset + 1] = 0;\n                imageDataArray[imageDataOffset + 2] = 0;\n                imageDataArray[imageDataOffset + 3] = 0;\n            } else {\n                const color = rgbaPalette[paletteIndex];\n                imageDataArray[imageDataOffset] = color.r;\n                imageDataArray[imageDataOffset + 1] = color.g;\n                imageDataArray[imageDataOffset + 2] = color.b;\n                imageDataArray[imageDataOffset + 3] = color.a;\n            }\n        });\n\n        return new ImageData(\n            imageDataArray.subarray(0, 4 * firstOds.width * firstOds.height),\n            firstOds.width,\n            firstOds.height\n        );\n    }\n\n    // https://stackoverflow.com/questions/21264648/javascript-convert-yuv-to-rgb\n    private ycrcbToRgba(palette: PaletteEntry) {\n        const y = palette.luminance;\n        const cb = palette.colorDifferenceBlue;\n        const cr = palette.colorDifferenceRed;\n\n        const r = this.clamp(Math.floor(y + 1.4075 * (cr - 128)), 0, 255);\n        const g = this.clamp(Math.floor(y - 0.3455 * (cb - 128) - 0.7169 * (cr - 128)), 0, 255);\n        const b = this.clamp(Math.floor(y + 1.779 * (cb - 128)), 0, 255);\n        return { r, g, b, a: palette.transparency };\n    }\n\n    private clamp(number: number, min: number, max: number) {\n        return Math.max(min, Math.min(max, number));\n    }\n}\n\nexport async function* parseDisplaySets(s: ReadableStream) {\n    const bufferGenerator = new BufferGenerator(s);\n    bufferGenerator.requestedBytes = 13;\n\n    let header: SegmentHeader | undefined;\n    let lastDisplaySet: DisplaySet | undefined;\n    let presentationCompositionSegment: PresentationCompositionSegment | undefined;\n    let windowDefinitionSegments: WindowDefinitionSegment[] = [];\n    let paletteDefinitionSegments: PaletteDefinitionSegment[] = [];\n    let objectDefinitionSegments: ObjectDefinitionSegment[] = [];\n\n    for await (const buffer of bufferGenerator.buffers()) {\n        const reader = new BufferReader(buffer);\n\n        if (header) {\n            switch (header.segmentType) {\n                case SegmentType.pcs:\n                    if (presentationCompositionSegment !== undefined) {\n                        throw new Error(`Unexpected PDS`);\n                    }\n\n                    presentationCompositionSegment = parsePcsSegment(reader, header);\n                    break;\n                case SegmentType.wds:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected WDS`);\n                    }\n\n                    windowDefinitionSegments.push(parseWdsSegment(reader, header));\n                    break;\n                case SegmentType.pds:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected PDS`);\n                    }\n\n                    paletteDefinitionSegments.push(parsePdsSegment(reader, header));\n                    break;\n                case SegmentType.ods:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected ODS`);\n                    }\n\n                    const ods = parseOdsSegment(reader, header);\n                    objectDefinitionSegments.push(ods);\n                    break;\n                case SegmentType.end:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected end segment`);\n                    }\n\n                    const endDefinitionSegment = { header };\n                    lastDisplaySet = new DisplaySet(\n                        presentationCompositionSegment,\n                        windowDefinitionSegments,\n                        paletteDefinitionSegments,\n                        objectDefinitionSegments,\n                        endDefinitionSegment,\n                        lastDisplaySet\n                    );\n\n                    yield lastDisplaySet;\n\n                    presentationCompositionSegment = undefined;\n                    windowDefinitionSegments = [];\n                    paletteDefinitionSegments = [];\n                    objectDefinitionSegments = [];\n                    break;\n                default:\n                    throw new Error(`Unknown segment type: ${header.segmentType}`);\n            }\n\n            header = undefined;\n            bufferGenerator.requestedBytes = 13;\n        } else {\n            const magicNumber = reader.readHex(2);\n\n            if (magicNumber !== pgMagicNumber) {\n                throw new Error(`Invalid magic number: ${magicNumber}`);\n            }\n\n            const presentationTimestamp = reader.readHex(4);\n            const decodingTimestamp = reader.readHex(4);\n            const segmentType = segmentTypeFromByte(reader.readHex(1));\n            const segmentSize = reader.readHex(2);\n            header = { presentationTimestamp, decodingTimestamp, segmentType, segmentSize };\n            bufferGenerator.requestedBytes = segmentSize;\n        }\n    }\n}\n\nfunction parsePcsSegment(reader: BufferReader, header: SegmentHeader): PresentationCompositionSegment {\n    const limit = reader.index + header.segmentSize;\n    const width = reader.readHex(2, limit);\n    const height = reader.readHex(2, limit);\n    reader.readHex(1); // ignore frame rate\n    const compositionNumber = reader.readHex(2, limit);\n    const compositionState = compositionStateFromByte(reader.readHex(1, limit));\n    const paletteUpdateFlag = paletteUpdateFlagFromByte(reader.readHex(1, limit));\n    const paletteId = reader.readHex(1, limit);\n    const compositionObjectCount = reader.readHex(1, limit);\n    const objectId = reader.readHex(2, limit);\n    const windowId = reader.readHex(1, limit);\n    const objectCroppedFlag = objectCroppedFlagFromByte(reader.readHex(1, limit));\n    const objectHorizontalPosition = reader.readHex(2, limit);\n    const objectVerticalPosition = reader.readHex(2, limit);\n    const objectCroppingHorizontalPosition = reader.readHex(2, limit);\n    const objectCroppingVerticalPosition = reader.readHex(2, limit);\n    const objectCroppingWidth = reader.readHex(2, limit);\n    const objectCroppingHeightPosition = reader.readHex(2, limit);\n\n    return {\n        header,\n        width,\n        height,\n        compositionNumber,\n        compositionState,\n        paletteUpdateFlag,\n        paletteId,\n        compositionObjectCount,\n        objectId,\n        windowId,\n        objectCroppedFlag,\n        objectHorizontalPosition,\n        objectVerticalPosition,\n        objectCroppingHorizontalPosition,\n        objectCroppingVerticalPosition,\n        objectCroppingWidth,\n        objectCroppingHeightPosition,\n    };\n}\n\nfunction parseWdsSegment(reader: BufferReader, header: SegmentHeader): WindowDefinitionSegment {\n    const limit = reader.index + header.segmentSize;\n    const windowCount = reader.readHex(1, limit);\n    const windowDefinitions = [];\n\n    for (let i = 0; i < windowCount; ++i) {\n        const windowId = reader.readHex(1, limit);\n        const windowHorizontalPosition = reader.readHex(2, limit);\n        const windowVerticalPosition = reader.readHex(2, limit);\n        const windowWidth = reader.readHex(2, limit);\n        const windowHeight = reader.readHex(2, limit);\n\n        windowDefinitions.push({\n            windowId,\n            windowHorizontalPosition,\n            windowVerticalPosition,\n            windowWidth,\n            windowHeight,\n        });\n    }\n\n    return {\n        header,\n        windowCount,\n        windowDefinitions,\n    };\n}\n\nfunction parsePdsSegment(reader: BufferReader, header: SegmentHeader): PaletteDefinitionSegment {\n    const limit = reader.index + header.segmentSize;\n    const paletteId = reader.readHex(1, limit);\n    const paletteVersionNumber = reader.readHex(1, limit);\n    const paletteEntries: PaletteEntry[] = [];\n\n    while (reader.index < limit) {\n        const paletteEntryId = reader.readHex(1, limit);\n        const luminance = reader.readHex(1, limit);\n        const colorDifferenceRed = reader.readHex(1, limit);\n        const colorDifferenceBlue = reader.readHex(1, limit);\n        const transparency = reader.readHex(1, limit);\n        paletteEntries.push({ paletteEntryId, luminance, colorDifferenceRed, colorDifferenceBlue, transparency });\n    }\n\n    return {\n        header,\n        paletteId,\n        paletteVersionNumber,\n        paletteEntries,\n    };\n}\n\nfunction parseOdsSegment(reader: BufferReader, header: SegmentHeader): ObjectDefinitionSegment {\n    const objectId = reader.readHex(2);\n    const objectVersionNumber = reader.readHex(1);\n    const lastInSequenceFlag = lastInSequenceFlagFromByte(reader.readHex(1));\n    const objectDataLength = reader.readHex(3);\n    let width: number | undefined;\n    let height: number | undefined;\n    let objectData: BufferAdapter;\n\n    if (\n        lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\n        lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\n    ) {\n        width = reader.readHex(2);\n        height = reader.readHex(2);\n        objectData = reader.readBuffer(objectDataLength - 4);\n    } else {\n        objectData = reader.readBuffer(objectDataLength);\n    }\n\n    return {\n        header,\n        objectId,\n        objectVersionNumber,\n        lastInSequenceFlag,\n        objectDataLength,\n        width,\n        height,\n        objectData: objectData,\n    };\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, Node, parseSync as parseSrt, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets as parsePgsDisplaySets } from './pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport default class SubtitleReader {\n    private xmlParser?: XMLParser;\n\n    async subtitles(files: File[]) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: cue.text.replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    if (isFromNetflix) {\n                        c.text = c.text.replace(tagRegex, '');\n\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: dialogue.slices\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\n                        .join('')\n                        .replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            let imageDataArray: Uint8ClampedArray | undefined;\n            const subtitles = [];\n            let currentImageDisplaySet: DisplaySet | undefined;\n\n            // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n            // @ts-ignore\n            for await (const displaySet of parsePgsDisplaySets(file.stream())) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\n    }\n\n    _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\n        }\n\n        return this.xmlParser;\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: Node[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId: number;\n    src: string;\n}\n\nexport default class ChromeExtension {\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private readonly versionPromise: Promise<string>;\n    private readonly id: string;\n\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\n    private heartbeatStarted = false;\n\n    constructor() {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = false;\n        this.versionPromise = new Promise((resolve, reject) => {\n            this.versionResolve = resolve;\n        });\n        this.versionPromise.then(() => (this.installed = true));\n        this.id = uuidv4();\n\n        window.addEventListener('message', (event) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message) {\n                    if (event.data.message.command === 'tabs') {\n                        const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                        this.tabs = tabsCommand.message.tabs;\n\n                        for (let c of this.onTabsCallbacks) {\n                            c(this.tabs);\n                        }\n\n                        if (tabsCommand.message.ackRequested) {\n                            window.postMessage(\n                                {\n                                    sender: 'asbplayerv2',\n                                    message: {\n                                        command: 'ackTabs',\n                                        id: this.id,\n                                        receivedTabs: this.tabs,\n                                    },\n                                },\n                                '*'\n                            );\n                        }\n\n                        return;\n                    }\n\n                    if (event.data.message.command === 'version') {\n                        this.versionResolve!(event.data.message.version);\n                        return;\n                    }\n\n                    for (let c of this.onMessageCallbacks) {\n                        c({\n                            data: event.data.message,\n                            tabId: event.data.tabId,\n                            src: event.data.src,\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    startHeartbeat() {\n        if (!this.heartbeatStarted) {\n            this._sendHeartbeat();\n            setInterval(() => this._sendHeartbeat(), 1000);\n            this.heartbeatStarted = true;\n        }\n    }\n\n    _sendHeartbeat() {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: this.id,\n                    receivedTabs: this.tabs,\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    async installedVersion(): Promise<string> {\n        return await this.versionPromise;\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n    }\n\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n    }\n\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\n        this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/Util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport StarIcon from '@material-ui/icons/Star';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioTrack?: string;\n    videoFile?: File;\n    subtitleFile?: File;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <StarIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(await extension.installedVersion());\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.extension.unsubscribe(this.listener);\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += Date.now() - this.startTime!;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AsbplayerSettingsProvider, AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    offsetInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    settingsProvider: AsbplayerSettingsProvider;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onVolumeChange,\n    disableKeyEvents,\n    settingsProvider,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(settingsProvider.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [settingsProvider, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const offset = Number(offsetInputRef.current.value);\n\n                    if (Number.isNaN(offset)) {\n                        return;\n                    }\n\n                    onOffsetChange(offset * 1000);\n                    offsetInputRef.current.blur();\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [onOffsetChange, disableKeyEvents]);\n\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastOffsetInputChangeTimestampRef.current = Date.now();\n            }\n        }\n    }, [offset]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            settingsProvider.volume = value;\n        },\n        [settingsProvider]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Input\n                                        inputRef={offsetInputRef}\n                                        disableUnderline={true}\n                                        className={classes.offsetInput}\n                                        placeholder={'±' + Number(0).toFixed(2)}\n                                        onClick={handleOffsetInputClicked}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/Util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    KeyBinder,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onStartedShowing,\n    onWillStopShowing,\n    playing,\n    subtitles,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\n    const onStartedShowingRef = useRef<() => void>();\n    onStartedShowingRef.current = onStartedShowing;\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\n    const onWillStopShowingRef = useRef<() => void>();\n    onWillStopShowingRef.current = onWillStopShowing;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitles = subtitleListRef.current || [];\n            const subtitleRefs = subtitleRefsRef.current;\n            const length = lengthRef.current;\n            const clock = clockRef.current;\n            const progress = clock.progress(lengthRef.current);\n\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\n            let fallbackIndex = -1;\n            let startedShowing = false;\n            let startedShowingSubtitle: SubtitleModel | undefined;\n            let willStopShowing = false;\n            let willStopShowingSubtitle: SubtitleModel | undefined;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n\n            for (let i = subtitles.length - 1; i >= 0; --i) {\n                const s = subtitles[i];\n                const start = s.start / length;\n                const end = s.end / length;\n\n                if (progress >= start) {\n                    if (progress < end) {\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\n                        currentSubtitleIndexes[i] = true;\n                        const nextProgress = progress + 100 / length;\n\n                        if (!willStopShowing && nextProgress >= end) {\n                            willStopShowing = true;\n                            willStopShowingSubtitle = s;\n                        }\n\n                        // Add slight buffer to ensure sub is displaying on video\n                        if (!startedShowing && progress >= start + 100 / length && progress < start + 500 / length) {\n                            startedShowing = true;\n                            startedShowingSubtitle = s;\n                        }\n                    }\n\n                    if (fallbackIndex === -1) {\n                        fallbackIndex = i;\n                    }\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\n                    break;\n                }\n            }\n\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\n                currentSubtitleIndexes[fallbackIndex] = true;\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (startedShowing && startedShowingSubtitleRef.current !== startedShowingSubtitle) {\n                onStartedShowingRef.current?.();\n                startedShowingSubtitleRef.current = startedShowingSubtitle;\n            }\n\n            if (willStopShowing && willStopShowingSubtitleRef.current !== willStopShowingSubtitle) {\n                onWillStopShowingRef.current?.();\n                willStopShowingSubtitleRef.current = willStopShowingSubtitle;\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FinishedAnkiDialogRequestToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    PauseFromVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        fromVideo: boolean,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            true,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\n\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback(ankiDialogRequestMessage.forwardToVideo);\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                case 'playbackRate':\n                    // ignore for now\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            fromVideo: boolean,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiDialogRequest() {\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\n    }\n\n    finishedAnkiDialogRequest(resume: boolean) {\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\n            command: 'finishedAnkiDialogRequest',\n            resume: resume,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/Util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequestToVideo?: number;\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        fromVideo: boolean | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\n    onAppBarToggle: () => void;\n    onVideoPopOut: () => void;\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequestToVideo,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onVideoPopOut,\n    onAutoPauseModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.subtitles(\n                            newSubtitles,\n                            subtitleFiles.map((f) => f.name)\n                        );\n                    }\n                }\n\n                return newSubtitles;\n            });\n        },\n        [subtitleFiles]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            setOffset(0);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\n                    subtitles = nodes.map((s) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start,\n                        originalStart: s.start,\n                        end: s.end,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start, length),\n                        track: s.track,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    setHideSubtitlePlayer((hidden) => {\n                        channel?.hideSubtitlePlayerToggle(!hidden);\n                        return !hidden;\n                    });\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onCopy(\n                            (\n                                subtitle,\n                                surroundingSubtitles,\n                                audio,\n                                image,\n                                url,\n                                postMineAction,\n                                fromVideo,\n                                preventDuplicate,\n                                id\n                            ) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    fromVideo,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onAppBarToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\n            videoRef.current.ankiDialogRequest();\n        }\n    }, [ankiDialogRequestToVideo]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\n            }\n\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const progress = clock.progress(length);\n\n            let currentOrNextIndex = 0;\n            let currentIndex = -1;\n\n            for (let i = subtitles.length - 1; i >= 0; --i) {\n                const s = subtitles[i];\n                const start = s.start / length;\n                const end = s.end / length;\n\n                if (progress >= start) {\n                    if (progress < end) {\n                        currentIndex = i;\n                        currentOrNextIndex = i;\n                    } else {\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\n                    }\n\n                    break;\n                }\n            }\n\n            if (currentIndex !== currentOrNextIndex) {\n                const nextSubtitle = subtitles[currentOrNextIndex];\n\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, playMode, clock, seek]);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atStart) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atEnd) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                false,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => {\n                if (tab) {\n                    return;\n                }\n\n                event.preventDefault();\n                const newPlayMode = playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\n                setPlayMode(newPlayMode);\n                onAutoPauseModeChangedViaBind(newPlayMode);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, disableKeyEvents, settingsProvider, playMode, tab, onAutoPauseModeChangedViaBind]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        false,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [keyBinder, audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={Boolean(videoFileUrl || audioFileUrl)}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                settingsProvider={settingsProvider}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onStartedShowing={handleOnStartedShowingSubtitle}\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/Util';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { isMacOs } from 'react-device-detect';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                console.log(pressed);\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Use extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            volume: settings.volume,\n            theaterMode: settings.theaterMode,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        settings.volume,\n        settings.theaterMode,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Auto-pause Preference</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                                <FormHelperText>\n                                    Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\n                                </FormHelperText>\n                            </div>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultVolume = 100;\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? 'P+⇧' : 'shift+P' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: 'W+1' },\n    toggleVideoSubtitleTrack2: { keys: 'W+2' },\n    toggleAsbplayerSubtitleTrack1: { keys: '1' },\n    toggleAsbplayerSubtitleTrack2: { keys: '2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+left' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n};\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            volume: this.volume,\n            theaterMode: this.theaterMode,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.volume = newSettings.volume;\n        this.theaterMode = newSettings.theaterMode;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = localStorage.getItem(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            localStorage.removeItem(key);\n        } else {\n            localStorage.setItem(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        localStorage.setItem(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return localStorage.getItem(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return localStorage.getItem(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return localStorage.getItem(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return localStorage.getItem(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return localStorage.getItem(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return localStorage.getItem(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = localStorage.getItem(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        localStorage.setItem(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get volume() {\n        return this._getNumberItem(volumeKey, defaultVolume);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get preferMp3() {\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\n    }\n\n    set preferMp3(preferMp3) {\n        localStorage.setItem(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        localStorage.setItem(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = localStorage.getItem(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = localStorage.getItem(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        localStorage.setItem(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        localStorage.setItem(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = localStorage.getItem(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        localStorage.setItem(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n}\n","import {\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FinishedAnkiDialogRequestToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    PauseFromVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private time: number;\n    private readyCallbacks: ((duration: number) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.time = 0;\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.finishedAnkiDialogRequestCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'finishedAnkiDialogRequest':\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\n\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\n                        callback(finishedAnkiDialogRequestMessage.resume);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void){\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: 1,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n            forwardToVideo: forwardToVideo,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.ankiDialogRequestCallbacks = [];\n            this.finishedAnkiDialogRequestCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        const onMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(onMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n    \n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(onSeekToSubtitle, disabledGetter, timeGetter, subtitlesGetter, useCapture);\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(onSeekToBeginningOfCurrentSubtitle, disabledGetter, timeGetter, subtitlesGetter, useCapture);\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(onOffsetChange, disabledGetter, timeGetter, subtitlesGetter, useCapture);\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(onToggleSubtitleTrackInList, disabledGetter, useCapture);\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/Util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    humanReadableTime,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Alert from './Alert';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport ChromeExtension from '../services/ChromeExtension';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\nfunction useFullscreen() {\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\n\n    useEffect(() => {\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\n        document.addEventListener('fullscreenchange', listener);\n\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n\n    return fullscreen;\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    onError: (error: string) => void;\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    onError,\n    onAutoPauseModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const fullscreen = useFullscreen();\n    const fullscreenRef = useRef<boolean>();\n    fullscreenRef.current = fullscreen;\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(settingsProvider.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\n        useState<boolean>(false);\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const keyBinder = useMemo(() => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension), [miscSettings.keyBindSet, extension]);\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    useEffect(() => {\n        playerChannel.onReady((duration) => setLength(duration));\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles);\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onAnkiDialogRequest(() => {\n            if (fullscreenRef.current && !popOut) {\n                document.exitFullscreen();\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\n            }\n        });\n\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\n                if (resume) {\n                    try {\n                        await containerRef.current?.requestFullscreen();\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\n            }\n        });\n\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n\n            for (let i = 0; i < subtitles.length; ++i) {\n                const s = subtitles[i];\n\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push({ ...s, index: i });\n                }\n\n                if (now < s.start) {\n                    break;\n                }\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n            }\n        }, 50);\n\n        return () => clearTimeout(interval);\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            setOffset(offset);\n            setSubtitles((subtitles) =>\n                subtitles.map((s) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    track: s.track,\n                }))\n            );\n            playerChannel.offset(offset);\n        },\n        [playerChannel]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n\n                if (fullscreen) {\n                    setAlert(\n                        subtitle.text === ''\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\n                            : `Copied: \"${subtitle.text}\"`\n                    );\n                    setAlertOpen(true);\n                }\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles, fullscreen]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => {\n                event.preventDefault();\n                const newPlayMode = playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\n                playerChannel.playMode(newPlayMode);\n                onAutoPauseModeChangedViaBind(newPlayMode);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, playMode, onAutoPauseModeChangedViaBind]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (fullscreen) {\n            document.exitFullscreen();\n        } else {\n            containerRef.current?.requestFullscreen();\n        }\n    }, [fullscreen]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            {fullscreen && (\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\n                    {alert}\n                </Alert>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={true}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                settingsProvider={settingsProvider}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    KeyBinder,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/KeyBinder';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport VideoChannel from '../services/VideoChannel';\n\nconst latestExtensionVersion = '0.20.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n                subtitleFiles.push(f);\n                break;\n            case 'sup':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFile!.name,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    if (item.audioFile || item.videoFile) {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.audioTrack\n        );\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    extension: ChromeExtension;\n    onError: (error: string) => void;\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    extension,\n    onError,\n    onAutoPauseModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            onError={onError}\n            onAutoPauseModeChangedViaBind={onAutoPauseModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(), []);\n    const keyBinder = useMemo<KeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(settingsProvider.theaterMode);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean, ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n\n        if (forwardToVideo) {\n            setAnkiDialogRequestToVideo(Date.now());\n        }\n    }, []);\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            fromVideo: boolean | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFile: subtitleFile,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFile?.name\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(fromVideo, newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    handleAnkiDialogProceed(\n                        subtitle.text,\n                        '',\n                        audioClipFromItem(\n                            newCopiedSubtitle,\n                            undefined,\n                            settingsProvider.audioPaddingStart,\n                            settingsProvider.audioPaddingEnd\n                        ),\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n        },\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        settingsProvider.theaterMode = !settingsProvider.theaterMode;\n        setTheaterMode(settingsProvider.theaterMode);\n    }, [settingsProvider]);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n        },\n        [copiedSubtitles]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        extension.subscribeTabs(onTabs);\n\n        return () => extension.unsubscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            }\n        }\n\n        extension.subscribe(onMessage);\n        extension.startHeartbeat();\n        return () => extension.unsubscribe(onMessage);\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((playMode: PlayMode) => {\n        switch (playMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                setAlertSeverity('info');\n                setAlertOpen(true);\n                break;\n            case PlayMode.normal:\n                setAlert('Auto-pause: Off');\n                setAlertSeverity('info');\n                setAlertOpen(true);\n        }\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <RenderVideo\n                                searchParams={searchParams}\n                                settingsProvider={settingsProvider}\n                                extension={extension}\n                                onError={handleError}\n                                onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                            />\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={copyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={copyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\n                                    {nothingLoaded && (\n                                        <LandingPage\n                                            latestExtensionVersion={latestExtensionVersion}\n                                            extensionUrl={extensionUrl}\n                                            extension={extension}\n                                            loading={loading}\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            onFileSelector={handleFileSelector}\n                                        />\n                                    )}\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={copyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}