{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeySequence.ts","../../common/src/KeyEvents.ts","../../common/src/KeySequences.ts","../../common/src/KeyBindings.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/Util.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/pgs-parser/segment.ts","services/pgs-parser/buffer.ts","services/pgs-parser/parser.ts","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","KeySequenceTransitionResult","KeyEvents","event","ctrlKey","shiftKey","key","toLowerCase","detectDecreaseOffset","detectIncreaseOffset","detectIncreaseOffsetToPreviousSubtitle","detectDecreaseOffsetToNextSubtitle","detectCopy","KeySequence","up","holding","canceledBy","map","currentlyHolding","canceled","this","result","REJECTED","extra","type","includes","ADVANCED","CANCELED","_holdingAll","COMPLETE","KeySequences","Number","KeyBindings","onCopy","disabledGetter","subtitleGetter","useCapture","_bindDown","subtitle","onAnkiExport","detectAnkiExport","onUpdateLastCard","detectUpdateLastCard","onSeekToSubtitle","timeGetter","subtitlesGetter","subtitles","length","forward","detectPreviousSubtitle","detectNextSubtitle","_adjacentSubtitle","start","end","onSeekToBeginningOfCurrentSubtitle","detectCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","detectSeekBackward","detectSeekForward","onOffsetChange","subtitleStart","originalStart","adjacentSubtitleIndex","Math","max","increase","currentOffset","onToggleSubtitles","onSequenceAdvanced","sequence","toggleSubtitles","handler","reset","transition","accept","unbindDown","unbindUp","_bindUp","onToggleSubtitleTrack","toggleSubtitleTrack","onToggleSubtitleTrackInList","toggleSubtitleTrackInList","onPlay","detectPlay","onAutoPause","detectAutoPause","Mp3Encoder","_audioContext","AudioContext","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","target","Error","audioContext","decodeAudioData","audioBuffer","channels","numberOfChannels","push","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","AUDIO_TYPES","Object","keys","filter","MediaRecorder","isTypeSupported","t","recorderMimeType","recorderExtension","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","floor","_blob","audio","Audio","src","URL","createObjectURL","preload","load","play","setTimeout","pause","revokeObjectURL","fetch","FileAudioData","file","trackId","name","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","ctx","source","createMediaStreamSource","dest","createMediaStreamDestination","connect","recorder","mimeType","chunks","ondataavailable","onstop","stop","getAudioTracks","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","track","addTrack","latencyHint","PostMineAction","AutoPausePreference","PlayMode","Mp3AudioData","encode","slice","isSliceable","AudioClip","url","document","createElement","body","appendChild","style","display","href","download","click","remove","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","min","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","timestamp","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","fileNameSpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","text","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","sanitized","action","version","humanReadableTime","seconds","nearestTenth","totalSeconds","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","originalEnd","beforeTimestamp","unshift","initialIndex","sign","next","abs","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","interval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","timestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","subtitleEnd","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleTimestampIntervalChange","handleApplyTimestampIntervalToText","newText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","IconButton","edge","onClick","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","SegmentType","Uint8ArrayBuffer","subarray","CompositeBuffer","buffers","previousBuffersLength","bufferIndex","at","startBufferIndex","endBufferIndex","CompositeBufferReader","bytes","accumulated","shift","required","c","BufferGenerator","accumulatedBuffer","requestedBytes","getReader","read","done","add","BufferReader","_index","limit","number","digit","from","CompositionState","segmentTypeValues","values","segmentTypeFromByte","byte","LastInSequenceFlag","compositionStateValues","lastInSequenceFlagValues","RunLengthEncodedBuffer","encodedBuffer","callback","encodedIndex","decodedLineIndex","currentLine","encodedLength","firstByte","runLength","increment","secondByte","thirdByte","x","DisplaySet","presentationCompositionSegment","windowDefinitionSegments","paletteDefinitionSegments","objectDefinitionSegments","endDefinitionSegment","previousDisplaySet","find","ods","lastInSequenceFlag","firstInSequence","firstAndLastInSequence","paletteId","pds","compositionState","normal","paletteDefinitionSegment","firstOds","imageDataArray","Uint8ClampedArray","rgbaPalette","paletteEntries","ycrcbToRgba","objectData","decode","y","paletteIndex","imageDataOffset","r","g","b","ImageData","luminance","cb","colorDifferenceBlue","cr","colorDifferenceRed","clamp","transparency","parseDisplaySets","bufferGenerator","header","segmentType","pcs","wds","parsePcsSegment","parseWdsSegment","parsePdsSegment","parseOdsSegment","lastDisplaySet","magicNumber","readHex","presentationTimestamp","decodingTimestamp","segmentSize","compositionNumber","state","compositionStateFromByte","paletteUpdateFlag","paletteUpdateFlagFromByte","compositionObjectCount","objectId","windowId","objectCroppedFlag","objectCroppedFlagFromByte","objectHorizontalPosition","objectVerticalPosition","objectCroppingHorizontalPosition","objectCroppingVerticalPosition","objectCroppingWidth","objectCroppingHeightPosition","windowCount","windowDefinitions","windowHorizontalPosition","windowVerticalPosition","paletteVersionNumber","paletteEntryId","objectVersionNumber","flag","lastInSequenceFlagFromByte","objectDataLength","readBuffer","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","parsePgsDisplaySets","displaySet","currentImageDisplaySet","screenWidth","screenHeight","imageData","putImageData","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","leftButton","marginRight","appBar","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","AppBar","clsx","drawerOpen","hidden","onFileSelector","component","rel","onOpenCopyHistory","ChromeExtension","tabs","onMessageCallbacks","onTabsCallbacks","versionPromise","versionResolve","heartbeatStarted","uuidv4","sender","tabId","_sendHeartbeat","setInterval","receivedTabs","tab","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","parseInt","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","anchorEl","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","Popover","anchorOrigin","vertical","horizontal","transformOrigin","ListItem","button","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","handleMenu","currentTarget","handleMenuClosed","items","lastSeenItemName","itemNameCounters","ListSubheader","disableSticky","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","startedShowingSubtitle","willStopShowingSubtitle","smallestIndex","fallbackIndex","startedShowing","willStopShowing","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","unbind","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","bindCopy","none","subtitleIndexes","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","updateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","postMineAction","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","subtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onVideoPopOut","onAutoPauseModeChangedViaBind","rewindSubtitle","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setPlayMode","playModeRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","onOffset","fromVideo","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlayMode","handleToggleSubtitleTrack","bindPlay","bindAutoPause","newPlayMode","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","subtitlePreviewStyles","requestPermission","refreshFieldNames","modelFieldNames","handleClose","theaterMode","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","defaultAutoPausePreference","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","volumeKey","theaterModeKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","SettingsProvider","_tags","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitlesMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","playbackRate","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onbeforeunload","equals","arrayEquals","s1","s2","copy","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogProceed","export","newCopiedSubtitle","last","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","subtitleSettingsMessage","ankiSettingsMessage","miscSettingsMessage","publishMessage","handleDeleteCopyHistoryItem","previous","clip","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","startHeartbeat","syncMessage","File","handleAutoPauseModeChangedViaBind","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","handleDragOver","handleDragEnter","handleDragLeave","nativeEvent","handleSourcesLoaded","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.1c370398.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nexport function useWindowSize(enabled: boolean) {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            if (enabled) {\r\n                setSize([window.innerWidth, window.innerHeight]);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, [enabled]);\r\n\r\n    return size;\r\n}\r\n","export enum KeySequenceTransitionResult {\r\n    REJECTED = 0,\r\n    CANCELED = 1,\r\n    ADVANCED = 2,\r\n    COMPLETE = 3,\r\n}\r\n\r\nexport interface KeySequenceOptions {\r\n    up?: string[];\r\n    holding?: string[];\r\n    canceledBy?: string[];\r\n    map?: (event: KeyboardEvent) => any;\r\n}\r\n\r\nexport interface KeySequenceTransition {\r\n    result: KeySequenceTransitionResult;\r\n    extra?: any;\r\n}\r\n\r\nexport default class KeySequence {\r\n    private up: string[];\r\n    private holding: string[];\r\n    private canceledBy: string[];\r\n    private map: (event: KeyboardEvent) => any;\r\n    private currentlyHolding: { [key: string]: boolean };\r\n    private canceled: boolean;\r\n\r\n    constructor({ up, holding, canceledBy, map }: KeySequenceOptions) {\r\n        this.up = up || [];\r\n        this.holding = holding || [];\r\n        this.canceledBy = canceledBy || [];\r\n        this.map = map || ((event: KeyboardEvent) => true);\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    reset() {\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    accept(event: KeyboardEvent): KeySequenceTransition {\r\n        let result = KeySequenceTransitionResult.REJECTED;\r\n        let extra = null;\r\n\r\n        if (event.type === 'keydown') {\r\n            const key = event.key.toLowerCase();\r\n\r\n            if (this.holding.includes(key)) {\r\n                this.currentlyHolding[key] = true;\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n\r\n            if (this.canceledBy.includes(key)) {\r\n                this.canceled = true;\r\n                result = KeySequenceTransitionResult.CANCELED;\r\n            }\r\n\r\n            if (this.up.includes(key)) {\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n        }\r\n\r\n        if (event.type === 'keyup') {\r\n            const key = event.key.toLowerCase();\r\n            delete this.currentlyHolding[key];\r\n\r\n            if (this.up.includes(key) && this._holdingAll() && !this.canceled) {\r\n                extra = this.map(event);\r\n                result = KeySequenceTransitionResult.COMPLETE;\r\n            }\r\n        }\r\n\r\n        return { result: result, extra: extra };\r\n    }\r\n\r\n    _holdingAll() {\r\n        for (const key of this.holding) {\r\n            if (!(key in this.currentlyHolding)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","export default class KeyEvents {\r\n    static detectCopy(event: KeyboardEvent) {\r\n        // Ctrl + Shift + A\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a';\r\n    }\r\n\r\n    static detectDecreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Right\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowRight';\r\n    }\r\n\r\n    static detectAnkiExport(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Q\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'q';\r\n    }\r\n\r\n    static detectUpdateLastCard(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Y\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'y';\r\n    }\r\n\r\n    static detectIncreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Left\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectDecreaseOffsetToNextSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectIncreaseOffsetToPreviousSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Left\r\n        return !KeyEvents.detectIncreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectPreviousSubtitle(event: KeyboardEvent) {\r\n        // Left\r\n        return (\r\n            !KeyEvents.detectIncreaseOffset(event) &&\r\n            !KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event) &&\r\n            event.key === 'ArrowLeft'\r\n        );\r\n    }\r\n\r\n    static detectNextSubtitle(event: KeyboardEvent) {\r\n        // Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) &&\r\n            !KeyEvents.detectDecreaseOffsetToNextSubtitle(event) &&\r\n            event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectCurrentSubtitle(event: KeyboardEvent) {\r\n        // Down\r\n        return event.key === 'ArrowDown';\r\n    }\r\n\r\n    static detectSeekBackward(event: KeyboardEvent) {\r\n        // A\r\n        return !KeyEvents.detectCopy(event) && event.key.toLowerCase() === 'a';\r\n    }\r\n\r\n    static detectSeekForward(event: KeyboardEvent) {\r\n        // D\r\n        return event.key.toLowerCase() === 'd';\r\n    }\r\n\r\n    static detectPlay(event: KeyboardEvent) {\r\n        // Space\r\n        return event.key === ' ';\r\n    }\r\n\r\n    static detectAutoPause(event: KeyboardEvent) {\r\n        // Shift + P\r\n        return event.shiftKey && event.key.toLowerCase() === 'p';\r\n    }\r\n}\r\n","import KeySequence from './KeySequence';\r\n\r\nexport default class KeySequences {\r\n    static toggleSubtitles() {\r\n        // Up S, canceled by 1...9\r\n        return new KeySequence({ up: ['s'], canceledBy: ['1', '2', '3', '4', '5', '6', '7', '8', '9'] });\r\n    }\r\n\r\n    static toggleSubtitleTrack() {\r\n        // Holding S, up 1...9\r\n        return new KeySequence({\r\n            holding: ['s'],\r\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\r\n            map: (event) => Number(event.key) - 1,\r\n        });\r\n    }\r\n\r\n    static toggleSubtitleTrackInList() {\r\n        // Holding W, up 1...9\r\n        return new KeySequence({\r\n            holding: ['w'],\r\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\r\n            map: (event) => Number(event.key) - 1,\r\n        });\r\n    }\r\n\r\n    static togglePlay() {\r\n        // Space\r\n        return new KeySequence({\r\n            up: [' '],\r\n            canceledBy: ['a', 'd'],\r\n        });\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\nimport KeyEvents from './KeyEvents';\r\nimport { KeySequenceTransitionResult } from './KeySequence';\r\nimport KeySequences from './KeySequences';\r\n\r\nexport default class KeyBindings {\r\n    static bindCopy<T extends SubtitleModel = SubtitleModel>(\r\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitleGetter: () => T | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCopy(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = subtitleGetter();\r\n\r\n            if (!subtitle) {\r\n                return;\r\n            }\r\n\r\n            onCopy(event, subtitle);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAnkiExport(\r\n        onAnkiExport: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAnkiExport(event)) {\r\n                return;\r\n            }\r\n\r\n            onAnkiExport(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindUpdateLastCard(\r\n        onUpdateLastCard: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectUpdateLastCard(event)) {\r\n                return;\r\n            }\r\n\r\n            onUpdateLastCard(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToSubtitle(\r\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, timeGetter(), subtitles);\r\n\r\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToBeginningOfCurrentSubtitle(\r\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCurrentSubtitle(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._currentSubtitle(timeGetter(), subtitles);\r\n\r\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let currentSubtitle: SubtitleModel | undefined;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n\r\n            if (s.start < 0 || s.end < 0) {\r\n                continue;\r\n            }\r\n\r\n            const diff = now - s.start;\r\n\r\n            if (now >= s.start && now < s.end) {\r\n                if (diff < minDiff) {\r\n                    currentSubtitle = s;\r\n                    minDiff = diff;\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentSubtitle;\r\n    }\r\n\r\n    static bindSeekBackwardOrForward(\r\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            let forward: boolean;\r\n\r\n            if (KeyEvents.detectSeekBackward(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectSeekForward(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            onSeekBackwardOrForward(event, forward);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindOffsetToSubtitle(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectDecreaseOffsetToNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const time = timeGetter();\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, time, subtitles);\r\n\r\n            if (subtitle !== null) {\r\n                const subtitleStart = subtitle.originalStart;\r\n                const newOffset = time - subtitleStart;\r\n                onOffsetChange(event, newOffset);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let adjacentSubtitleIndex = -1;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n            const diff = forward ? s.start - now : now - s.start;\r\n\r\n            if (minDiff <= diff) {\r\n                continue;\r\n            }\r\n\r\n            if (forward && now < s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = i;\r\n            } else if (!forward && now > s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\r\n            }\r\n        }\r\n\r\n        if (adjacentSubtitleIndex !== -1) {\r\n            return subtitles[adjacentSubtitleIndex];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static bindAdjustOffset(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let increase;\r\n\r\n            if (KeyEvents.detectDecreaseOffset(event)) {\r\n                increase = false;\r\n            } else if (KeyEvents.detectIncreaseOffset(event)) {\r\n                increase = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\r\n            const newOffset = currentOffset + (increase ? 100 : -100);\r\n            onOffsetChange(event, newOffset);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindToggleSubtitles(\r\n        onToggleSubtitles: (event: KeyboardEvent) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitles();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitles(event);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInVideo(\r\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrack();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrack(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInList(\r\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrackInList();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrackInList(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectPlay(event)) {\r\n                return;\r\n            }\r\n\r\n            onPlay(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAutoPause(\r\n        onAutoPause: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAutoPause(event)) {\r\n                return;\r\n            }\r\n\r\n            onAutoPause(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static _bindDown(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keydown', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keydown', handler, useCapture);\r\n    }\r\n\r\n    static _bindUp(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keyup', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keyup', handler, useCapture);\r\n    }\r\n}\r\n","export default class Mp3Encoder {\r\n    private static _audioContext: AudioContext;\r\n\r\n    private static audioContext() {\r\n        if (this._audioContext === undefined) {\r\n            this._audioContext = new AudioContext();\r\n        }\r\n\r\n        return this._audioContext;\r\n    }\r\n\r\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n\r\n                    if (e.target === null) {\r\n                        reject(new Error(\"Could not obtain buffer to encode\"));\r\n                        return;\r\n                    }\r\n\r\n                    const audioContext = this.audioContext();\r\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\r\n                    const channels = [];\r\n\r\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\r\n                        channels.push(audioBuffer.getChannelData(i));\r\n                    }\r\n\r\n                    const worker = workerFactory();\r\n                    worker.postMessage({\r\n                        command: 'encode',\r\n                        audioBuffer: {\r\n                            channels: channels,\r\n                            numberOfChannels: audioBuffer.numberOfChannels,\r\n                            length: audioBuffer.length,\r\n                            sampleRate: audioBuffer.sampleRate,\r\n                        },\r\n                    });\r\n                    worker.onmessage = (e) => {\r\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\r\n                        worker.terminate();\r\n                    };\r\n                    worker.onerror = (e) => {\r\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\r\n                        reject(error);\r\n                        worker.terminate();\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.bdda0d32.worker.js\");\n}\n","import Mp3Encoder from './Mp3Encoder';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport Worker from 'worker-loader!./mp3-encoder.js';\r\nconst AUDIO_TYPES: { [key: string]: string } = { 'audio/ogg;codecs=opus': 'ogg', 'audio/webm;codecs=opus': 'webm' };\r\nconst [recorderMimeType, recorderExtension] = Object.keys(AUDIO_TYPES)\r\n    .filter(MediaRecorder.isTypeSupported)\r\n    .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\r\nconst defaultMp3WorkerFactory = () => new Worker();\r\n\r\ninterface ExperimentalAudioElement extends HTMLAudioElement {\r\n    audioTracks: any;\r\n    captureStream?: () => MediaStream;\r\n    mozCaptureStream?: () => MediaStream;\r\n}\r\n\r\ninterface AudioData {\r\n    name: string;\r\n    extension: string;\r\n    play: () => Promise<void>;\r\n    blob: () => Promise<Blob>;\r\n    base64: () => Promise<string>;\r\n    slice: (start: number, end: number) => AudioData;\r\n    isSliceable: (start: number, end: number) => boolean;\r\n}\r\n\r\nclass Base64AudioData implements AudioData {\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\r\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\r\n        this.start = start;\r\n        this.end = end;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async play(): Promise<void> {\r\n        const blob = await this._blob();\r\n        const audio = new Audio();\r\n        audio.src = URL.createObjectURL(blob);\r\n        audio.preload = 'none';\r\n        audio.load();\r\n\r\n        await audio.play();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 1000);\r\n        });\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    slice(start: number, end: number): AudioData {\r\n        // Not supported\r\n        return this;\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass FileAudioData implements AudioData {\r\n    private static _audioContext?: AudioContext;\r\n    private readonly file: File;\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly trackId?: string;\r\n    private readonly _extension: string;\r\n\r\n    private _blob?: Blob;\r\n\r\n    constructor(file: File, start: number, end: number, trackId?: string) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + start + '_' + end;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.trackId = trackId;\r\n        this._extension = recorderExtension;\r\n    }\r\n\r\n    private static audioContext() {\r\n        if (FileAudioData._audioContext === undefined) {\r\n            FileAudioData._audioContext = new AudioContext({ latencyHint: 'playback' });\r\n        }\r\n\r\n        return FileAudioData._audioContext;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(await this.blob());\r\n            reader.onloadend = () => {\r\n                const result = reader.result as string;\r\n                const base64 = result.substring(result.indexOf(',') + 1);\r\n                resolve(base64);\r\n            };\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n            return;\r\n        }\r\n\r\n        const audio = await this._audioElement(this._blob, false);\r\n        audio.currentTime = 0;\r\n        await audio.play();\r\n        await this._stopAudio(audio);\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    async _clipAudio(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const audio = await this._audioElement(this.file, true);\r\n\r\n            audio.oncanplay = async (e) => {\r\n                const stream = this._captureStream(audio);\r\n                const ctx = FileAudioData.audioContext();\r\n                var source = ctx.createMediaStreamSource(stream);\r\n                var dest = ctx.createMediaStreamDestination();\r\n                source.connect(dest);\r\n                const recorder = new MediaRecorder(dest.stream, { mimeType: recorderMimeType });\r\n                const chunks: BlobPart[] = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                };\r\n\r\n                recorder.onstop = (e) => {\r\n                    resolve(new Blob(chunks, { type: recorderMimeType }));\r\n                };\r\n\r\n                recorder.start();\r\n                audio.play();\r\n                await this._stopAudio(audio);\r\n                recorder.stop();\r\n                for (const track of stream.getAudioTracks()) {\r\n                    track.stop();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\r\n        const audio = new Audio() as ExperimentalAudioElement;\r\n        audio.src = URL.createObjectURL(source);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            audio.onloadedmetadata = (e) => {\r\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\r\n                    // @ts-ignore\r\n                    for (const t of audio.audioTracks) {\r\n                        t.enabled = this.trackId === t.id;\r\n                    }\r\n                }\r\n\r\n                audio.currentTime = this.start / 1000;\r\n                resolve(audio);\r\n            };\r\n        });\r\n    }\r\n\r\n    _captureStream(audio: ExperimentalAudioElement) {\r\n        let stream: MediaStream | undefined;\r\n\r\n        if (typeof audio.captureStream === 'function') {\r\n            stream = audio.captureStream();\r\n        }\r\n\r\n        if (typeof audio.mozCaptureStream === 'function') {\r\n            stream = audio.mozCaptureStream();\r\n        }\r\n\r\n        if (stream === undefined) {\r\n            throw new Error('Unable to capture stream from audio');\r\n        }\r\n\r\n        const audioStream = new MediaStream();\r\n\r\n        for (const track of stream.getVideoTracks()) {\r\n            track.stop();\r\n        }\r\n\r\n        for (const track of stream.getAudioTracks()) {\r\n            if (track.enabled) {\r\n                audioStream.addTrack(track);\r\n            }\r\n        }\r\n\r\n        return audioStream;\r\n    }\r\n\r\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 100);\r\n        });\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new FileAudioData(this.file, start, end, this.trackId);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass Mp3AudioData implements AudioData {\r\n    private readonly data: AudioData;\r\n    private readonly workerFactory: () => Worker;\r\n    private _blob?: Blob;\r\n\r\n    constructor(data: AudioData, workerFactory: () => Worker) {\r\n        this.data = data;\r\n        this.workerFactory = workerFactory;\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'mp3';\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            try {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(await this.blob());\r\n                reader.onloadend = () => {\r\n                    const result = reader.result as string;\r\n                    const base64 = result.substring(result.indexOf(',') + 1);\r\n                    resolve(base64);\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n\r\nexport default class AudioClip {\r\n    private readonly data: AudioData;\r\n\r\n    constructor(data: AudioData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\r\n        return new AudioClip(\r\n            new Base64AudioData(\r\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\r\n                start,\r\n                end,\r\n                base64,\r\n                extension\r\n            )\r\n        );\r\n    }\r\n\r\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\r\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name + '.' + this.data.extension;\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n\r\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\r\n        if (this.data instanceof Mp3AudioData) {\r\n            return this;\r\n        }\r\n\r\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new AudioClip(this.data.slice(start, end));\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n","import { AnkiSettings } from './Settings';\r\n\r\nexport interface RectModel {\r\n    readonly left: number;\r\n    readonly top: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface DimensionsModel {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface SubtitleTextImage {\r\n    readonly dataUrl: string;\r\n    readonly screen: DimensionsModel;\r\n    readonly image: DimensionsModel;\r\n}\r\n\r\nexport interface SubtitleModel {\r\n    readonly text: string;\r\n    readonly textImage?: SubtitleTextImage;\r\n    readonly start: number;\r\n    readonly end: number;\r\n    readonly originalStart: number;\r\n    readonly originalEnd: number;\r\n    readonly track: number;\r\n}\r\n\r\nexport interface CopiedSubtitleModel extends SubtitleModel {\r\n    surroundingSubtitles: SubtitleModel[];\r\n    timestamp: number;\r\n    id: string;\r\n    name: string;\r\n    subtitleFile?: File;\r\n    audioFile?: File;\r\n    videoFile?: File;\r\n    audioTrack?: number;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n}\r\n\r\nexport interface ImageModel {\r\n    readonly base64: string;\r\n    readonly extension: 'jpeg';\r\n}\r\n\r\nexport interface AudioModel {\r\n    readonly base64: string;\r\n    readonly extension: 'webm' | 'mp3';\r\n    readonly paddingStart: number;\r\n    readonly paddingEnd: number;\r\n    readonly start?: number;\r\n    readonly end?: number;\r\n}\r\n\r\nexport interface AnkiDialogSliderContext {\r\n    subtitleStart: number;\r\n    subtitleEnd: number;\r\n    subtitles: SubtitleModel[];\r\n}\r\n\r\nexport interface AnkiUiState {\r\n    readonly type: 'initial' | 'resume';\r\n    readonly open: boolean;\r\n    readonly settingsProvider: AnkiSettings;\r\n    readonly subtitle: SubtitleModel;\r\n    readonly url: string;\r\n    readonly source: string;\r\n    readonly image?: ImageModel;\r\n    readonly audio?: AudioModel;\r\n    readonly themeType: string;\r\n    readonly dialogRequestedTimestamp: number;\r\n}\r\n\r\nexport interface AnkiUiInitialState extends AnkiUiState {\r\n    readonly type: 'initial';\r\n    readonly surroundingSubtitles: SubtitleModel[];\r\n}\r\n\r\nexport interface AnkiUiResumeState extends AnkiUiState {\r\n    readonly type: 'resume';\r\n\r\n    readonly text: string;\r\n    readonly initialTimestampInterval: number[];\r\n    readonly timestampInterval: number[];\r\n    readonly sliderContext: AnkiDialogSliderContext;\r\n    readonly definition: string;\r\n    readonly word: string;\r\n    readonly customFieldValues: { [key: string]: string };\r\n    readonly lastAppliedTimestampIntervalToText: number[];\r\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\r\n}\r\n\r\nexport interface AnkiUiSavedState {\r\n    subtitle: SubtitleModel;\r\n    text: string;\r\n    sliderContext: AnkiDialogSliderContext;\r\n    definition: string;\r\n    image?: ImageModel;\r\n    audio?: AudioModel;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    timestampInterval: number[];\r\n    initialTimestampInterval: number[];\r\n    lastAppliedTimestampIntervalToText: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    dialogRequestedTimestamp: number;\r\n}\r\n\r\nexport interface VideoDataSubtitleTrack {\r\n    label: string;\r\n    language: string;\r\n    url: string;\r\n}\r\n\r\nexport interface ConfirmedVideoDataSubtitleTrack {\r\n    name: string;\r\n    language: string;\r\n    subtitleUrl: string;\r\n}\r\n\r\nexport interface VideoData {\r\n    basename: string;\r\n    error?: string;\r\n    subtitles: VideoDataSubtitleTrack[];\r\n    extension: string;\r\n}\r\n\r\nexport interface VideoDataUiState {\r\n    open?: boolean;\r\n    isLoading?: boolean;\r\n    suggestedName?: string;\r\n    subtitles?: VideoDataSubtitleTrack[];\r\n    error?: string;\r\n    themeType?: string;\r\n    selectedSubtitle?: string;\r\n    showSubSelect?: boolean;\r\n}\r\n\r\nexport interface VideoTabModel {\r\n    id: number; // Actually the tab ID\r\n    title?: string;\r\n    src: string; // Video src\r\n}\r\n\r\nexport interface Rgb {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n}\r\n\r\nexport interface AudioTrackModel {\r\n    id: string;\r\n    label: string;\r\n    language: string;\r\n}\r\n\r\nexport enum PostMineAction {\r\n    none = 0,\r\n    showAnkiDialog = 1,\r\n    updateLastCard = 2,\r\n}\r\n\r\nexport enum AutoPausePreference {\r\n    atStart = 1,\r\n    atEnd = 2,\r\n}\r\n\r\nexport enum PlayMode {\r\n    normal = 1,\r\n    condensed = 2,\r\n    autoPause = 3,\r\n}\r\n","export default class CanvasResizer {\r\n    resize(\r\n        canvas: HTMLCanvasElement,\r\n        ctx: CanvasRenderingContext2D,\r\n        maxWidth: number,\r\n        maxHeight: number\r\n    ): Promise<HTMLCanvasElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\r\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\r\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\r\n\r\n            if (ratio < 1) {\r\n                const newWidth = canvas.width * ratio;\r\n                const newHeight = canvas.height * ratio;\r\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\r\n                    .then((sprite) => {\r\n                        canvas.width = newWidth;\r\n                        canvas.height = newHeight;\r\n                        ctx.drawImage(sprite, 0, 0);\r\n                        resolve(canvas);\r\n                    })\r\n                    .catch((e) => reject(e));\r\n            } else {\r\n                resolve(canvas);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { resolveConfig } from 'prettier';\r\nimport CanvasResizer from './CanvasResizer';\r\n\r\nclass Base64ImageData implements ImageData {\r\n    private readonly _name: string;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(name: string, base64: string, extension: string) {\r\n        this._name = name;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    async dataUrl() {\r\n        return this._dataUrl();\r\n    }\r\n\r\n    _dataUrl() {\r\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\r\n    }\r\n}\r\n\r\nclass FileImageData implements ImageData {\r\n    private readonly file: File;\r\n    private readonly timestamp: number;\r\n    private readonly maxWidth: number;\r\n    private readonly maxHeight: number;\r\n    private readonly _name: string;\r\n\r\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\r\n        this.timestamp = timestamp;\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'jpeg';\r\n    }\r\n\r\n    async base64(): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            const dataUrl = canvas.toDataURL('image/jpeg');\r\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\r\n        });\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            canvas.toBlob((blob) => {\r\n                if (blob === null) {\r\n                    reject(new Error('Could not obtain blob'));\r\n                } else {\r\n                    resolve(blob);\r\n                }\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    async dataUrl() {\r\n        const canvas = await this._canvas();\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    async _canvas(): Promise<HTMLCanvasElement> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const video = this._videoElement(this.file);\r\n\r\n            video.oncanplay = async (e) => {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.videoWidth;\r\n                canvas.height = video.videoHeight;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\r\n                    const resizer = new CanvasResizer();\r\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\r\n                    resolve(canvas);\r\n                } else {\r\n                    resolve(canvas);\r\n                }\r\n                URL.revokeObjectURL(video.src);\r\n            };\r\n        });\r\n    }\r\n\r\n    _videoElement(source: File) {\r\n        const video = document.createElement('video');\r\n        video.src = URL.createObjectURL(source);\r\n        video.preload = 'none';\r\n        video.currentTime = this.timestamp / 1000;\r\n        video.load();\r\n\r\n        return video;\r\n    }\r\n}\r\n\r\ninterface ImageData {\r\n    name: string;\r\n    extension: string;\r\n    base64: () => Promise<string>;\r\n    dataUrl: () => Promise<string>;\r\n    blob: () => Promise<Blob>;\r\n}\r\n\r\nexport default class Image {\r\n    private readonly data: ImageData;\r\n\r\n    constructor(data: ImageData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\r\n        const imageName =\r\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\r\n            '_' +\r\n            Math.floor(timestamp) +\r\n            '.' +\r\n            extension;\r\n        return new Image(new Base64ImageData(imageName, base64, extension));\r\n    }\r\n\r\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return this.data.extension;\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async dataUrl() {\r\n        return await this.data.dataUrl();\r\n    }\r\n\r\n    async blob() {\r\n        return await this.data.blob();\r\n    }\r\n\r\n    async pngBlob() {\r\n        return new Promise<Blob>(async (resolve, reject) => {\r\n            try {\r\n                createImageBitmap(await this.blob()).then((bitMap) => {\r\n                    const canvas = document.createElement('canvas');\r\n                    canvas.width = bitMap.width;\r\n                    canvas.height = bitMap.height;\r\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\r\n                    canvas.toBlob((blob) => {\r\n                        if (blob) {\r\n                            resolve(blob);\r\n                        } else {\r\n                            reject('Failed to convert to PNG');\r\n                        }\r\n                    }, 'image/png');\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.data.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n}\r\n","export interface Fetcher {\r\n    fetch: (url: string, body: any) => Promise<any>;\r\n}\r\n\r\nexport class HttpFetcher implements Fetcher {\r\n    async fetch(url: string, body: any) {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n        });\r\n        return await response.json();\r\n    }\r\n}\r\n","import AudioClip from './AudioClip';\r\nimport Image from './Image';\r\nimport { HttpFetcher, Fetcher } from './Fetcher';\r\nimport { AnkiSettings } from './Settings';\r\n\r\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\r\nconst fileNameSpecialCharacters = [':', '/', '\\\\', '<', '>', '\"', '|', '?', '*', '^'];\r\n\r\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\r\n\r\nexport class Anki {\r\n    private readonly settingsProvider: AnkiSettings;\r\n    private readonly fetcher: Fetcher;\r\n\r\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\r\n        this.settingsProvider = settingsProvider;\r\n        this.fetcher = fetcher;\r\n    }\r\n\r\n    async deckNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'findNotes',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'guiBrowse',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    _escapeQuery(query: string) {\r\n        let escaped = '';\r\n\r\n        for (let i = 0; i < query.length; ++i) {\r\n            const char = query[i];\r\n            if (ankiQuerySpecialCharacters.includes(char)) {\r\n                escaped += `\\\\${char}`;\r\n            } else {\r\n                escaped += char;\r\n            }\r\n        }\r\n\r\n        return `\"${escaped}\"`;\r\n    }\r\n\r\n    async requestPermission(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async export(\r\n        text: string | undefined,\r\n        definition: string | undefined,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string | undefined,\r\n        source: string | undefined,\r\n        url: string | undefined,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode,\r\n        ankiConnectUrl?: string\r\n    ) {\r\n        const fields = {};\r\n\r\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\r\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\r\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\r\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\r\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\r\n\r\n        if (customFieldValues) {\r\n            for (const customFieldName of Object.keys(customFieldValues)) {\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.customAnkiFields[customFieldName],\r\n                    customFieldValues[customFieldName],\r\n                    true\r\n                );\r\n            }\r\n        }\r\n\r\n        const params: any = {\r\n            note: {\r\n                deckName: this.settingsProvider.deck,\r\n                modelName: this.settingsProvider.noteType,\r\n                tags: tags,\r\n                options: {\r\n                    allowDuplicate: false,\r\n                    duplicateScope: 'deck',\r\n                    duplicateScopeOptions: {\r\n                        deckName: this.settingsProvider.deck,\r\n                        checkChildren: false,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const gui = mode === 'gui';\r\n        const updateLast = mode === 'updateLast';\r\n\r\n        if (this.settingsProvider.audioField && audioClip) {\r\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\r\n\r\n            if (gui || updateLast) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\r\n            } else {\r\n                params.note['audio'] = {\r\n                    filename: sanitizedName,\r\n                    data: await audioClip.base64(),\r\n                    fields: [this.settingsProvider.audioField],\r\n                };\r\n            }\r\n        }\r\n\r\n        if (this.settingsProvider.imageField && image) {\r\n            const sanitizedName = this._sanitizeFileName(image.name);\r\n\r\n            if (gui || updateLast) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.imageField,\r\n                    `<div><img src=\"${fileName}\"></div>`,\r\n                    false\r\n                );\r\n            } else {\r\n                params.note['picture'] = {\r\n                    filename: sanitizedName,\r\n                    data: await image.base64(),\r\n                    fields: [this.settingsProvider.imageField],\r\n                };\r\n            }\r\n        }\r\n\r\n        params.note['fields'] = fields;\r\n\r\n        switch (mode) {\r\n            case 'gui':\r\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\r\n            case 'updateLast':\r\n                const recentNotes = (\r\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\r\n                ).result.sort();\r\n\r\n                if (recentNotes.length === 0) {\r\n                    throw new Error('Could not find note to update');\r\n                }\r\n\r\n                const lastNoteId = recentNotes[recentNotes.length - 1];\r\n                params.note['id'] = lastNoteId;\r\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\r\n\r\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\r\n                    const info = infoResponse.result[0];\r\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\r\n\r\n                    if (!this.settingsProvider.wordField || !info.fields) {\r\n                        return info.noteId;\r\n                    }\r\n\r\n                    const wordField = info.fields[this.settingsProvider.wordField];\r\n\r\n                    if (!wordField || !wordField.value) {\r\n                        return info.noteId;\r\n                    }\r\n\r\n                    return wordField.value;\r\n                }\r\n\r\n                throw new Error('Could not update last card because the card info could not be fetched');\r\n            case 'default':\r\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\r\n            default:\r\n                throw new Error('Unknown export mode: ' + mode);\r\n        }\r\n    }\r\n\r\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\r\n        if (!fieldName || !value) {\r\n            return;\r\n        }\r\n\r\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\r\n        const existingValue = fields[fieldName];\r\n\r\n        if (existingValue) {\r\n            newValue = existingValue + '<br>' + newValue;\r\n        }\r\n\r\n        fields[fieldName] = newValue;\r\n    }\r\n\r\n    _sanitizeFileName(name: string) {\r\n        let sanitized = '';\r\n\r\n        for (let i = 0; i < name.length; ++i) {\r\n            const char = name[i];\r\n\r\n            if (fileNameSpecialCharacters.includes(char)) {\r\n                sanitized += '_';\r\n            } else {\r\n                sanitized += char;\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\r\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\r\n    }\r\n\r\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\r\n        const body: any = {\r\n            action: action,\r\n            version: 6,\r\n        };\r\n\r\n        if (params) {\r\n            body['params'] = params;\r\n        }\r\n\r\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\r\n\r\n        if (json.error) {\r\n            throw new Error(json.error);\r\n        }\r\n\r\n        return json;\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\n\r\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\r\n    const totalSeconds = Math.floor(timestamp / 1000);\r\n    let seconds;\r\n\r\n    if (nearestTenth) {\r\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\r\n    } else {\r\n        seconds = totalSeconds % 60;\r\n    }\r\n\r\n    const minutes = Math.floor(totalSeconds / 60) % 60;\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n\r\n    if (hours > 0) {\r\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\r\n    }\r\n\r\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\r\n}\r\n\r\nexport function surroundingSubtitles(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    countRadius: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    let startIndex = index;\r\n\r\n    for (let i = index; i >= 0; --i) {\r\n        startIndex = i;\r\n\r\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let endIndex = startIndex;\r\n\r\n    for (let i = index; i <= subtitles.length - 1; ++i) {\r\n        endIndex = i;\r\n\r\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return subtitles.slice(startIndex, endIndex + 1);\r\n}\r\n\r\nexport function mockSurroundingSubtitles(\r\n    middleSubtitle: SubtitleModel,\r\n    maxTimestamp: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    const subtitles = [middleSubtitle];\r\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\r\n\r\n    if (middleSubtitle.end < maxTimestamp) {\r\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\r\n        subtitles.push({\r\n            text: '',\r\n            start: middleSubtitle.end,\r\n            end: afterTimestamp,\r\n            originalStart: middleSubtitle.end - offset,\r\n            originalEnd: afterTimestamp - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    if (middleSubtitle.start > 0) {\r\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\r\n        subtitles.unshift({\r\n            text: '',\r\n            start: beforeTimestamp,\r\n            end: middleSubtitle.start,\r\n            originalStart: beforeTimestamp - offset,\r\n            originalEnd: middleSubtitle.start - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    return subtitles;\r\n}\r\n\r\nfunction atBoundary(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    initialIndex: number,\r\n    countRadius: number,\r\n    timeRadius: number,\r\n    sign: boolean\r\n): boolean {\r\n    let next;\r\n\r\n    if (sign) {\r\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\r\n    } else {\r\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\r\n    }\r\n\r\n    if (\r\n        Math.abs(initialIndex - index) >= countRadius &&\r\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nconst useAlertStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        top: 80,\r\n        width: '100%',\r\n        pointerEvents: 'none',\r\n        zIndex: 2000,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    autoHideDuration: number;\r\n    onClose: () => void;\r\n    severity: Color | undefined;\r\n    children: React.ReactNode\r\n}\r\n\r\nexport default function Alert(props: Props) {\r\n    const classes = useAlertStyles();\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [props.open, props.autoHideDuration, props.onClose]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grow in={props.open}>\r\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\r\n            </Grow>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\r\n\r\nfunction extractTagsFromString(value: string) {\r\n    const splitTags = value.split(' ').join('').split(',');\r\n    const tags = [];\r\n\r\n    for (const tag of splitTags) {\r\n        tags.push(tag.trim());\r\n    }\r\n\r\n    return tags;\r\n}\r\n\r\nexport interface Props {\r\n    tags: string[];\r\n    onTagsChange: (tags: string[]) => void;\r\n}\r\n\r\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        const tagsString = tags.join(', ');\r\n\r\n        if (tagsString !== value) {\r\n            setValue(tags.join(', '));\r\n        }\r\n    }, [value, tags]);\r\n\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        let currentValue = e.target.value;\r\n\r\n        if (\r\n            value.length > currentValue.length &&\r\n            value.includes(currentValue) &&\r\n            currentValue.endsWith(',')\r\n        ) {\r\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\r\n            currentValue = currentValue.substring(0, currentValue.length - 1);\r\n        }\r\n\r\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\r\n        const newTags = extractTagsFromString(currentValue);\r\n        setValue(newTags.join(', '));\r\n        onTagsChange(newTags);\r\n    }, [value, onTagsChange]);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={value}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Image as CommonImage } from '@project/common';\r\n\r\ninterface ImageDimensions {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    image: ({ width, height }: ImageDimensions) => ({\r\n        width: width,\r\n        height: height,\r\n        backgroundSize: 'contain',\r\n    }),\r\n}));\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n\r\n    return size;\r\n}\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    image?: CommonImage;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function ImageDialog({ open, image, onClose }: Props) {\r\n    const [dataUrl, setDataUrl] = useState<string>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const [windowWidth, windowHeight] = useWindowSize();\r\n\r\n    let resizeRatio;\r\n\r\n    if (width > 0 && height > 0) {\r\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\r\n    } else {\r\n        resizeRatio = 1;\r\n    }\r\n\r\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\r\n\r\n    useEffect(() => {\r\n        setDataUrl(undefined);\r\n        async function fetchImage() {\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            const dataUrl = await image.dataUrl();\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                setWidth(img.width);\r\n                setHeight(img.height);\r\n                setDataUrl(dataUrl);\r\n            };\r\n            img.src = dataUrl;\r\n        }\r\n\r\n        fetchImage();\r\n    }, [image]);\r\n\r\n    if (!image || !dataUrl) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\r\n            <Card>\r\n                <CardMedia\r\n                    className={classes.image}\r\n                    image={dataUrl}\r\n                    title={image.name}\r\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\r\n                />\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { SubtitleModel } from '../..';\r\n\r\ninterface Props {\r\n    subtitle: SubtitleModel;\r\n    availableWidth: number;\r\n    scale: number;\r\n}\r\n\r\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\r\n    if (subtitle.textImage === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\r\n    const width = imageScale * subtitle.textImage.image.width;\r\n\r\n    return (\r\n        <div style={{ maxWidth: width }}>\r\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Anki,\r\n    AnkiDialogSliderContext,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiSettings,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport Button from '@material-ui/core/Button';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Slider, { Mark } from '@material-ui/core/Slider';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport SubtitleTextImage from './SubtitleTextImage';\r\nimport TagsTextField from './TagsTextField';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    mediaField: {\r\n        cursor: 'pointer',\r\n        '& input': {\r\n            cursor: 'pointer',\r\n        },\r\n    },\r\n    rangeSelectSlider: {\r\n        '& .MuiSlider-markLabel': {\r\n            transform: 'translateX(-3%)',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\r\n    let min = null;\r\n    let max = null;\r\n\r\n    for (const s of sliderContext.subtitles) {\r\n        if (min === null || s.start < min) {\r\n            min = s.start;\r\n        }\r\n\r\n        if (max === null || s.end > max) {\r\n            max = s.end;\r\n        }\r\n    }\r\n\r\n    return min !== null && max !== null && [min, max];\r\n}\r\n\r\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\r\n    const seenTimestamps: any = {};\r\n\r\n    return sliderContext.subtitles\r\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\r\n        .map((s) => {\r\n            if (s.start in seenTimestamps) {\r\n                return null;\r\n            }\r\n\r\n            seenTimestamps[s.start] = true;\r\n\r\n            return {\r\n                value: s.start,\r\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\r\n            };\r\n        })\r\n        .filter((mark: Mark | null) => mark !== null)\r\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\r\n}\r\n\r\nfunction sliderValueLabelFormat(ms: number) {\r\n    return humanReadableTime(ms, true);\r\n}\r\n\r\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\r\n    return (\r\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\r\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\r\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\r\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\r\n    );\r\n}\r\n\r\ninterface ValueLabelComponentProps {\r\n    children: React.ReactElement;\r\n    open: boolean;\r\n    value: number;\r\n}\r\n\r\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\r\n    return (\r\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\ninterface TextImageSetProps {\r\n    selectedSubtitles: SubtitleModel[];\r\n    width: number;\r\n}\r\n\r\nconst useTextImageSetStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: theme.spacing(1),\r\n        padding: theme.spacing(1),\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n    },\r\n}));\r\n\r\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\r\n    const classes = useTextImageSetStyles();\r\n\r\n    if (selectedSubtitles.length === 0 || width <= 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={0} className={classes.root}>\r\n            {selectedSubtitles.map((s, index) => {\r\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\r\n            })}\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst TextFieldEndAdornment = withStyles({\r\n    // Hack to recenter TextField end adornment\r\n    root: {\r\n        transform: 'translateY(-8px)',\r\n    },\r\n})(InputAdornment);\r\n\r\nexport interface AnkiDialogState {\r\n    text: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    definition: string;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    initialTimestampInterval?: number[];\r\n    timestampInterval?: number[];\r\n}\r\n\r\ninterface AnkiDialogProps {\r\n    open: boolean;\r\n    disabled: boolean;\r\n    text?: string;\r\n    onProceed: (\r\n        text: string,\r\n        definition: string,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string,\r\n        source: string,\r\n        url: string,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode\r\n    ) => void;\r\n    onRerecord?: () => void;\r\n    onRewind: () => void;\r\n    onCancel: () => void;\r\n    onViewImage: (image: Image) => void;\r\n    onOpenSettings?: () => void;\r\n    audioClip?: AudioClip;\r\n    image?: Image;\r\n    source?: string;\r\n    url?: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    settingsProvider: AnkiSettings;\r\n    anki: Anki;\r\n    definition?: string;\r\n    word?: string;\r\n    customFields: { [key: string]: string };\r\n    customFieldValues?: { [key: string]: string };\r\n    initialTimestampInterval?: number[];\r\n    timestampInterval?: number[];\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\r\n}\r\n\r\nexport function AnkiDialog({\r\n    open,\r\n    disabled,\r\n    text: initialText,\r\n    onProceed,\r\n    onRewind,\r\n    onCancel,\r\n    onViewImage,\r\n    onOpenSettings,\r\n    onRerecord,\r\n    audioClip: initialAudioClip,\r\n    image,\r\n    source: initialSource,\r\n    url: initialUrl,\r\n    sliderContext,\r\n    customFields,\r\n    settingsProvider,\r\n    anki,\r\n    definition: initialDefinition,\r\n    word: initialWord,\r\n    customFieldValues: initialCustomFieldValues,\r\n    timestampInterval: initialSelectedTimestampInterval,\r\n    initialTimestampInterval: forceInitialTimestampInterval,\r\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\r\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\r\n    stateRef,\r\n}: AnkiDialogProps) {\r\n    const classes = useStyles();\r\n    const [definition, setDefinition] = useState<string>('');\r\n    const [text, setText] = useState<string>('');\r\n    const [word, setWord] = useState<string>('');\r\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\r\n    const [source, setSource] = useState<string>(initialSource ?? '');\r\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\r\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\r\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\r\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\r\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\r\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\r\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\r\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\r\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\r\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [audioClip, setAudioClip] = useState<AudioClip>();\r\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\r\n        setWidth(element?.getBoundingClientRect().width ?? 0);\r\n    }, []);\r\n\r\n    if (stateRef) {\r\n        stateRef.current = {\r\n            text,\r\n            sliderContext,\r\n            definition,\r\n            word,\r\n            source,\r\n            url,\r\n            customFieldValues,\r\n            initialTimestampInterval,\r\n            lastAppliedTimestampIntervalToText,\r\n            lastAppliedTimestampIntervalToAudio,\r\n            timestampInterval,\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        setText(initialText ?? '');\r\n        setDefinition(initialDefinition ?? '');\r\n        setWord(initialWord ?? '');\r\n        setSource(initialSource ?? '');\r\n        setUrl(initialUrl ?? '');\r\n        setDuplicateNotes([]);\r\n        setCustomFieldValues(initialCustomFieldValues ?? {});\r\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\r\n\r\n    useEffect(() => {\r\n        setTags(settingsProvider.tags);\r\n    }, [settingsProvider.tags]);\r\n\r\n    useEffect(() => {\r\n        const timestampInterval =\r\n            initialSelectedTimestampInterval ||\r\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\r\n            undefined;\r\n        const timestampBoundaryInterval =\r\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\r\n        const timestampMarks =\r\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || timestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\r\n\r\n        setTimestampInterval(timestampInterval);\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\r\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\r\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\r\n        setTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setTimestampMarks(timestampMarks);\r\n    }, [\r\n        sliderContext,\r\n        forceInitialTimestampInterval,\r\n        initialSelectedTimestampInterval,\r\n        initialLastAppliedTimestampIntervalToText,\r\n        initialLastAppliedTimestampIntervalToAudio,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!initialAudioClip) {\r\n            setAudioClip(undefined);\r\n            return;\r\n        }\r\n\r\n        let newAudioClip = initialAudioClip;\r\n\r\n        if (settingsProvider.preferMp3) {\r\n            newAudioClip = newAudioClip.toMp3();\r\n        }\r\n\r\n        if (lastAppliedTimestampIntervalToAudio) {\r\n            newAudioClip = newAudioClip.slice(\r\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\r\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\r\n            );\r\n        }\r\n\r\n        setAudioClip(newAudioClip);\r\n    }, [\r\n        initialAudioClip,\r\n        settingsProvider.preferMp3,\r\n        lastAppliedTimestampIntervalToAudio,\r\n        settingsProvider.audioPaddingStart,\r\n        settingsProvider.audioPaddingEnd,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setWordTimestamp(Date.now());\r\n    }, [word]);\r\n\r\n    useEffect(() => {\r\n        if (!word || !settingsProvider.wordField) {\r\n            return;\r\n        }\r\n\r\n        const trimmedWord = word.trim();\r\n\r\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\r\n            return;\r\n        }\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\r\n                setLastSearchedWord(trimmedWord);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\r\n\r\n    const handlePlayAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            audioClip!.play();\r\n        },\r\n        [audioClip]\r\n    );\r\n\r\n    const handleCustomFieldChange = useCallback(\r\n        (customFieldName: string, value: string) => {\r\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\r\n            Object.assign(newCustomFieldValues, customFieldValues);\r\n            newCustomFieldValues[customFieldName] = value;\r\n            setCustomFieldValues(newCustomFieldValues);\r\n        },\r\n        [customFieldValues]\r\n    );\r\n\r\n    let wordHelperText;\r\n\r\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\r\n        wordHelperText =\r\n            duplicateNotes.length > 0\r\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\r\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\r\n    } else {\r\n        wordHelperText = '';\r\n    }\r\n\r\n    const handleViewImage = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            onViewImage(image!);\r\n        },\r\n        [image, onViewImage]\r\n    );\r\n\r\n    const handleTimestampIntervalChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\r\n            const timestampInterval = newValue as number[];\r\n            setTimestampInterval(timestampInterval);\r\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\r\n                subtitleIntersectsTimeInterval(s, timestampInterval)\r\n            );\r\n            setSelectedSubtitles(selectedSubtitles);\r\n        },\r\n        [sliderContext]\r\n    );\r\n\r\n    const handleApplyTimestampIntervalToText = useCallback(() => {\r\n        const interval = timestampInterval!;\r\n        const newText = sliderContext!.subtitles\r\n            .filter((s) => subtitleIntersectsTimeInterval(s, interval))\r\n            .map((s) => s.text)\r\n            .join('\\n');\r\n\r\n        setText(newText);\r\n        setLastAppliedTimestampIntervalToText(timestampInterval);\r\n    }, [timestampInterval, sliderContext]);\r\n\r\n    const handleApplyTimestampIntervalToAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            if (onRerecord) {\r\n                e.stopPropagation();\r\n                onRerecord();\r\n            } else {\r\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n            }\r\n        },\r\n        [onRerecord, timestampInterval]\r\n    );\r\n\r\n    const handleResetTimestampInterval = useCallback(() => {\r\n        if (!initialTimestampBoundaryInterval) {\r\n            return;\r\n        }\r\n\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || initialTimestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setTimestampInterval(initialTimestampInterval);\r\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\r\n        setTimestampMarks(\r\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\r\n        );\r\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\r\n\r\n    const handleZoomInTimestampInterval = useCallback(() => {\r\n        if (!timestampBoundaryInterval || !timestampInterval) {\r\n            return;\r\n        }\r\n\r\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\r\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\r\n        const newTimestampBoundaryInterval = [newMin, newMax];\r\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\r\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\r\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\r\n\r\n    const handleCopyImageToClipboard = useCallback(\r\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            e.stopPropagation();\r\n\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\r\n        },\r\n        [image]\r\n    );\r\n\r\n    const disableApplyTextSelection =\r\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\r\n\r\n    return (\r\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Anki Export\r\n                </Typography>\r\n                {onOpenSettings && (\r\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                )}\r\n            </Toolbar>\r\n            <DialogContent ref={dialogRefCallback}>\r\n                <form className={classes.root}>\r\n                    {sliderContext && timestampInterval && (\r\n                        <TextImageSet\r\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\r\n                            width={width}\r\n                        />\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        maxRows={8}\r\n                        label=\"Sentence\"\r\n                        value={text}\r\n                        onChange={(e) => setText(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: timestampInterval && (\r\n                                <TextFieldEndAdornment position=\"end\">\r\n                                    <Tooltip title=\"Apply Selection\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    !timestampInterval ||\r\n                                                    !lastAppliedTimestampIntervalToText ||\r\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\r\n                                                        timestampInterval[1] ===\r\n                                                            lastAppliedTimestampIntervalToText[1]) ||\r\n                                                    disableApplyTextSelection\r\n                                                }\r\n                                                onClick={handleApplyTimestampIntervalToText}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <DoneIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </TextFieldEndAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        rows={8}\r\n                        label=\"Definition\"\r\n                        value={definition}\r\n                        onChange={(e) => setDefinition(e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Word\"\r\n                        value={word}\r\n                        onChange={(e) => setWord(e.target.value)}\r\n                        helperText={wordHelperText}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Tooltip title=\"Search in Anki\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    disabled ||\r\n                                                    !settingsProvider.wordField ||\r\n                                                    !word ||\r\n                                                    word.trim() === ''\r\n                                                }\r\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <SearchIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {Object.keys(customFields).map((customFieldName) => (\r\n                        <TextField\r\n                            key={customFieldName}\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            multiline\r\n                            maxRows={8}\r\n                            label={customFieldName}\r\n                            value={customFieldValues[customFieldName] || ''}\r\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                        />\r\n                    ))}\r\n                    {audioClip && (\r\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={audioClip.name}\r\n                                label=\"Audio\"\r\n                                InputProps={{\r\n                                    endAdornment: timestampInterval && (\r\n                                        <InputAdornment position=\"end\">\r\n                                            {onRerecord ? (\r\n                                                <Tooltip title=\"Apply Selection (rerecord)\">\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !timestampInterval ||\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1])\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            ) : (\r\n                                                <Tooltip title={'Apply Selection'}>\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1]) ||\r\n                                                                !audioClip.isSliceable(\r\n                                                                    timestampInterval[0],\r\n                                                                    timestampInterval[1]\r\n                                                                )\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {image && (\r\n                        <div className={classes.mediaField} onClick={handleViewImage}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={image.name}\r\n                                label=\"Image\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <Tooltip title=\"Copy to Clipboard\">\r\n                                                <span>\r\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\r\n                                                        <FileCopyIcon />\r\n                                                    </IconButton>\r\n                                                </span>\r\n                                            </Tooltip>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Source\"\r\n                        value={source}\r\n                        onChange={(e) => setSource(e.target.value)}\r\n                    />\r\n                    {initialUrl && (\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            label=\"URL\"\r\n                            value={url}\r\n                            onChange={(e) => setUrl(e.target.value)}\r\n                        />\r\n                    )}\r\n                    {settingsProvider.tags.length > 0 && (\r\n                        <TagsTextField\r\n                            variant=\"filled\"\r\n                            label=\"Tags\"\r\n                            helperText=\"Comma-separated list of strings\"\r\n                            fullWidth\r\n                            color=\"secondary\"\r\n                            tags={tags}\r\n                            onTagsChange={(newTags) => setTags(newTags)}\r\n                        />\r\n                    )}\r\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                                <Slider\r\n                                    ValueLabelComponent={ValueLabelComponent}\r\n                                    value={timestampInterval}\r\n                                    valueLabelFormat={sliderValueLabelFormat}\r\n                                    onChange={handleTimestampIntervalChange}\r\n                                    min={timestampBoundaryInterval[0]}\r\n                                    max={timestampBoundaryInterval[1]}\r\n                                    marks={timestampMarks}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    className={classes.rangeSelectSlider}\r\n                                    color=\"secondary\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Reset\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleResetTimestampInterval}\r\n                                        >\r\n                                            <RestoreIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Zoom In\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleZoomInTimestampInterval}\r\n                                        >\r\n                                            <ZoomInIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button disabled={disabled} onClick={() => onCancel()}>\r\n                    Cancel\r\n                </Button>\r\n                {sliderContext && (\r\n                    <Button disabled={disabled} onClick={() => onRewind()}>\r\n                        Rewind\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'gui'\r\n                        )\r\n                    }\r\n                >\r\n                    Open in Anki\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'updateLast'\r\n                        )\r\n                    }\r\n                >\r\n                    Update Last Card\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'default'\r\n                        )\r\n                    }\r\n                >\r\n                    Export\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport coloredBackground from './background-colored.png';\r\nimport { Theme } from '@material-ui/core';\r\n\r\ninterface StylesProps {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n}\r\n\r\ninterface Props {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    root: ({ dragging, appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\r\n        width: '100%',\r\n        zIndex: 101,\r\n        pointerEvents: dragging ? 'auto' : 'none',\r\n    }),\r\n    transparentBackground: ({ appBarHidden }) => ({\r\n        '&::before': {\r\n            content: \"' '\",\r\n            position: 'absolute',\r\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            backgroundSize: '300px 300px',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(${coloredBackground})`,\r\n            backgroundBlendMode: 'overlay',\r\n            background: 'rgba(0, 0, 0, .3)',\r\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\r\n        },\r\n        width: '100%',\r\n        height: '100%',\r\n    }),\r\n}));\r\n\r\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\r\n    const classes = useStyles({ dragging, appBarHidden });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fade in={dragging || loading}>\r\n                <div className={classes.transparentBackground} />\r\n            </Fade>\r\n        </div>\r\n    );\r\n}\r\n","import { BufferAdapter } from \"./buffer\";\r\n\r\nexport enum SegmentType {\r\n    pds = 20,\r\n    ods = 21,\r\n    pcs = 22,\r\n    wds = 23,\r\n    end = 128,\r\n}\r\n\r\nconst segmentTypeValues = Object.values(SegmentType);\r\n\r\nexport function segmentTypeFromByte(byte: number) {\r\n    for (const type of segmentTypeValues) {\r\n        if (byte === type) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid segment type byte: ${byte}`);\r\n}\r\n\r\nexport enum CompositionState {\r\n    normal = 0,\r\n    acquisitionState = 64,\r\n    epochStart = 128,\r\n}\r\n\r\nconst compositionStateValues = Object.values(CompositionState);\r\n\r\nexport function compositionStateFromByte(byte: number) {\r\n    for (const state of compositionStateValues) {\r\n        if (byte === state) {\r\n            return state;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid composition state byte: ${byte}`);\r\n}\r\n\r\nexport function paletteUpdateFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 128:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid palette update flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport function objectCroppedFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 64:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid object cropped flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport enum LastInSequenceFlag {\r\n    lastInSequence = 64,\r\n    firstInSequence = 128,\r\n    firstAndLastInSequence = 192,\r\n}\r\n\r\nconst lastInSequenceFlagValues = Object.values(LastInSequenceFlag);\r\n\r\nexport function lastInSequenceFlagFromByte(byte: number) {\r\n    for (const flag of lastInSequenceFlagValues) {\r\n        if (byte === flag) {\r\n            return flag;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid last in sequence flag byte: ${byte}`);\r\n}\r\n\r\nexport interface SegmentHeader {\r\n    presentationTimestamp: number;\r\n    decodingTimestamp: number;\r\n    segmentType: SegmentType;\r\n    segmentSize: number;\r\n}\r\n\r\nexport interface Segment {\r\n    readonly header: SegmentHeader;\r\n}\r\n\r\nexport interface PresentationCompositionSegment extends Segment {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly compositionNumber: number;\r\n    readonly compositionState: CompositionState;\r\n    readonly paletteUpdateFlag: boolean;\r\n    readonly paletteId: number;\r\n    readonly compositionObjectCount: number;\r\n    readonly objectId: number;\r\n    readonly windowId: number;\r\n    readonly objectCroppedFlag: boolean;\r\n    readonly objectHorizontalPosition: number;\r\n    readonly objectVerticalPosition: number;\r\n    readonly objectCroppingHorizontalPosition: number;\r\n    readonly objectCroppingVerticalPosition: number;\r\n    readonly objectCroppingWidth: number;\r\n    readonly objectCroppingHeightPosition: number;\r\n}\r\n\r\nexport interface WindowDefinition {\r\n    readonly windowId: number;\r\n    readonly windowHorizontalPosition: number;\r\n    readonly windowVerticalPosition: number;\r\n    readonly windowWidth: number;\r\n    readonly windowHeight: number;\r\n}\r\n\r\nexport interface WindowDefinitionSegment extends Segment {\r\n    readonly windowCount: number;\r\n    readonly windowDefinitions: WindowDefinition[];\r\n}\r\n\r\nexport interface PaletteEntry {\r\n    readonly paletteEntryId: number;\r\n    readonly luminance: number;\r\n    readonly colorDifferenceRed: number;\r\n    readonly colorDifferenceBlue: number;\r\n    readonly transparency: number;\r\n}\r\n\r\nexport interface PaletteDefinitionSegment extends Segment {\r\n    readonly paletteId: number;\r\n    readonly paletteVersionNumber: number;\r\n    readonly paletteEntries: PaletteEntry[];\r\n}\r\n\r\nexport interface ObjectDefinitionSegment extends Segment {\r\n    readonly objectId: number;\r\n    readonly objectVersionNumber: number;\r\n    readonly lastInSequenceFlag: LastInSequenceFlag;\r\n    readonly objectDataLength: number;\r\n    readonly width?: number;\r\n    readonly height?: number;\r\n    readonly objectData: BufferAdapter;\r\n}\r\n","export interface BufferAdapter {\r\n    length: number;\r\n    at(index: number): number;\r\n    subarray(start: number, end: number): BufferAdapter;\r\n}\r\n\r\nexport class Uint8ArrayBuffer implements BufferAdapter {\r\n    private readonly buffer: Uint8Array;\r\n\r\n    constructor(buffer: Uint8Array) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    get length() {\r\n        return this.buffer.length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        return this.buffer[index];\r\n    }\r\n\r\n    subarray(start: number, end: number) {\r\n        return new Uint8ArrayBuffer(this.buffer.subarray(start, end));\r\n    }\r\n}\r\n\r\nexport class CompositeBuffer implements BufferAdapter {\r\n    private readonly buffers: BufferAdapter[] = [];\r\n\r\n    constructor(buffers: BufferAdapter[]) {\r\n        this.buffers = buffers;\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n        for (const b of this.buffers) {\r\n            length += b.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const bufferIndex = index - previousBuffersLength;\r\n\r\n            if (bufferIndex < buffer.length) {\r\n                return buffer.at(bufferIndex);\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        throw new Error('Out of bounds');\r\n    }\r\n\r\n    subarray(start: number, end: number): BufferAdapter {\r\n        const chunks: BufferAdapter[] = [];\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const startBufferIndex = Math.max(0, start - previousBuffersLength);\r\n            const endBufferIndex = Math.min(buffer.length, end - previousBuffersLength);\r\n\r\n            if (endBufferIndex > 0 && startBufferIndex < endBufferIndex) {\r\n                chunks.push(buffer.subarray(startBufferIndex, endBufferIndex));\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        return new CompositeBuffer(chunks);\r\n    }\r\n}\r\n\r\nexport class CompositeBufferReader {\r\n    private buffers: Uint8Array[] = [];\r\n\r\n    add(buffer: Uint8Array) {\r\n        this.buffers.push(buffer);\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            length += buffer.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    read(bytes: number): BufferAdapter {\r\n        if (bytes === 0) {\r\n            return new CompositeBuffer([]);\r\n        }\r\n\r\n        const chunks: Uint8Array[] = [];\r\n        let accumulated = 0;\r\n\r\n        while (true) {\r\n            if (this.buffers.length === 0) {\r\n                throw new Error('Trying to read more bytes than available');\r\n            }\r\n\r\n            const buffer = this.buffers.shift()!;\r\n            const required = bytes - accumulated;\r\n\r\n            if (buffer.length === required) {\r\n                chunks.push(buffer);\r\n                break;\r\n            } else if (buffer.length > required) {\r\n                chunks.push(buffer.subarray(0, required));\r\n                this.buffers.unshift(buffer.subarray(required, buffer.length));\r\n                break;\r\n            }\r\n\r\n            accumulated += buffer.length;\r\n            chunks.push(buffer);\r\n        }\r\n\r\n        return new CompositeBuffer(chunks.map(c => new Uint8ArrayBuffer(c)));\r\n    }\r\n}\r\n\r\nexport class BufferGenerator {\r\n    private stream: ReadableStream;\r\n    private accumulatedBuffer: CompositeBufferReader = new CompositeBufferReader();\r\n\r\n    requestedBytes: number = 0;\r\n\r\n    constructor(stream: ReadableStream) {\r\n        this.stream = stream;\r\n    }\r\n\r\n    async *buffers() {\r\n        const reader = this.stream.getReader();\r\n\r\n        while (true) {\r\n            if (this.accumulatedBuffer.length >= this.requestedBytes) {\r\n                yield this.accumulatedBuffer.read(this.requestedBytes);\r\n            } else {\r\n                const result = await reader.read();\r\n\r\n                if (result.done) {\r\n                    break;\r\n                }\r\n\r\n                this.accumulatedBuffer.add(result.value as Uint8Array);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class BufferReader {\r\n    private buffer: BufferAdapter;\r\n    private _index: number = 0;\r\n\r\n    constructor(bytes: BufferAdapter) {\r\n        this.buffer = bytes;\r\n    }\r\n\r\n    get index() {\r\n        return this._index;\r\n    }\r\n\r\n    get hasNext() {\r\n        return this._index < this.buffer.length;\r\n    }\r\n\r\n    readHex(bytes: number, limit?: number) {\r\n        if (limit !== undefined && this._index + bytes > limit) {\r\n            return 0;\r\n        }\r\n\r\n        let number = 0;\r\n        let digit = 0;\r\n        const from = this._index;\r\n        const to = this._index + bytes - 1;\r\n\r\n        for (let i = to; i >= from; --i) {\r\n            number += this.buffer.at(i) << (8 * digit);\r\n            ++digit;\r\n        }\r\n\r\n        this._index += bytes;\r\n        return number;\r\n    }\r\n\r\n    readBuffer(bytes: number) {\r\n        const buffer = this.buffer.subarray(this.index, this.index + bytes);\r\n        this._index += bytes;\r\n        return buffer;\r\n    }\r\n}\r\n","import { BufferAdapter, BufferGenerator, BufferReader, CompositeBuffer } from './buffer';\r\nimport {\r\n    CompositionState,\r\n    compositionStateFromByte,\r\n    LastInSequenceFlag,\r\n    lastInSequenceFlagFromByte,\r\n    objectCroppedFlagFromByte,\r\n    ObjectDefinitionSegment,\r\n    PaletteDefinitionSegment,\r\n    PaletteEntry,\r\n    paletteUpdateFlagFromByte,\r\n    PresentationCompositionSegment,\r\n    Segment,\r\n    SegmentHeader,\r\n    SegmentType,\r\n    segmentTypeFromByte,\r\n    WindowDefinitionSegment,\r\n} from './segment';\r\n\r\nconst pgMagicNumber = 20551; // 0x5047\r\n\r\nexport class RunLengthEncodedBuffer {\r\n    private readonly encodedBuffer: BufferAdapter;\r\n\r\n    constructor(encodedBuffer: BufferAdapter) {\r\n        this.encodedBuffer = encodedBuffer;\r\n    }\r\n\r\n    decode(callback: (x: number, y: number, color: number) => void) {\r\n        let encodedIndex = 0;\r\n        let decodedLineIndex = 0;\r\n        let currentLine = 0;\r\n        const encodedLength = this.encodedBuffer.length;\r\n\r\n        while (encodedIndex < encodedLength) {\r\n            const firstByte = this.encodedBuffer.at(encodedIndex);\r\n            let runLength;\r\n            let color;\r\n            let increment;\r\n\r\n            // Deal with each possible code\r\n            if (firstByte > 0) {\r\n                // CCCCCCCC\t- One pixel in color C\r\n                color = firstByte;\r\n                runLength = 1;\r\n                increment = 1;\r\n            } else {\r\n                const secondByte = this.encodedBuffer.at(encodedIndex + 1);\r\n\r\n                if (secondByte === 0) {\r\n                    // 00000000 00000000 - End of line\r\n                    color = 0;\r\n                    runLength = 0;\r\n                    increment = 2;\r\n                    decodedLineIndex = 0;\r\n                    ++currentLine;\r\n                } else if (secondByte < 64) {\r\n                    // 00000000 00LLLLLL - L pixels in color 0 (L between 1 and 63)\r\n                    color = 0;\r\n                    runLength = secondByte;\r\n                    increment = 2;\r\n                } else if (secondByte < 128) {\r\n                    // 00000000 01LLLLLL LLLLLLLL - L pixels in color 0 (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = 0;\r\n                    runLength = ((secondByte - 64) << 8) + thirdByte;\r\n                    increment = 3;\r\n                } else if (secondByte < 192) {\r\n                    // 00000000 10LLLLLL CCCCCCCC - L pixels in color C (L between 3 and 63)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = thirdByte;\r\n                    runLength = secondByte - 128;\r\n                    increment = 3;\r\n                } else {\r\n                    // 00000000 11LLLLLL LLLLLLLL CCCCCCCC - L pixels in color C (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    const fourthByte = this.encodedBuffer.at(encodedIndex + 3);\r\n                    color = fourthByte;\r\n                    runLength = ((secondByte - 192) << 8) + thirdByte;\r\n                    increment = 4;\r\n                }\r\n            }\r\n\r\n            if (runLength > 0) {\r\n                for (let x = decodedLineIndex; x < decodedLineIndex + runLength; ++x) {\r\n                    callback(x, currentLine, color);\r\n                }\r\n                // decodedLine.fill(color, decodedLineIndex, decodedLineIndex + runLength);\r\n                decodedLineIndex += runLength;\r\n            }\r\n\r\n            encodedIndex += increment;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DisplaySet {\r\n    readonly presentationCompositionSegment: PresentationCompositionSegment;\r\n    readonly windowDefinitionSegments: WindowDefinitionSegment[];\r\n    readonly paletteDefinitionSegments: PaletteDefinitionSegment[];\r\n    readonly objectDefinitionSegments: ObjectDefinitionSegment[];\r\n    readonly endDefinitionSegment: Segment;\r\n\r\n    private readonly previousDisplaySet?: DisplaySet;\r\n\r\n    constructor(\r\n        presentationCompositionSegment: PresentationCompositionSegment,\r\n        windowDefinitionSegments: WindowDefinitionSegment[],\r\n        paletteDefinitionSegments: PaletteDefinitionSegment[],\r\n        objectDefinitionSegments: ObjectDefinitionSegment[],\r\n        endDefinitionSegment: Segment,\r\n        previousDisplaySet?: DisplaySet\r\n    ) {\r\n        this.presentationCompositionSegment = presentationCompositionSegment;\r\n        this.windowDefinitionSegments = windowDefinitionSegments;\r\n        this.paletteDefinitionSegments = paletteDefinitionSegments;\r\n        this.objectDefinitionSegments = objectDefinitionSegments;\r\n        this.endDefinitionSegment = endDefinitionSegment;\r\n        this.previousDisplaySet = previousDisplaySet;\r\n    }\r\n\r\n    get firstOds() {\r\n        return this.objectDefinitionSegments.find(\r\n            (ods) =>\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n        );\r\n    }\r\n\r\n    protected paletteDefinitionSegment(paletteId: number): PaletteDefinitionSegment | undefined {\r\n        const pds = this.paletteDefinitionSegments.find((s) => s.paletteId === paletteId);\r\n\r\n        if (pds === undefined) {\r\n            if (this.presentationCompositionSegment.compositionState !== CompositionState.normal) {\r\n                throw new Error(`PCS references invalid PDS and composition state is not 'normal'`);\r\n            }\r\n\r\n            if (this.previousDisplaySet === undefined) {\r\n                throw new Error(`PCS references invalid PDS and no previous display set to fallback to`);\r\n            }\r\n\r\n            return this.previousDisplaySet.paletteDefinitionSegment(paletteId);\r\n        }\r\n\r\n        return pds;\r\n    }\r\n\r\n    imageData(buffer?: Uint8ClampedArray) {\r\n        const pds = this.paletteDefinitionSegment(this.presentationCompositionSegment.paletteId);\r\n\r\n        if (pds === undefined) {\r\n            throw new Error(`PCS references invalid PDS`);\r\n        }\r\n\r\n        const firstOds = this.firstOds;\r\n\r\n        if (firstOds === undefined || firstOds.width === undefined || firstOds.height === undefined) {\r\n            throw new Error(`Missing first ODS with defined width and height`);\r\n        }\r\n\r\n        const imageDataArray = buffer ?? new Uint8ClampedArray(firstOds.width * firstOds.height * 4);\r\n        const rgbaPalette = pds.paletteEntries.map((palette) => this.ycrcbToRgba(palette));\r\n        const width = firstOds.width;\r\n\r\n        new RunLengthEncodedBuffer(\r\n            new CompositeBuffer(this.objectDefinitionSegments.map((ods) => ods.objectData))\r\n        ).decode((x, y, paletteIndex) => {\r\n            const pixelIndex = y * width + x;\r\n            const imageDataOffset = pixelIndex * 4;\r\n\r\n            if (paletteIndex >= rgbaPalette.length) {\r\n                imageDataArray[imageDataOffset] = 0;\r\n                imageDataArray[imageDataOffset + 1] = 0;\r\n                imageDataArray[imageDataOffset + 2] = 0;\r\n                imageDataArray[imageDataOffset + 3] = 0;\r\n            } else {\r\n                const color = rgbaPalette[paletteIndex];\r\n                imageDataArray[imageDataOffset] = color.r;\r\n                imageDataArray[imageDataOffset + 1] = color.g;\r\n                imageDataArray[imageDataOffset + 2] = color.b;\r\n                imageDataArray[imageDataOffset + 3] = color.a;\r\n            }\r\n        });\r\n\r\n        return new ImageData(\r\n            imageDataArray.subarray(0, 4 * firstOds.width * firstOds.height),\r\n            firstOds.width,\r\n            firstOds.height\r\n        );\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/21264648/javascript-convert-yuv-to-rgb\r\n    private ycrcbToRgba(palette: PaletteEntry) {\r\n        const y = palette.luminance;\r\n        const cb = palette.colorDifferenceBlue;\r\n        const cr = palette.colorDifferenceRed;\r\n\r\n        const r = this.clamp(Math.floor(y + 1.4075 * (cr - 128)), 0, 255);\r\n        const g = this.clamp(Math.floor(y - 0.3455 * (cb - 128) - 0.7169 * (cr - 128)), 0, 255);\r\n        const b = this.clamp(Math.floor(y + 1.779 * (cb - 128)), 0, 255);\r\n        return { r, g, b, a: palette.transparency };\r\n    }\r\n\r\n    private clamp(number: number, min: number, max: number) {\r\n        return Math.max(min, Math.min(max, number));\r\n    }\r\n}\r\n\r\nexport async function* parseDisplaySets(s: ReadableStream) {\r\n    const bufferGenerator = new BufferGenerator(s);\r\n    bufferGenerator.requestedBytes = 13;\r\n\r\n    let header: SegmentHeader | undefined;\r\n    let lastDisplaySet: DisplaySet | undefined;\r\n    let presentationCompositionSegment: PresentationCompositionSegment | undefined;\r\n    let windowDefinitionSegments: WindowDefinitionSegment[] = [];\r\n    let paletteDefinitionSegments: PaletteDefinitionSegment[] = [];\r\n    let objectDefinitionSegments: ObjectDefinitionSegment[] = [];\r\n\r\n    for await (const buffer of bufferGenerator.buffers()) {\r\n        const reader = new BufferReader(buffer);\r\n\r\n        if (header) {\r\n            switch (header.segmentType) {\r\n                case SegmentType.pcs:\r\n                    if (presentationCompositionSegment !== undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    presentationCompositionSegment = parsePcsSegment(reader, header);\r\n                    break;\r\n                case SegmentType.wds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected WDS`);\r\n                    }\r\n\r\n                    windowDefinitionSegments.push(parseWdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.pds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    paletteDefinitionSegments.push(parsePdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.ods:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected ODS`);\r\n                    }\r\n\r\n                    const ods = parseOdsSegment(reader, header);\r\n                    objectDefinitionSegments.push(ods);\r\n                    break;\r\n                case SegmentType.end:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected end segment`);\r\n                    }\r\n\r\n                    const endDefinitionSegment = { header };\r\n                    lastDisplaySet = new DisplaySet(\r\n                        presentationCompositionSegment,\r\n                        windowDefinitionSegments,\r\n                        paletteDefinitionSegments,\r\n                        objectDefinitionSegments,\r\n                        endDefinitionSegment,\r\n                        lastDisplaySet\r\n                    );\r\n\r\n                    yield lastDisplaySet;\r\n\r\n                    presentationCompositionSegment = undefined;\r\n                    windowDefinitionSegments = [];\r\n                    paletteDefinitionSegments = [];\r\n                    objectDefinitionSegments = [];\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown segment type: ${header.segmentType}`);\r\n            }\r\n\r\n            header = undefined;\r\n            bufferGenerator.requestedBytes = 13;\r\n        } else {\r\n            const magicNumber = reader.readHex(2);\r\n\r\n            if (magicNumber !== pgMagicNumber) {\r\n                throw new Error(`Invalid magic number: ${magicNumber}`);\r\n            }\r\n\r\n            const presentationTimestamp = reader.readHex(4);\r\n            const decodingTimestamp = reader.readHex(4);\r\n            const segmentType = segmentTypeFromByte(reader.readHex(1));\r\n            const segmentSize = reader.readHex(2);\r\n            header = { presentationTimestamp, decodingTimestamp, segmentType, segmentSize };\r\n            bufferGenerator.requestedBytes = segmentSize;\r\n        }\r\n    }\r\n}\r\n\r\nfunction parsePcsSegment(reader: BufferReader, header: SegmentHeader): PresentationCompositionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const width = reader.readHex(2, limit);\r\n    const height = reader.readHex(2, limit);\r\n    reader.readHex(1); // ignore frame rate\r\n    const compositionNumber = reader.readHex(2, limit);\r\n    const compositionState = compositionStateFromByte(reader.readHex(1, limit));\r\n    const paletteUpdateFlag = paletteUpdateFlagFromByte(reader.readHex(1, limit));\r\n    const paletteId = reader.readHex(1, limit);\r\n    const compositionObjectCount = reader.readHex(1, limit);\r\n    const objectId = reader.readHex(2, limit);\r\n    const windowId = reader.readHex(1, limit);\r\n    const objectCroppedFlag = objectCroppedFlagFromByte(reader.readHex(1, limit));\r\n    const objectHorizontalPosition = reader.readHex(2, limit);\r\n    const objectVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingHorizontalPosition = reader.readHex(2, limit);\r\n    const objectCroppingVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingWidth = reader.readHex(2, limit);\r\n    const objectCroppingHeightPosition = reader.readHex(2, limit);\r\n\r\n    return {\r\n        header,\r\n        width,\r\n        height,\r\n        compositionNumber,\r\n        compositionState,\r\n        paletteUpdateFlag,\r\n        paletteId,\r\n        compositionObjectCount,\r\n        objectId,\r\n        windowId,\r\n        objectCroppedFlag,\r\n        objectHorizontalPosition,\r\n        objectVerticalPosition,\r\n        objectCroppingHorizontalPosition,\r\n        objectCroppingVerticalPosition,\r\n        objectCroppingWidth,\r\n        objectCroppingHeightPosition,\r\n    };\r\n}\r\n\r\nfunction parseWdsSegment(reader: BufferReader, header: SegmentHeader): WindowDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const windowCount = reader.readHex(1, limit);\r\n    const windowDefinitions = [];\r\n\r\n    for (let i = 0; i < windowCount; ++i) {\r\n        const windowId = reader.readHex(1, limit);\r\n        const windowHorizontalPosition = reader.readHex(2, limit);\r\n        const windowVerticalPosition = reader.readHex(2, limit);\r\n        const windowWidth = reader.readHex(2, limit);\r\n        const windowHeight = reader.readHex(2, limit);\r\n\r\n        windowDefinitions.push({\r\n            windowId,\r\n            windowHorizontalPosition,\r\n            windowVerticalPosition,\r\n            windowWidth,\r\n            windowHeight,\r\n        });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        windowCount,\r\n        windowDefinitions,\r\n    };\r\n}\r\n\r\nfunction parsePdsSegment(reader: BufferReader, header: SegmentHeader): PaletteDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const paletteId = reader.readHex(1, limit);\r\n    const paletteVersionNumber = reader.readHex(1, limit);\r\n    const paletteEntries: PaletteEntry[] = [];\r\n\r\n    while (reader.index < limit) {\r\n        const paletteEntryId = reader.readHex(1, limit);\r\n        const luminance = reader.readHex(1, limit);\r\n        const colorDifferenceRed = reader.readHex(1, limit);\r\n        const colorDifferenceBlue = reader.readHex(1, limit);\r\n        const transparency = reader.readHex(1, limit);\r\n        paletteEntries.push({ paletteEntryId, luminance, colorDifferenceRed, colorDifferenceBlue, transparency });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        paletteId,\r\n        paletteVersionNumber,\r\n        paletteEntries,\r\n    };\r\n}\r\n\r\nfunction parseOdsSegment(reader: BufferReader, header: SegmentHeader): ObjectDefinitionSegment {\r\n    const objectId = reader.readHex(2);\r\n    const objectVersionNumber = reader.readHex(1);\r\n    const lastInSequenceFlag = lastInSequenceFlagFromByte(reader.readHex(1));\r\n    const objectDataLength = reader.readHex(3);\r\n    let width: number | undefined;\r\n    let height: number | undefined;\r\n    let objectData: BufferAdapter;\r\n\r\n    if (\r\n        lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n        lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n    ) {\r\n        width = reader.readHex(2);\r\n        height = reader.readHex(2);\r\n        objectData = reader.readBuffer(objectDataLength - 4);\r\n    } else {\r\n        objectData = reader.readBuffer(objectDataLength);\r\n    }\r\n\r\n    return {\r\n        header,\r\n        objectId,\r\n        objectVersionNumber,\r\n        lastInSequenceFlag,\r\n        objectDataLength,\r\n        width,\r\n        height,\r\n        objectData: objectData,\r\n    };\r\n}\r\n","import { compile as parseAss } from 'ass-compiler';\r\nimport { parseSync as parseSrt } from 'subtitle';\r\nimport { WebVTT } from 'vtt.js';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport { DisplaySet, parseDisplaySets as parsePgsDisplaySets } from './pgs-parser';\r\nimport { SubtitleTextImage } from '@project/common';\r\n\r\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\r\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\r\nconst helperElement = document.createElement('div');\r\nconst helperCanvas = document.createElement('canvas');\r\n\r\ninterface SubtitleNode {\r\n    start: number;\r\n    end: number;\r\n    text: string;\r\n    textImage?: SubtitleTextImage;\r\n    track: number;\r\n}\r\n\r\nexport default class SubtitleReader {\r\n    private xmlParser?: XMLParser;\r\n\r\n    async subtitles(files: File[]) {\r\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\r\n            .flatMap((nodes) => nodes)\r\n            .sort((n1, n2) => n1.start - n2.start);\r\n    }\r\n\r\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\r\n        if (file.name.endsWith('.srt')) {\r\n            const nodes = parseSrt(await file.text());\r\n            return nodes.map((node: any) => ({\r\n                start: node.data.start,\r\n                end: node.data.end,\r\n                text: node.data.text.replace(tagRegex, ''),\r\n                track: track,\r\n            }));\r\n        }\r\n\r\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\r\n            return new Promise(async (resolve, reject) => {\r\n                const isFromNetflix = file.name.endsWith('.nfvtt');\r\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\r\n                const cues: any[] = [];\r\n                parser.oncue = (c: any) => {\r\n                    if (isFromNetflix) {\r\n                        c.text = c.text.replace(tagRegex, '');\r\n\r\n                        const lines = c.text.split('\\n');\r\n                        const newLines = [];\r\n\r\n                        for (const line of lines) {\r\n                            newLines.push(this._fixRTL(line));\r\n                        }\r\n\r\n                        c.text = newLines.join('\\n');\r\n                    }\r\n                    cues.push(c);\r\n                };\r\n                parser.onflush = () =>\r\n                    resolve(\r\n                        cues.map((c) => ({\r\n                            start: Math.floor(c.startTime * 1000),\r\n                            end: Math.floor(c.endTime * 1000),\r\n                            text: c.text as string,\r\n                            track: track,\r\n                        }))\r\n                    );\r\n                parser.parse(await file.text());\r\n                parser.flush();\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ass')) {\r\n            const nodes = parseAss(await file.text(), {});\r\n            return nodes.dialogues.map((dialogue) => {\r\n                return {\r\n                    start: Math.round(dialogue.start * 1000),\r\n                    end: Math.round(dialogue.end * 1000),\r\n                    text: dialogue.slices\r\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\r\n                        .join('')\r\n                        .replace(assNewLineRegex, '\\n'),\r\n                    track: track,\r\n                };\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ytxml')) {\r\n            const text = await file.text();\r\n            const xml = this._xmlParser().parse(text);\r\n\r\n            if (Object.keys(xml).length === 0) {\r\n                return [];\r\n            }\r\n\r\n            const textNodes = xml['transcript']['text'];\r\n            const subtitles = [];\r\n\r\n            for (let index = 0, length = textNodes.length; index < length; index++) {\r\n                const elm = textNodes[index];\r\n\r\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\r\n                    continue;\r\n                }\r\n\r\n                const start = parseFloat(elm['@_start']);\r\n\r\n                subtitles.push({\r\n                    start: Math.floor(start * 1000),\r\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\r\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\r\n                    track,\r\n                });\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        if (file.name.endsWith('.sup')) {\r\n            let imageDataArray: Uint8ClampedArray | undefined;\r\n            const subtitles = [];\r\n            let currentImageDisplaySet: DisplaySet | undefined;\r\n\r\n            // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\r\n            // @ts-ignore\r\n            for await (const displaySet of parsePgsDisplaySets(file.stream())) {\r\n                if (displaySet.objectDefinitionSegments.length > 0) {\r\n                    if (currentImageDisplaySet === undefined) {\r\n                        currentImageDisplaySet = displaySet;\r\n                    }\r\n                } else if (currentImageDisplaySet !== undefined) {\r\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\r\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\r\n                    imageDataArray =\r\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\r\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\r\n                            : imageDataArray;\r\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\r\n                    helperCanvas.width = imageData.width;\r\n                    helperCanvas.height = imageData.height;\r\n                    const context = helperCanvas.getContext('2d')!;\r\n                    context.putImageData(imageData, 0, 0);\r\n                    subtitles.push({\r\n                        start:\r\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\r\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\r\n                        text: '',\r\n                        textImage: {\r\n                            dataUrl: helperCanvas.toDataURL('image/png'),\r\n                            image: {\r\n                                width: imageData.width,\r\n                                height: imageData.height,\r\n                            },\r\n                            screen: {\r\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\r\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\r\n                            },\r\n                        },\r\n                        track,\r\n                    });\r\n\r\n                    currentImageDisplaySet = undefined;\r\n                }\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        throw new Error('Unsupported subtitle file format');\r\n    }\r\n\r\n    _fixRTL(line: string): string {\r\n        const index1 = line.indexOf('&lrm;');\r\n        const index2 = line.indexOf('&rlm;');\r\n        let newLine = '';\r\n\r\n        if (index1 > -1) {\r\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        } else if (index2 > -1) {\r\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    _decodeHTML(text: string): string {\r\n        helperElement.innerHTML = text;\r\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\r\n    }\r\n\r\n    _xmlParser() {\r\n        if (this.xmlParser === undefined) {\r\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\r\n        }\r\n\r\n        return this.xmlParser;\r\n    }\r\n}\r\n","import { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ninterface BarProps {\r\n    drawerWidth: number;\r\n    drawerOpen: boolean;\r\n    hidden: boolean;\r\n    title: string;\r\n    onFileSelector: () => void;\r\n    onOpenSettings: () => void;\r\n    onOpenCopyHistory: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, BarProps, string>((theme) => ({\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftButton: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    copyHistoryButton: {\r\n        transform: 'scaleX(1)',\r\n        width: 48,\r\n        padding: 12,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    copyHistoryButtonShift: {\r\n        transform: 'scaleX(0)',\r\n        width: 0,\r\n        padding: 5,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\ninterface CopyHistoryTooltipStylesProps {\r\n    show: boolean;\r\n}\r\n\r\ninterface CopyHistoryTooltipProps extends TooltipProps {\r\n    show: boolean;\r\n}\r\n\r\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\r\n    tooltip: ({ show }) => ({\r\n        display: show ? 'block' : 'none',\r\n    }),\r\n}));\r\n\r\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\r\n    const classes = useCopyHistoryTooltipStyles({ show: show });\r\n    return <Tooltip classes={classes} {...toolTipProps} />;\r\n}\r\n\r\nexport default function Bar(props: BarProps) {\r\n    const classes = useStyles(props);\r\n    return (\r\n        <AppBar\r\n            position=\"static\"\r\n            elevation={0}\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: props.drawerOpen,\r\n                [classes.hide]: props.hidden,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <Tooltip title=\"Open Files\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" className={classes.leftButton} onClick={props.onFileSelector}>\r\n                        <FolderIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {props.title}\r\n                </Typography>\r\n                <Tooltip title=\"Donate\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/sponsors/killergerbah?frequency=one-time\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <FavoriteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Submit Issue\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/killergerbah/asbplayer/issues\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <BugReportIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Help\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/killergerbah/asbplayer#usage\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <HelpIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Settings\">\r\n                    <IconButton edge=\"end\" color=\"inherit\" onClick={props.onOpenSettings}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <CopyHistoryTooltip title=\"Copy History\" show={!props.drawerOpen}>\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        className={clsx(classes.copyHistoryButton, {\r\n                            [classes.copyHistoryButtonShift]: props.drawerOpen,\r\n                        })}\r\n                        onClick={props.onOpenCopyHistory}\r\n                    >\r\n                        <ListIcon />\r\n                    </IconButton>\r\n                </CopyHistoryTooltip>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import { AsbPlayerToVideoCommandV2, Message, VideoTabModel } from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface ExtensionMessage {\r\n    data: Message;\r\n    tabId: number;\r\n    src: string;\r\n}\r\n\r\nexport default class ChromeExtension {\r\n    tabs: VideoTabModel[];\r\n\r\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\r\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\r\n    private readonly versionPromise: Promise<string>;\r\n    private readonly id: string;\r\n\r\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\r\n    private heartbeatStarted = false;\r\n\r\n    constructor() {\r\n        this.onMessageCallbacks = [];\r\n        this.onTabsCallbacks = [];\r\n        this.tabs = [];\r\n        this.versionPromise = new Promise((resolve, reject) => {\r\n            this.versionResolve = resolve;\r\n        });\r\n        this.id = uuidv4();\r\n\r\n        window.addEventListener('message', (event) => {\r\n            if (event.source !== window) {\r\n                return;\r\n            }\r\n\r\n            if (event.data.sender === 'asbplayer-extension-to-player') {\r\n                if (event.data.message) {\r\n                    if (event.data.message.command === 'tabs') {\r\n                        this.tabs = event.data.message.tabs;\r\n\r\n                        for (let c of this.onTabsCallbacks) {\r\n                            c(this.tabs);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (event.data.message.command === 'version') {\r\n                        this.versionResolve!(event.data.message.version);\r\n                        return;\r\n                    }\r\n\r\n                    for (let c of this.onMessageCallbacks) {\r\n                        c({\r\n                            data: event.data.message,\r\n                            tabId: event.data.tabId,\r\n                            src: event.data.src,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    startHeartbeat() {\r\n        if (!this.heartbeatStarted) {\r\n            this._sendHeartbeat();\r\n            setInterval(() => this._sendHeartbeat(), 1000);\r\n            this.heartbeatStarted = true;\r\n        }\r\n    }\r\n\r\n    _sendHeartbeat() {\r\n        window.postMessage(\r\n            {\r\n                sender: 'asbplayerv2',\r\n                message: {\r\n                    command: 'heartbeat',\r\n                    id: this.id,\r\n                    receivedTabs: this.tabs,\r\n                },\r\n            },\r\n            '*'\r\n        );\r\n    }\r\n\r\n    async installedVersion(): Promise<string> {\r\n        return await this.versionPromise;\r\n    }\r\n\r\n    sendMessage(message: Message, tabId: number, src: string) {\r\n        const command: AsbPlayerToVideoCommandV2<Message> = {\r\n            sender: 'asbplayerv2',\r\n            message: message,\r\n            tabId: tabId,\r\n            src: src,\r\n        };\r\n        window.postMessage(command, '*');\r\n    }\r\n\r\n    publishMessage(message: Message) {\r\n        for (const tab of this.tabs) {\r\n            const command: AsbPlayerToVideoCommandV2<Message> = {\r\n                sender: 'asbplayerv2',\r\n                message: message,\r\n                tabId: tab.id,\r\n                src: tab.src,\r\n            };\r\n            window.postMessage(command, '*');\r\n        }\r\n    }\r\n\r\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this.onTabsCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this._remove(callback, this.onTabsCallbacks);\r\n    }\r\n\r\n    subscribe(callback: (message: ExtensionMessage) => void) {\r\n        this.onMessageCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\r\n        this._remove(callback, this.onMessageCallbacks);\r\n    }\r\n\r\n    _remove(callback: Function, callbacks: Function[]) {\r\n        for (let i = callbacks.length - 1; i >= 0; --i) {\r\n            if (callback === callbacks[i]) {\r\n                callbacks.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rgb } from '@project/common';\r\n\r\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (!equals(a[i], b[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function keysAreEqual(a: any, b: any) {\r\n    for (let key in a) {\r\n        if (!(key in b)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let key in b) {\r\n        if (!(key in a)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction hexToRgb(hex: string): Rgb {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\r\n    return {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n    };\r\n}\r\n\r\ninterface SubtitleStyle {\r\n    subtitleColor: string;\r\n    subtitleSize: number;\r\n    subtitleOutlineThickness: number;\r\n    subtitleOutlineColor: string;\r\n    subtitleBackgroundOpacity: number;\r\n    subtitleBackgroundColor: string;\r\n    subtitleFontFamily: string;\r\n}\r\n\r\nexport function computeStyles({\r\n    subtitleColor,\r\n    subtitleSize,\r\n    subtitleOutlineThickness,\r\n    subtitleOutlineColor,\r\n    subtitleBackgroundOpacity,\r\n    subtitleBackgroundColor,\r\n    subtitleFontFamily,\r\n}: SubtitleStyle) {\r\n    const styles: any = {\r\n        color: subtitleColor,\r\n        fontSize: Number(subtitleSize),\r\n    };\r\n\r\n    if (subtitleOutlineThickness > 0) {\r\n        const thickness = subtitleOutlineThickness;\r\n        const color = subtitleOutlineColor;\r\n        styles[\r\n            'textShadow'\r\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\r\n    }\r\n\r\n    if (subtitleBackgroundOpacity > 0) {\r\n        const opacity = subtitleBackgroundOpacity;\r\n        const color = subtitleBackgroundColor;\r\n        const { r, g, b } = hexToRgb(color);\r\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\r\n        styles['fontFamily'] = subtitleFontFamily;\r\n    }\r\n\r\n    return styles;\r\n}\r\n\r\nexport function timeDurationDisplay(\r\n    milliseconds: number,\r\n    totalMilliseconds: number,\r\n    includeMilliseconds = true\r\n): string {\r\n    if (milliseconds < 0) {\r\n        return timeDurationDisplay(0, totalMilliseconds);\r\n    }\r\n\r\n    milliseconds = Math.round(milliseconds);\r\n    const ms = milliseconds % 1000;\r\n    milliseconds = (milliseconds - ms) / 1000;\r\n    const secs = milliseconds % 60;\r\n    milliseconds = (milliseconds - secs) / 60;\r\n    const mins = milliseconds % 60;\r\n\r\n    if (totalMilliseconds >= 3600000) {\r\n        const hrs = (milliseconds - mins) / 60;\r\n\r\n        if (includeMilliseconds) {\r\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\r\n        }\r\n\r\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\r\n    }\r\n\r\n    if (includeMilliseconds) {\r\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\r\n    }\r\n\r\n    return pad(mins) + ':' + pad(secs);\r\n}\r\n\r\nfunction pad(n: number, zeros: number = 2) {\r\n    return String(n).padStart(zeros, '0');\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport { Theme } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\r\n\r\nexport interface CopyHistoryItem extends SubtitleModel {\r\n    name: string;\r\n    id: string;\r\n    timestamp: number;\r\n    surroundingSubtitles: SubtitleModel[];\r\n    audioFile?: File;\r\n    audioTrack?: string;\r\n    videoFile?: File;\r\n    subtitleFile?: File;\r\n    mediaTimestamp?: number;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n    url?: string;\r\n}\r\n\r\ninterface CopyHistoryProps {\r\n    open: boolean;\r\n    drawerWidth: number;\r\n    items: CopyHistoryItem[];\r\n    onClose: () => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n    onAnki: (item: CopyHistoryItem) => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\r\n    drawer: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'static',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    listContainer: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n    },\r\n    listItem: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    listItemGutters: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    listItemIconRoot: {\r\n        minWidth: 20,\r\n    },\r\n    emptyState: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        height: '100%',\r\n        padding: 15,\r\n    },\r\n    text: {\r\n        flexGrow: 1,\r\n    },\r\n    emptyText: {\r\n        flexGrow: 1,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    timestamp: {\r\n        paddingRight: 15,\r\n        paddingLeft: 15,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ninterface MenuProps {\r\n    open: boolean;\r\n    item?: CopyHistoryItem;\r\n    anchorEl?: Element;\r\n    onClose: () => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(item!.text);\r\n        onClose();\r\n    }, [item, onClose]);\r\n\r\n    const handleJumpTo = useCallback(() => {\r\n        onSelect(item!);\r\n        onClose();\r\n    }, [item, onSelect, onClose]);\r\n\r\n    const handleClipAudio = useCallback(() => {\r\n        onClipAudio(item!);\r\n        onClose();\r\n    }, [item, onClipAudio, onClose]);\r\n\r\n    const handleDownloadImage = useCallback(() => {\r\n        onDownloadImage(item!);\r\n        onClose();\r\n    }, [item, onDownloadImage, onClose]);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        onDelete(item!);\r\n        onClose();\r\n    }, [item, onDelete, onClose]);\r\n\r\n    if (!item) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Popover\r\n            disableEnforceFocus={true}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: 'center',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <List>\r\n                <ListItem button onClick={handleCopy}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\r\n                </ListItem>\r\n                <ListItem button onClick={handleJumpTo}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\r\n                </ListItem>\r\n                {(item.videoFile || item.audioFile || item.audio) && (\r\n                    <ListItem button onClick={handleClipAudio}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\r\n                    </ListItem>\r\n                )}\r\n                {(item.videoFile || item.image) && (\r\n                    <ListItem button onClick={handleDownloadImage}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\r\n                    </ListItem>\r\n                )}\r\n                <ListItem button onClick={handleDelete}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\r\n                </ListItem>\r\n            </List>\r\n        </Popover>\r\n    );\r\n}\r\n\r\nexport default function CopyHistory(props: CopyHistoryProps) {\r\n    const onDelete = props.onDelete;\r\n    const classes = useStyles(props);\r\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\r\n        if (element) {\r\n            element.scrollIntoView();\r\n        }\r\n    }, []);\r\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\r\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\r\n\r\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\r\n        setMenuItem(item);\r\n        setMenuOpen(true);\r\n        setMenuAnchorEl(e.currentTarget);\r\n    }, []);\r\n\r\n    const handleMenuClosed = useCallback(() => {\r\n        setMenuItem(undefined);\r\n        setMenuOpen(false);\r\n        setMenuAnchorEl(undefined);\r\n    }, []);\r\n\r\n    const handleDelete = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            onDelete(item);\r\n        },\r\n        [onDelete]\r\n    );\r\n\r\n    let content;\r\n\r\n    if (props.items.length > 0) {\r\n        const items = [];\r\n        let lastSeenItemName = null;\r\n        let i = 0;\r\n        const itemNameCounters: { [name: string]: number } = {};\r\n\r\n        for (const item of props.items) {\r\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\r\n                if (item.name in itemNameCounters) {\r\n                    itemNameCounters[item.name]++;\r\n                } else {\r\n                    itemNameCounters[item.name] = 0;\r\n                }\r\n\r\n                lastSeenItemName = item.name;\r\n                items.push(\r\n                    <ListSubheader disableSticky={true} key={item.name + '-' + itemNameCounters[item.name]}>\r\n                        {item.name}\r\n                    </ListSubheader>\r\n                );\r\n            }\r\n\r\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\r\n\r\n            items.push(\r\n                <ListItem\r\n                    ref={ref}\r\n                    key={item.id}\r\n                    className={classes.listItem}\r\n                    classes={{ gutters: classes.listItemGutters }}\r\n                >\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <Tooltip title=\"Export to Anki\">\r\n                            <IconButton onClick={() => props.onAnki(item)}>\r\n                                <StarIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </ListItemIcon>\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\r\n                            <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={\r\n                            <Grid wrap=\"nowrap\" container>\r\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\r\n                                    {item.text === '' ? 'No text' : item.text}\r\n                                </Grid>\r\n                                <Grid item className={classes.timestamp}>\r\n                                    {timeDurationDisplay(item.start, item.start, false)}\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n            );\r\n\r\n            ++i;\r\n        }\r\n\r\n        content = (\r\n            <div className={classes.listContainer}>\r\n                <List>{items}</List>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className={classes.emptyState}>\r\n                <Typography variant=\"h6\">Copy history is empty.</Typography>\r\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.open}\r\n                className={classes.drawer}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={props.onClose}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                {content}\r\n            </Drawer>\r\n            <Menu\r\n                open={props.open && menuOpen}\r\n                anchorEl={menuAnchorEl}\r\n                item={menuItem}\r\n                onClose={handleMenuClosed}\r\n                onSelect={props.onSelect}\r\n                onClipAudio={props.onClipAudio}\r\n                onDownloadImage={props.onDownloadImage}\r\n                onDelete={handleDelete}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport gt from 'semver/functions/gt';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport { Theme } from '@material-ui/core/styles';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    background: ({ appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        width: '100%',\r\n        zIndex: 100,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    }),\r\n    browseLink: {\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    extension: ChromeExtension;\r\n    latestExtensionVersion: string;\r\n    extensionUrl: string;\r\n    loading: boolean;\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\r\n        React.MouseEventHandler<HTMLSpanElement> &\r\n        React.MouseEventHandler<HTMLLabelElement>;\r\n}\r\n\r\nexport default function LandingPage({\r\n    extension,\r\n    latestExtensionVersion,\r\n    extensionUrl,\r\n    loading,\r\n    dragging,\r\n    appBarHidden,\r\n    onFileSelector,\r\n}: Props) {\r\n    const classes = useStyles({ appBarHidden });\r\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        async function fetchInstalledExtensionVersion() {\r\n            setInstalledExtensionVersion(await extension.installedVersion());\r\n        }\r\n\r\n        fetchInstalledExtensionVersion();\r\n    }, [extension]);\r\n\r\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\r\n    const extensionNotInstalled = !installedExtensionVersion;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={!loading && !dragging} timeout={500}>\r\n                <div className={classes.background}>\r\n                    <Typography variant=\"h6\">\r\n                        Drag and drop subtitle and media files, or{' '}\r\n                        <Link\r\n                            target=\"#\"\r\n                            className={classes.browseLink}\r\n                            onClick={onFileSelector}\r\n                            color=\"secondary\"\r\n                            component=\"label\"\r\n                        >\r\n                            browse\r\n                        </Link>\r\n                        .\r\n                        <br />\r\n                        {extensionNotInstalled && (\r\n                            <span>\r\n                                Install the{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    Chrome extension\r\n                                </Link>{' '}\r\n                                to sync subtitles with streaming video.\r\n                            </span>\r\n                        )}\r\n                        {extensionUpdateAvailable && (\r\n                            <span>\r\n                                An extension{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    update\r\n                                </Link>{' '}\r\n                                is available.\r\n                            </span>\r\n                        )}\r\n                    </Typography>\r\n                </div>\r\n            </Fade>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { Message } from \"@project/common\";\r\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\r\n\r\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\r\n    private channel?: BroadcastChannel;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n    \r\n    constructor(channelId: string) {\r\n        this.channel = new BroadcastChannel(channelId);\r\n        const that = this;\r\n        this.channel.onmessage = (event) => {\r\n            that.onMessage?.(event as VideoProtocolMessage);\r\n        };\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.channel?.close();\r\n        this.channel = undefined;\r\n    }\r\n}\r\n","import { Message } from '@project/common';\r\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\r\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\r\n\r\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\r\n    private readonly tabId: number;\r\n    private readonly src: string;\r\n    private readonly extension: ChromeExtension;\r\n    private readonly listener: (message: ExtensionMessage) => void;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n\r\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\r\n        this.tabId = tabId;\r\n        this.src = src;\r\n        this.listener = (message) => {\r\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\r\n                this.onMessage?.({\r\n                    data: message.data,\r\n                });\r\n            }\r\n        };\r\n\r\n        extension.subscribe(this.listener);\r\n        this.extension = extension;\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.extension.sendMessage(message, this.tabId, this.src);\r\n    }\r\n\r\n    close() {\r\n        this.extension.unsubscribe(this.listener);\r\n    }\r\n}\r\n","export default class Clock {\r\n    private accumulated: number;\r\n    private started: boolean;\r\n    private startTime?: number;\r\n\r\n    constructor() {\r\n        this.accumulated = 0;\r\n        this.started = false;\r\n    }\r\n\r\n    time(max: number) {\r\n        if (this.started) {\r\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\r\n        }\r\n\r\n        return Math.min(max, this.accumulated);\r\n    }\r\n\r\n    stop() {\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        this.started = false;\r\n        this.accumulated += Date.now() - this.startTime!;\r\n    }\r\n\r\n    start() {\r\n        this.startTime = Date.now();\r\n        this.started = true;\r\n    }\r\n\r\n    setTime(time: number) {\r\n        if (this.started) {\r\n            this.startTime = Date.now();\r\n            this.accumulated = time;\r\n        } else {\r\n            this.accumulated = time;\r\n        }\r\n    }\r\n\r\n    progress(max: number) {\r\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport { AsbplayerSettingsProvider, AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\r\nimport Clock from '../services/Clock';\r\n\r\nconst useControlStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        width: '50%',\r\n        bottom: 0,\r\n        pointerEvents: 'none',\r\n        color: '#fff',\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n    },\r\n    timeDisplay: {\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        cursor: 'default',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    offsetInput: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n        width: 100,\r\n        color: '#fff',\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerShown: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 5,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerHidden: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputHidden: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputShown: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 100,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbHidden: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbShown: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 1,\r\n        pointerEvents: 'auto',\r\n    },\r\n    subContainer: {\r\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\r\n        position: 'relative',\r\n        left: '-100%',\r\n        width: '200%',\r\n        zIndex: 10,\r\n    },\r\n    button: {\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveButton: {\r\n        color: 'rgba(72, 72, 72, 0.7)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveTopButton: {\r\n        color: 'rgba(255, 255, 255, 0.5)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    progress: {\r\n        margin: 5,\r\n    },\r\n    topButton: {\r\n        pointerEvents: 'auto',\r\n        color: '#fff',\r\n    },\r\n    gridContainer: {\r\n        pointerEvents: 'auto',\r\n        padding: 2,\r\n    },\r\n}));\r\n\r\nconst useProgressBarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 10,\r\n    },\r\n    container: {\r\n        height: 10,\r\n        pointerEvents: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        position: 'absolute',\r\n        width: 'calc(100% - 20px)',\r\n        marginLeft: 10,\r\n    },\r\n    mouseEventListener: {\r\n        zIndex: 1,\r\n        height: 10,\r\n        cursor: 'pointer',\r\n        pointerEvents: 'auto',\r\n        position: 'absolute',\r\n        width: '100%',\r\n    },\r\n    fillContainer: {\r\n        background: 'rgba(30,30,30,0.7)',\r\n        width: '100%',\r\n        height: 5,\r\n        position: 'relative',\r\n    },\r\n    fillContainerThick: {\r\n        transition: theme.transitions.create('height', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: 50,\r\n        }),\r\n        height: 8,\r\n    },\r\n    fill: {\r\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\r\n        height: '100%',\r\n    },\r\n    handleContainer: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        bottom: 0,\r\n    },\r\n    handle: {\r\n        borderRadius: '50%',\r\n        width: 16,\r\n        height: 16,\r\n        opacity: 0,\r\n        left: -8,\r\n        background: 'white',\r\n        position: 'absolute',\r\n    },\r\n    handleOn: {\r\n        opacity: 1,\r\n        transition: theme.transitions.create('opacity', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\n\r\nconst VolumeSlider = withStyles((theme) => ({\r\n    root: {\r\n        color: 'white',\r\n        verticalAlign: 'middle',\r\n    },\r\n    thumb: {\r\n        backgroundColor: 'white',\r\n        color: 'white',\r\n        '&:focus': {\r\n            boxShadow: 'inherit',\r\n        },\r\n        '&:hover, &$active': {\r\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\r\n        },\r\n    },\r\n    active: {\r\n        color: 'white',\r\n    },\r\n}))(Slider);\r\n\r\nfunction displayTime(milliseconds: number) {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsInMinute = seconds % 60;\r\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\r\n}\r\n\r\nfunction elementWidth(element: HTMLElement) {\r\n    const rect = element.getBoundingClientRect();\r\n    return rect.right - rect.left;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n    onSeek: (progress: number) => void;\r\n    value: number;\r\n}\r\n\r\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\r\n    const classes = useProgressBarStyles();\r\n    const [mouseOver, setMouseOver] = useState(false);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            const rect = e.currentTarget.getBoundingClientRect();\r\n            // Account for margins by subtracting 10 from left/right sides\r\n            const width = rect.right - rect.left - 20;\r\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\r\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\r\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\r\n    const fillStyle = { width: progressWidth };\r\n    const handleStyle = { marginLeft: progressWidth };\r\n    const fillContainerClassName = mouseOver\r\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\r\n        : classes.fillContainer;\r\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div ref={containerRef} className={classes.container}>\r\n                <div className={fillContainerClassName}>\r\n                    <div className={classes.fill} style={fillStyle}></div>\r\n                    <div className={classes.handleContainer}>\r\n                        <div className={handleClassName} style={handleStyle} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className={classes.mouseEventListener}\r\n                onClick={handleClick}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface AudioTrackSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction AudioTrackSelector({\r\n    open,\r\n    anchorEl,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    onAudioTrackSelected,\r\n    onClose,\r\n}: AudioTrackSelectorProps) {\r\n    if (!audioTracks || audioTracks.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = audioTracks.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={t.id === selectedAudioTrack}\r\n                button\r\n                onClick={() => onAudioTrackSelected(t.id)}\r\n            >\r\n                {t.language} {t.label}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface TabSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\r\n    if (!tabs || tabs.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = tabs.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\r\n                button\r\n                onClick={() => onTabSelected(t)}\r\n            >\r\n                {t.id} {t.title} {t.src}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MediaUnloaderProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    file?: string;\r\n    onUnload: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem button onClick={(e) => onUnload()}>\r\n                        Unload {file}\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface PlayModeSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    selectedPlayMode?: PlayMode;\r\n    onPlayMode: (playMode: PlayMode) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.normal}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\r\n                    >\r\n                        Normal\r\n                    </ListItem>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.condensed}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\r\n                    >\r\n                        Condensed\r\n                    </ListItem>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.autoPause}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\r\n                    >\r\n                        Auto-pause\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface ControlsProps {\r\n    clock: Clock;\r\n    playing: boolean;\r\n    length: number;\r\n    offsetEnabled?: boolean;\r\n    displayLength?: number;\r\n    offset: number;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onSeek: (progress: number) => void;\r\n    mousePositionRef: MutableRefObject<Point>;\r\n    onShow?: (show: boolean) => void;\r\n    onPause: () => void;\r\n    onPlay: () => void;\r\n    onTabSelected?: (tab: VideoTabModel) => void;\r\n    onUnloadAudio?: () => void;\r\n    onUnloadVideo?: () => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onVolumeChange: (volume: number) => void;\r\n    disableKeyEvents?: boolean;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    closeEnabled?: boolean;\r\n    onClose?: () => void;\r\n    volumeEnabled?: boolean;\r\n    playMode?: PlayMode;\r\n    playModeEnabled?: boolean;\r\n    onPlayMode?: (playMode: PlayMode) => void;\r\n    subtitlesEnabled?: boolean;\r\n    subtitlesToggle?: boolean;\r\n    onSubtitlesToggle?: () => void;\r\n    videoFile?: string;\r\n    audioFile?: string;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    popOutEnabled?: boolean;\r\n    popOut?: boolean;\r\n    onPopOutToggle?: () => void;\r\n    fullscreenEnabled?: boolean;\r\n    fullscreen?: boolean;\r\n    onFullscreenToggle?: () => void;\r\n    hideSubtitlePlayerToggleEnabled?: boolean;\r\n    subtitlePlayerHidden?: boolean;\r\n    onHideSubtitlePlayerToggle?: () => void;\r\n    showOnMouseMovement: boolean;\r\n    theaterModeToggleEnabled?: boolean;\r\n    theaterModeEnabled?: boolean;\r\n    onTheaterModeToggle?: () => void;\r\n}\r\n\r\nexport default function Controls({\r\n    clock,\r\n    playing,\r\n    length,\r\n    offsetEnabled,\r\n    displayLength,\r\n    offset,\r\n    onAudioTrackSelected,\r\n    onSeek,\r\n    mousePositionRef,\r\n    onShow,\r\n    onPause,\r\n    onPlay,\r\n    onTabSelected,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onOffsetChange,\r\n    onVolumeChange,\r\n    disableKeyEvents,\r\n    settingsProvider,\r\n    closeEnabled,\r\n    onClose,\r\n    volumeEnabled,\r\n    playMode,\r\n    playModeEnabled,\r\n    onPlayMode,\r\n    subtitlesEnabled,\r\n    subtitlesToggle,\r\n    onSubtitlesToggle,\r\n    videoFile,\r\n    audioFile,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    tabs,\r\n    selectedTab,\r\n    popOutEnabled,\r\n    popOut,\r\n    onPopOutToggle,\r\n    fullscreenEnabled,\r\n    fullscreen,\r\n    onFullscreenToggle,\r\n    hideSubtitlePlayerToggleEnabled,\r\n    subtitlePlayerHidden,\r\n    onHideSubtitlePlayerToggle,\r\n    showOnMouseMovement,\r\n    theaterModeToggleEnabled,\r\n    theaterModeEnabled,\r\n    onTheaterModeToggle,\r\n}: ControlsProps) {\r\n    const classes = useControlStyles();\r\n    const [show, setShow] = useState<boolean>(true);\r\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\r\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\r\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\r\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\r\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\r\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\r\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\r\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\r\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\r\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\r\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\r\n    const [volume, setVolume] = useState<number>(100);\r\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\r\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const lastShowTimestampRef = useRef<number>(Date.now());\r\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\r\n    const lastShowRef = useRef<boolean>(true);\r\n    const forceShowRef = useRef<boolean>(false);\r\n    const offsetInputRef = useRef<HTMLInputElement>();\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [, updateState] = useState<any>();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    function handleMouseOver() {\r\n        forceShowRef.current = true;\r\n    }\r\n\r\n    function handleMouseOut() {\r\n        forceShowRef.current = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedVolume = Number(settingsProvider.volume);\r\n        setVolume(savedVolume);\r\n        onVolumeChange(savedVolume / 100);\r\n\r\n        if (savedVolume > 0) {\r\n            setLastCommittedVolume(savedVolume);\r\n        }\r\n    }, [settingsProvider, onVolumeChange]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let currentShow: boolean;\r\n\r\n            if (showOnMouseMovement) {\r\n                currentShow =\r\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\r\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\r\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\r\n                        100;\r\n            } else {\r\n                currentShow =\r\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\r\n                        (closeButtonRef.current &&\r\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\r\n                    false;\r\n            }\r\n\r\n            currentShow =\r\n                currentShow ||\r\n                forceShowRef.current ||\r\n                offsetInputRef.current === document.activeElement ||\r\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\r\n\r\n            if (currentShow && !lastShowRef.current) {\r\n                lastShowTimestampRef.current = Date.now();\r\n                setShow(currentShow);\r\n            } else if (!currentShow && lastShowRef.current) {\r\n                setShow(currentShow);\r\n            }\r\n\r\n            lastShowRef.current = currentShow;\r\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\r\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\r\n        }, 100);\r\n        return () => clearInterval(interval);\r\n    }, [mousePositionRef, showOnMouseMovement]);\r\n\r\n    useEffect(() => onShow?.(show), [onShow, show]);\r\n\r\n    useEffect(() => {\r\n        if (disableKeyEvents) {\r\n            return;\r\n        }\r\n\r\n        function handleKey(event: KeyboardEvent) {\r\n            if (event.key === 'Enter') {\r\n                if (offsetInputRef.current === document.activeElement) {\r\n                    const offset = Number(offsetInputRef.current.value);\r\n\r\n                    if (Number.isNaN(offset)) {\r\n                        return;\r\n                    }\r\n\r\n                    onOffsetChange(offset * 1000);\r\n                    offsetInputRef.current.blur();\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKey);\r\n        };\r\n    }, [onOffsetChange, disableKeyEvents]);\r\n\r\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\r\n        const inputElement = e.target as HTMLInputElement;\r\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            forceUpdate();\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [forceUpdate]);\r\n\r\n    useEffect(() => {\r\n        if (offsetInputRef.current) {\r\n            if (offset === 0) {\r\n                offsetInputRef.current.value = '';\r\n            } else {\r\n                const offsetSeconds = offset / 1000;\r\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\r\n                offsetInputRef.current.value = value;\r\n                lastOffsetInputChangeTimestampRef.current = Date.now();\r\n            }\r\n        }\r\n    }, [offset]);\r\n\r\n    const handleAudioTrackSelectorClosed = useCallback(() => {\r\n        setAudioTrackSelectorAnchorEl(undefined);\r\n        setAudioTrackSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\r\n        setAudioTrackSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            onAudioTrackSelected(id);\r\n            setAudioTrackSelectorAnchorEl(undefined);\r\n            setAudioTrackSelectorOpen(false);\r\n        },\r\n        [onAudioTrackSelected]\r\n    );\r\n\r\n    const handleTabSelectorClosed = useCallback(() => {\r\n        setTabSelectorAnchorEl(undefined);\r\n        setTabSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setTabSelectorAnchorEl(e.currentTarget);\r\n        setTabSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleTabSelected = useCallback(\r\n        (tab: VideoTabModel) => {\r\n            onTabSelected?.(tab);\r\n            setTabSelectorAnchorEl(undefined);\r\n            setTabSelectorOpen(false);\r\n        },\r\n        [onTabSelected]\r\n    );\r\n\r\n    const handleAudioUnloaderClosed = useCallback(() => {\r\n        setAudioUnloaderAnchorEl(undefined);\r\n        setAudioUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioUnloaderAnchorEl(e.currentTarget);\r\n        setAudioUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(() => {\r\n        onUnloadAudio?.();\r\n        setAudioUnloaderOpen(false);\r\n    }, [onUnloadAudio]);\r\n\r\n    const handleVideoUnloaderClosed = useCallback(() => {\r\n        setVideoUnloaderAnchorEl(undefined);\r\n        setVideoUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setVideoUnloaderAnchorEl(e.currentTarget);\r\n        setVideoUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadVideo = useCallback(() => {\r\n        onUnloadVideo?.();\r\n        setVideoUnloaderOpen(false);\r\n    }, [onUnloadVideo]);\r\n\r\n    const handlePlayModeSelectorClosed = useCallback(() => {\r\n        setPlayModeSelectorAnchorEl(undefined);\r\n        setPlayModeSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPlayModeSelectorAnchorEl(e.currentTarget);\r\n        setPlayModeSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handlePlayModeSelected = useCallback(\r\n        (playMode: PlayMode) => {\r\n            onPlayMode?.(playMode);\r\n            setPlayModeSelectorAnchorEl(undefined);\r\n            setPlayModeSelectorOpen(false);\r\n        },\r\n        [onPlayMode]\r\n    );\r\n\r\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\r\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\r\n\r\n    const handleVolumeChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            setVolume(value);\r\n            onVolumeChange(value / 100);\r\n        },\r\n        [onVolumeChange]\r\n    );\r\n\r\n    const handleVolumeChangeCommitted = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            if (value > 0) {\r\n                setLastCommittedVolume(value);\r\n            }\r\n\r\n            settingsProvider.volume = value;\r\n        },\r\n        [settingsProvider]\r\n    );\r\n\r\n    const handleVolumeToggle = useCallback(() => {\r\n        setVolume((volume) => {\r\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\r\n            onVolumeChange(newVolume / 100);\r\n            return newVolume;\r\n        });\r\n    }, [onVolumeChange, lastCommittedVolume]);\r\n\r\n    const progress = clock.progress(length);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={show} timeout={200}>\r\n                <Grid container style={{ position: 'absolute', top: 0 }}>\r\n                    <Grid item style={{ flexGrow: 1 }}>\r\n                        {closeEnabled && (\r\n                            <IconButton\r\n                                ref={closeButtonRef}\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onClose}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {theaterModeToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\r\n                                onClick={onTheaterModeToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <AspectRatioIcon />\r\n                            </IconButton>\r\n                        )}\r\n                        {hideSubtitlePlayerToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onHideSubtitlePlayerToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n            <div\r\n                ref={containerRef}\r\n                className={classes.container}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            >\r\n                <Fade in={show} timeout={200}>\r\n                    <div className={classes.subContainer}>\r\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\r\n                        <Grid container className={classes.gridContainer} direction=\"row\">\r\n                            <Grid item>\r\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\r\n                                    {playing ? (\r\n                                        <PauseIcon className={classes.button} />\r\n                                    ) : (\r\n                                        <PlayArrowIcon className={classes.button} />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Grid>\r\n                            {volumeEnabled && (\r\n                                <Grid\r\n                                    item\r\n                                    onMouseOver={handleVolumeMouseOver}\r\n                                    onMouseOut={handleVolumeMouseOut}\r\n                                    className={\r\n                                        showVolumeBar\r\n                                            ? classes.volumeInputContainerShown\r\n                                            : classes.volumeInputContainerHidden\r\n                                    }\r\n                                >\r\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\r\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\r\n                                    </IconButton>\r\n                                    <VolumeSlider\r\n                                        onChange={handleVolumeChange}\r\n                                        onChangeCommitted={handleVolumeChangeCommitted}\r\n                                        value={volume}\r\n                                        defaultValue={100}\r\n                                        classes={{\r\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\r\n                                            thumb: showVolumeBar\r\n                                                ? classes.volumeInputThumbShown\r\n                                                : classes.volumeInputThumbHidden,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item>\r\n                                <div className={classes.timeDisplay}>\r\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\r\n                                </div>\r\n                            </Grid>\r\n                            {offsetEnabled && (\r\n                                <Grid item>\r\n                                    <Input\r\n                                        inputRef={offsetInputRef}\r\n                                        disableUnderline={true}\r\n                                        className={classes.offsetInput}\r\n                                        placeholder={'±' + Number(0).toFixed(2)}\r\n                                        onClick={handleOffsetInputClicked}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\r\n                            {subtitlesToggle && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\r\n                                        <SubtitlesIcon\r\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {videoFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\r\n                                        <VideocamIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\r\n                                        <AudiotrackIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioTracks && audioTracks.length > 1 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\r\n                                        <QueueMusicIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {tabs && tabs.length > 0 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\r\n                                        <VideocamIcon\r\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {playModeEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\r\n                                        <TuneIcon\r\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {popOutEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\r\n                                        <OpenInNewIcon\r\n                                            className={classes.button}\r\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {fullscreenEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\r\n                                        {fullscreen ? (\r\n                                            <FullscreenExitIcon className={classes.button} />\r\n                                        ) : (\r\n                                            <FullscreenIcon className={classes.button} />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n                <TabSelector\r\n                    open={tabSelectorOpen && show}\r\n                    anchorEl={tabSelectorAnchorEl}\r\n                    tabs={tabs}\r\n                    selectedTab={selectedTab}\r\n                    onClose={handleTabSelectorClosed}\r\n                    onTabSelected={handleTabSelected}\r\n                />\r\n                <AudioTrackSelector\r\n                    open={audioTrackSelectorOpen && show}\r\n                    anchorEl={audioTrackSelectorAnchorEl}\r\n                    audioTracks={audioTracks}\r\n                    selectedAudioTrack={selectedAudioTrack}\r\n                    onClose={handleAudioTrackSelectorClosed}\r\n                    onAudioTrackSelected={handleAudioTrackSelected}\r\n                />\r\n                <MediaUnloader\r\n                    open={audioUnloaderOpen}\r\n                    anchorEl={audioUnloaderAnchorEl}\r\n                    file={audioFile}\r\n                    onClose={handleAudioUnloaderClosed}\r\n                    onUnload={handleUnloadAudio}\r\n                />\r\n                <MediaUnloader\r\n                    open={videoUnloaderOpen}\r\n                    anchorEl={videoUnloaderAnchorEl}\r\n                    file={videoFile}\r\n                    onClose={handleVideoUnloaderClosed}\r\n                    onUnload={handleUnloadVideo}\r\n                />\r\n                <PlayModeSelector\r\n                    open={playModeSelectorOpen && show}\r\n                    anchorEl={playModeSelectorAnchorEl}\r\n                    selectedPlayMode={playMode}\r\n                    onClose={handlePlayModeSelectorClosed}\r\n                    onPlayMode={handlePlayModeSelected}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { RefObject } from \"react\";\r\n\r\nexport interface MediaElement {\r\n    currentTime: number;\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null;\r\n    play: () => Promise<void>;\r\n    pause: () => void;\r\n    duration: number;\r\n}\r\n\r\nexport default class MediaAdapter {\r\n    private readonly ref: RefObject<MediaElement | undefined>;\r\n    private readonly readyResolves: (() => void)[];\r\n\r\n    constructor(ref: RefObject<MediaElement | undefined>) {\r\n        this.ref = ref;\r\n        this.readyResolves = [];\r\n    }\r\n\r\n    async seek(time: number) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this.ref.current.currentTime = time;\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    async onReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMediaCanPlay(callback: () => void) {\r\n        if (this.ref.current?.readyState === 4) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        if (this.ref.current && !this.ref.current.oncanplay) {\r\n            this.ref.current.oncanplay = (e) => {\r\n                for (const resolve of this.readyResolves) {\r\n                    resolve();\r\n                }\r\n\r\n                this.readyResolves.length = 0;\r\n\r\n                if (this.ref.current) {\r\n                    this.ref.current.oncanplay = null;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.readyResolves.push(callback);\r\n    }\r\n\r\n    play() {\r\n        this.ref.current?.play();\r\n    }\r\n\r\n    pause() {\r\n        this.ref.current?.pause();\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { keysAreEqual } from '../services/Util';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    KeyBindings,\r\n    PostMineAction,\r\n    surroundingSubtitles,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Clock from '../services/Clock';\r\n\r\ninterface StylesProps {\r\n    compressed: boolean;\r\n    appBarHidden: boolean;\r\n    windowWidth: number;\r\n}\r\n\r\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\r\n    container: {\r\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n        backgroundColor: theme.palette.background.default,\r\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\r\n    },\r\n    table: {\r\n        backgroundColor: theme.palette.background.default,\r\n        marginBottom: 75, // so the last row doesn't collide with controls\r\n    },\r\n    noSubtitles: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nconst useSubtitleRowStyles = makeStyles((theme) => ({\r\n    subtitleRow: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    subtitle: {\r\n        fontSize: 20,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    compressedSubtitle: {\r\n        fontSize: 16,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    disabledSubtitle: {\r\n        color: 'transparent',\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n        borderRadius: 5,\r\n    },\r\n    timestamp: {\r\n        fontSize: 14,\r\n        color: '#aaaaaa',\r\n        textAlign: 'right',\r\n        paddingRight: 15,\r\n        paddingLeft: 5,\r\n    },\r\n    copyButton: {\r\n        textAlign: 'right',\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nexport interface DisplaySubtitleModel extends SubtitleModel {\r\n    displayTime: string;\r\n}\r\n\r\ninterface SubtitleRowProps extends TableRowProps {\r\n    index: number;\r\n    compressed: boolean;\r\n    selected: boolean;\r\n    disabled: boolean;\r\n    subtitle: DisplaySubtitleModel;\r\n    subtitleRef: RefObject<HTMLTableRowElement>;\r\n    onClickSubtitle: (index: number) => void;\r\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\r\n}\r\n\r\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\r\n    const {\r\n        index,\r\n        selected,\r\n        subtitleRef,\r\n        onClickSubtitle,\r\n        onCopySubtitle,\r\n        compressed,\r\n        disabled,\r\n        subtitle,\r\n        ...tableRowProps\r\n    } = props;\r\n    const classes = useSubtitleRowStyles();\r\n    const textRef = useRef<HTMLSpanElement>(null);\r\n    const [textSelected, setTextSelected] = useState<boolean>(false);\r\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\r\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\r\n\r\n    if (subtitle.start < 0 || subtitle.end < 0) {\r\n        return null;\r\n    }\r\n\r\n    function handleMouseUp() {\r\n        const selection = document.getSelection();\r\n        const selected =\r\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\r\n        setTextSelected(selected ?? false);\r\n    }\r\n\r\n    const content = subtitle.textImage ? (\r\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\r\n    ) : (\r\n        <span ref={textRef} className={disabledClassName}>\r\n            {subtitle.text}\r\n        </span>\r\n    );\r\n\r\n    return (\r\n        <TableRow\r\n            onClick={() => !textSelected && onClickSubtitle(index)}\r\n            onMouseUp={handleMouseUp}\r\n            ref={subtitleRef}\r\n            className={classes.subtitleRow}\r\n            selected={selected}\r\n            {...tableRowProps}\r\n        >\r\n            <TableCell className={className}>{content}</TableCell>\r\n            <TableCell className={classes.copyButton}>\r\n                <IconButton onClick={(e) => onCopySubtitle(e, index)}>\r\n                    <FileCopy fontSize={compressed ? 'small' : 'medium'} />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\r\n        </TableRow>\r\n    );\r\n});\r\n\r\ninterface SubtitlePlayerProps {\r\n    clock: Clock;\r\n    onSeek: (progress: number, shouldPlay: boolean) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        postMineAction: PostMineAction,\r\n        preventDuplicate: boolean\r\n    ) => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onToggleSubtitleTrack: (track: number) => void;\r\n    onStartedShowing?: () => void;\r\n    onWillStopShowing?: () => void;\r\n    playing: boolean;\r\n    subtitles?: DisplaySubtitleModel[];\r\n    length: number;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    compressed: boolean;\r\n    loading: boolean;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    displayHelp?: string;\r\n    disableKeyEvents: boolean;\r\n    lastJumpToTopTimestamp: number;\r\n    hidden: boolean;\r\n    disabledSubtitleTracks: { [track: number]: boolean };\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n}\r\n\r\nexport default function SubtitlePlayer({\r\n    clock,\r\n    onSeek,\r\n    onCopy,\r\n    onOffsetChange,\r\n    onToggleSubtitleTrack,\r\n    onStartedShowing,\r\n    onWillStopShowing,\r\n    playing,\r\n    subtitles,\r\n    length,\r\n    jumpToSubtitle,\r\n    compressed,\r\n    loading,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    displayHelp,\r\n    disableKeyEvents,\r\n    lastJumpToTopTimestamp,\r\n    hidden,\r\n    disabledSubtitleTracks,\r\n    settingsProvider,\r\n}: SubtitlePlayerProps) {\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const clockRef = useRef<Clock>(clock);\r\n    clockRef.current = clock;\r\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\r\n    subtitleListRef.current = subtitles;\r\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\r\n        () =>\r\n            subtitles\r\n                ? Array(subtitles.length)\r\n                      .fill(undefined)\r\n                      .map((_) => createRef<HTMLTableRowElement>())\r\n                : [],\r\n        [subtitles]\r\n    );\r\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\r\n    subtitleRefsRef.current = subtitleRefs;\r\n    const disableKeyEventsRef = useRef<boolean>();\r\n    disableKeyEventsRef.current = disableKeyEvents;\r\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\r\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = length;\r\n    const hiddenRef = useRef<boolean>(false);\r\n    hiddenRef.current = hidden;\r\n    const lastScrollTimestampRef = useRef<number>(0);\r\n    const requestAnimationRef = useRef<number>();\r\n    const containerRef = useRef<HTMLElement>();\r\n    const drawerOpenRef = useRef<boolean>();\r\n    drawerOpenRef.current = drawerOpen;\r\n    const [windowWidth] = useWindowSize(true);\r\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\r\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\r\n    const onStartedShowingRef = useRef<() => void>();\r\n    onStartedShowingRef.current = onStartedShowing;\r\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\r\n    const onWillStopShowingRef = useRef<() => void>();\r\n    onWillStopShowingRef.current = onWillStopShowing;\r\n\r\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\r\n    // Therefore all of the state it operates on is contained in refs.\r\n    useEffect(() => {\r\n        const update = () => {\r\n            const subtitles = subtitleListRef.current || [];\r\n            const subtitleRefs = subtitleRefsRef.current;\r\n            const length = lengthRef.current;\r\n            const clock = clockRef.current;\r\n            const progress = clock.progress(lengthRef.current);\r\n\r\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\r\n            let fallbackIndex = -1;\r\n            let startedShowing = false;\r\n            let startedShowingSubtitle: SubtitleModel | undefined;\r\n            let willStopShowing = false;\r\n            let willStopShowingSubtitle: SubtitleModel | undefined;\r\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\r\n                        currentSubtitleIndexes[i] = true;\r\n                        const nextProgress = progress + 100 / length;\r\n\r\n                        if (!willStopShowing && nextProgress >= end) {\r\n                            willStopShowing = true;\r\n                            willStopShowingSubtitle = s;\r\n                        }\r\n\r\n                        // Add slight buffer to ensure sub is displaying on video\r\n                        if (!startedShowing && progress >= start + 100 / length && progress < start + 500 / length) {\r\n                            startedShowing = true;\r\n                            startedShowingSubtitle = s;\r\n                        }\r\n                    }\r\n\r\n                    if (fallbackIndex === -1) {\r\n                        fallbackIndex = i;\r\n                    }\r\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\r\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\r\n                currentSubtitleIndexes[fallbackIndex] = true;\r\n            }\r\n\r\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\r\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\r\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\r\n\r\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\r\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\r\n\r\n                    if (scrollToSubtitleRef?.current && allowScroll) {\r\n                        scrollToSubtitleRef.current.scrollIntoView({\r\n                            block: 'center',\r\n                            inline: 'nearest',\r\n                            behavior: 'smooth',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (startedShowing && startedShowingSubtitleRef.current !== startedShowingSubtitle) {\r\n                onStartedShowingRef.current?.();\r\n                startedShowingSubtitleRef.current = startedShowingSubtitle;\r\n            }\r\n\r\n            if (willStopShowing && willStopShowingSubtitleRef.current !== willStopShowingSubtitle) {\r\n                onWillStopShowingRef.current?.();\r\n                willStopShowingSubtitleRef.current = willStopShowingSubtitle;\r\n            }\r\n\r\n            requestAnimationRef.current = requestAnimationFrame(update);\r\n        };\r\n\r\n        requestAnimationRef.current = requestAnimationFrame(update);\r\n\r\n        return () => {\r\n            if (requestAnimationRef.current !== undefined) {\r\n                cancelAnimationFrame(requestAnimationRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const scrollToCurrentSubtitle = useCallback(() => {\r\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\r\n\r\n        if (!selectedSubtitleIndexes) {\r\n            return;\r\n        }\r\n\r\n        const indexes = Object.keys(selectedSubtitleIndexes);\r\n\r\n        if (indexes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\r\n\r\n        scrollToSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [subtitleRefs]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        function scrollIfVisible() {\r\n            if (document.visibilityState === 'visible') {\r\n                scrollToCurrentSubtitle();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('visibilitychange', scrollIfVisible);\r\n\r\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\r\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (!hidden) {\r\n            scrollToCurrentSubtitle();\r\n        }\r\n    }, [hidden, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (hiddenRef.current) {\r\n            return;\r\n        }\r\n\r\n        const subtitleRefs = subtitleRefsRef.current;\r\n\r\n        if (!subtitleRefs || subtitleRefs.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const firstSubtitleRef = subtitleRefs[0];\r\n        firstSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [lastJumpToTopTimestamp]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, clock, subtitles, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                if (forward) {\r\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\r\n                } else {\r\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [clock, length, disableKeyEvents, onSeek]);\r\n\r\n    useEffect(() => {\r\n        function handleScroll() {\r\n            lastScrollTimestampRef.current = Date.now();\r\n        }\r\n\r\n        const table = containerRef.current;\r\n        table?.addEventListener('wheel', handleScroll);\r\n\r\n        return () => table?.removeEventListener('wheel', handleScroll);\r\n    }, [containerRef, lastScrollTimestampRef]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        if (!jumpToSubtitle || !subtitles) {\r\n            return;\r\n        }\r\n\r\n        let jumpToIndex = -1;\r\n        let i = 0;\r\n\r\n        for (let s of subtitles) {\r\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\r\n                jumpToIndex = i;\r\n                break;\r\n            }\r\n\r\n            ++i;\r\n        }\r\n\r\n        if (jumpToIndex !== -1) {\r\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\r\n                block: 'center',\r\n                inline: 'nearest',\r\n                behavior: 'smooth',\r\n            });\r\n        }\r\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\r\n\r\n    const calculateSurroundingSubtitlesForIndex = useCallback(\r\n        (index: number) => {\r\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\r\n                return [];\r\n            }\r\n\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    const calculateSurroundingSubtitles = useCallback(() => {\r\n        if (!selectedSubtitleIndexesRef.current) {\r\n            return [];\r\n        }\r\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\r\n        return calculateSurroundingSubtitlesForIndex(index);\r\n    }, [calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\r\n            },\r\n            () => disableKeyEventsRef.current ?? false,\r\n            () => {\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                const index = Math.min(...subtitleIndexes);\r\n                return subtitles[index];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [subtitles, calculateSurroundingSubtitles, onCopy]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onToggleSubtitleTrack(track);\r\n            },\r\n            () => {},\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [disableKeyEvents, onToggleSubtitleTrack]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(\r\n                        subtitles[index],\r\n                        calculateSurroundingSubtitlesForIndex(index),\r\n                        PostMineAction.showAnkiDialog,\r\n                        true\r\n                    );\r\n                }\r\n            },\r\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindUpdateLastCard(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(\r\n                        subtitles[index],\r\n                        calculateSurroundingSubtitlesForIndex(index),\r\n                        PostMineAction.updateLastCard,\r\n                        true\r\n                    );\r\n                }\r\n            },\r\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    const handleClick = useCallback(\r\n        (index: number) => {\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\r\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\r\n        },\r\n        [subtitles, onSeek]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\r\n        },\r\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\r\n    );\r\n\r\n    let subtitleTable = null;\r\n\r\n    if (!subtitles || subtitles.length === 0) {\r\n        if (!loading && displayHelp) {\r\n            subtitleTable = !loading && displayHelp && (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\r\n                </div>\r\n            );\r\n        } else if (subtitles && subtitles.length === 0) {\r\n            subtitleTable = (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">No subtitles</Typography>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        subtitleTable = (\r\n            <TableContainer className={classes.table}>\r\n                <Table>\r\n                    <TableBody>\r\n                        {subtitles.map((s: SubtitleModel, index: number) => {\r\n                            const selected = index in selectedSubtitleIndexes;\r\n\r\n                            return (\r\n                                <SubtitleRow\r\n                                    key={index}\r\n                                    index={index}\r\n                                    compressed={compressed}\r\n                                    selected={selected}\r\n                                    disabled={disabledSubtitleTracks[s.track]}\r\n                                    subtitle={subtitles[index]}\r\n                                    subtitleRef={subtitleRefs[index]}\r\n                                    onClickSubtitle={handleClick}\r\n                                    onCopySubtitle={handleCopy}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\r\n            {subtitleTable}\r\n        </Paper>\r\n    );\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AnkiSettings,\r\n    AnkiSettingsToVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeFromVideoMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    ImageModel,\r\n    MiscSettings,\r\n    MiscSettingsToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    PlayMode,\r\n    PlayModeMessage,\r\n    PostMineAction,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitleSettings,\r\n    SubtitleSettingsToVideoMessage,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\nimport { VideoProtocol } from './VideoProtocol';\r\n\r\nexport default class VideoChannel {\r\n    private readonly protocol: VideoProtocol;\r\n    private time: number;\r\n    private isReady: boolean;\r\n    private readyCallbacks: ((paused: boolean) => void)[];\r\n    private playCallbacks: ((echo: boolean) => void)[];\r\n    private pauseCallbacks: ((echo: boolean) => void)[];\r\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\r\n    private exitCallbacks: (() => void)[];\r\n    private offsetCallbacks: ((offset: number) => void)[];\r\n    private popOutToggleCallbacks: (() => void)[];\r\n    private copyCallbacks: ((\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        postMineAction: PostMineAction,\r\n        fromVideo: boolean,\r\n        preventDuplicate: boolean,\r\n        id: string | undefined\r\n    ) => void)[];\r\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\r\n    private appBarToggleCallbacks: (() => void)[];\r\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\r\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\r\n\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null = null;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    duration: number;\r\n\r\n    constructor(protocol: VideoProtocol) {\r\n        this.protocol = protocol;\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.isReady = false;\r\n        this.readyState = 0;\r\n        this.selectedAudioTrack = undefined;\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.protocol.onMessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyFromVideoMessage;\r\n\r\n                    that.duration = readyMessage.duration;\r\n                    that.isReady = true;\r\n                    that.audioTracks = readyMessage.audioTracks;\r\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\r\n                    that.readyState = 4;\r\n                    that.time = readyMessage.currentTime;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.paused);\r\n                    }\r\n                    break;\r\n                case 'readyState':\r\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\r\n\r\n                    that.readyState = readyStateMessage.value;\r\n                    if (that.readyState === 4) {\r\n                        that.oncanplay?.(new Event('canplay'));\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    const playMessage = event.data as PlayFromVideoMessage;\r\n\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback(playMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    const pauseMessage = event.data as PauseFromVideoMessage;\r\n\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback(pauseMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'exit':\r\n                    for (let callback of that.exitCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'offset':\r\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\r\n\r\n                    for (let callback of that.offsetCallbacks) {\r\n                        callback(offsetMessage.value);\r\n                    }\r\n                    break;\r\n                case 'popOutToggle':\r\n                    for (let callback of that.popOutToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'copy':\r\n                    for (let callback of that.copyCallbacks) {\r\n                        const copyMessage = event.data as CopyMessage;\r\n\r\n                        callback(\r\n                            copyMessage.subtitle,\r\n                            copyMessage.surroundingSubtitles,\r\n                            copyMessage.audio,\r\n                            copyMessage.image,\r\n                            copyMessage.url,\r\n                            copyMessage.postMineAction ?? PostMineAction.none,\r\n                            true,\r\n                            copyMessage.preventDuplicate ?? false,\r\n                            copyMessage.id\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'playMode':\r\n                    for (let callback of that.playModeCallbacks) {\r\n                        const playModeMessage = event.data as PlayModeMessage;\r\n                        callback(playModeMessage.playMode);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'sync':\r\n                    // ignore\r\n                    break;\r\n                case 'syncv2':\r\n                    // ignore\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\r\n\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback(ankiDialogRequestMessage.forwardToVideo);\r\n                    }\r\n                    break;\r\n                case 'toggleSubtitleTrackInList':\r\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\r\n\r\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\r\n                        callback(toggleSubtitleTrackInListMessage.track);\r\n                    }\r\n                    break;\r\n                case 'playbackRate':\r\n                    // ignore for now\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.readyState = 3;\r\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    onReady(callback: (paused: boolean) => void) {\r\n        if (this.isReady) {\r\n            callback(false);\r\n        }\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlay(callback: (echo: boolean) => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: (echo: boolean) => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onExit(callback: () => void) {\r\n        this.exitCallbacks.push(callback);\r\n    }\r\n\r\n    onOffset(callback: (offset: number) => void) {\r\n        this.offsetCallbacks.push(callback);\r\n    }\r\n\r\n    onPopOutToggle(callback: () => void) {\r\n        this.popOutToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onCopy(\r\n        callback: (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            postMineAction: PostMineAction,\r\n            fromVideo: boolean,\r\n            preventDuplicate: boolean,\r\n            id: string | undefined\r\n        ) => void\r\n    ) {\r\n        this.copyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlayMode(callback: (playMode: PlayMode) => void) {\r\n        this.playModeCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: () => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: () => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\r\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\r\n    }\r\n\r\n    ready(duration: number) {\r\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    init() {\r\n        this.protocol.postMessage({ command: 'init' });\r\n    }\r\n\r\n    // Return a promise to implement the analogous HTMLMediaElement method\r\n    play(): Promise<void> {\r\n        this.protocol.postMessage({ command: 'play' });\r\n        return new Promise((resolve, reject) => resolve());\r\n    }\r\n\r\n    pause() {\r\n        this.protocol.postMessage({ command: 'pause' });\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\r\n        this.protocol.postMessage({\r\n            command: 'subtitles',\r\n            value: subtitles,\r\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\r\n            names: subtitleFileNames,\r\n        } as SubtitlesToVideoMessage);\r\n    }\r\n\r\n    subtitleSettings(settings: SubtitleSettings) {\r\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    playMode(playMode: PlayMode) {\r\n        const message: PlayModeMessage = {\r\n            command: 'playMode',\r\n            playMode: playMode,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    hideSubtitlePlayerToggle(hidden: boolean) {\r\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\r\n            command: 'hideSubtitlePlayerToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    appBarToggle(hidden: boolean) {\r\n        const message: AppBarToggleMessageToVideoMessage = {\r\n            command: 'appBarToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiDialogRequest() {\r\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\r\n    }\r\n\r\n    finishedAnkiDialogRequest(resume: boolean) {\r\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\r\n            command: 'finishedAnkiDialogRequest',\r\n            resume: resume,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiSettings(settings: AnkiSettings) {\r\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    miscSettings(settings: MiscSettings) {\r\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.protocol.postMessage({ command: 'close' });\r\n        this.protocol.close();\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n    }\r\n}\r\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AutoPausePreference,\r\n    ImageModel,\r\n    KeyBindings,\r\n    mockSurroundingSubtitles,\r\n    PlayMode,\r\n    PostMineAction,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n} from '@project/common';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\r\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\r\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\r\nimport VideoChannel from '../services/VideoChannel';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>({\r\n    root: ({ appBarHidden }) => ({\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n    }),\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    videoFrame: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 0,\r\n        display: 'block',\r\n    },\r\n});\r\n\r\nfunction trackLength(\r\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\r\n    videoRef: MutableRefObject<MediaElement | undefined>,\r\n    subtitles: SubtitleModel[] | undefined,\r\n    useOffset?: boolean\r\n) {\r\n    let subtitlesLength;\r\n    if (subtitles && subtitles.length > 0) {\r\n        if (useOffset) {\r\n            subtitlesLength = subtitles[subtitles.length - 1].end;\r\n        } else {\r\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\r\n        }\r\n    } else {\r\n        subtitlesLength = 0;\r\n    }\r\n\r\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\r\n\r\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\r\n\r\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\r\n}\r\n\r\nexport interface MediaSources {\r\n    subtitleFiles: File[];\r\n    audioFile?: File;\r\n    audioFileUrl?: string;\r\n    videoFile?: File;\r\n    videoFileUrl?: string;\r\n}\r\n\r\nexport interface AnkiDialogFinishedRequest {\r\n    resume: boolean;\r\n    timestamp: number;\r\n}\r\n\r\ninterface PlayerProps {\r\n    sources: MediaSources;\r\n    subtitleReader: SubtitleReader;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    extension: ChromeExtension;\r\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    videoPopOut: boolean;\r\n    tab?: VideoTabModel;\r\n    availableTabs: VideoTabModel[];\r\n    ankiDialogRequestToVideo?: number;\r\n    ankiDialogRequested: boolean;\r\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\r\n    onError: (error: string) => void;\r\n    onUnloadAudio: (url: string) => void;\r\n    onUnloadVideo: (url: string) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audioFile: File | undefined,\r\n        videoFile: File | undefined,\r\n        subtitleFile: File | undefined,\r\n        mediaTimestamp: number | undefined,\r\n        audioTrack: string | undefined,\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        postMineAction: PostMineAction | undefined,\r\n        fromVideo: boolean | undefined,\r\n        preventDuplicate: boolean | undefined,\r\n        id: string | undefined\r\n    ) => void;\r\n    onLoaded: () => void;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\r\n    onAppBarToggle: () => void;\r\n    onVideoPopOut: () => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n    disableKeyEvents: boolean;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    rewindSubtitle?: SubtitleModel;\r\n}\r\n\r\nexport default function Player({\r\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\r\n    subtitleReader,\r\n    settingsProvider,\r\n    extension,\r\n    videoFrameRef,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    videoPopOut,\r\n    tab,\r\n    availableTabs,\r\n    ankiDialogRequestToVideo,\r\n    ankiDialogRequested,\r\n    ankiDialogFinishedRequest,\r\n    onError,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onCopy,\r\n    onLoaded,\r\n    onTabSelected,\r\n    onAnkiDialogRequest,\r\n    onAppBarToggle,\r\n    onVideoPopOut,\r\n    onAutoPauseModeChangedViaBind,\r\n    disableKeyEvents,\r\n    jumpToSubtitle,\r\n    rewindSubtitle,\r\n}: PlayerProps) {\r\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\r\n    const subtitlesRef = useRef<SubtitleModel[]>();\r\n    subtitlesRef.current = subtitles;\r\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [, updateState] = useState<any>();\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [channelId, setChannelId] = useState<string>();\r\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\r\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\r\n    const hideSubtitlePlayerRef = useRef<boolean>();\r\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\r\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\r\n    const playModeRef = useRef<PlayMode>();\r\n    playModeRef.current = playMode;\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const audioRef = useRef<HTMLAudioElement>(null);\r\n    const videoRef = useRef<MediaElement>();\r\n    const mediaAdapter = useMemo(() => {\r\n        if (audioFileUrl) {\r\n            return new MediaAdapter(audioRef);\r\n        } else if (videoFileUrl || tab) {\r\n            return new MediaAdapter(videoRef);\r\n        }\r\n\r\n        return new MediaAdapter({ current: null });\r\n    }, [audioFileUrl, videoFileUrl, tab]);\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const classes = useStyles({ appBarHidden });\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\r\n\r\n    const seek = useCallback(\r\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\r\n            clock.setTime(time);\r\n            forceUpdate();\r\n\r\n            if (forwardToMedia) {\r\n                await mediaAdapter.seek(time / 1000);\r\n            }\r\n        },\r\n        [forceUpdate, mediaAdapter]\r\n    );\r\n\r\n    const applyOffset = useCallback(\r\n        (offset: number, forwardToVideo: boolean) => {\r\n            setOffset(offset);\r\n\r\n            setSubtitles((subtitles) => {\r\n                if (!subtitles) {\r\n                    return;\r\n                }\r\n\r\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\r\n\r\n                const newSubtitles = subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\r\n                    track: s.track,\r\n                }));\r\n\r\n                if (forwardToVideo) {\r\n                    if (videoRef.current instanceof VideoChannel) {\r\n                        videoRef.current.subtitles(\r\n                            newSubtitles,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return newSubtitles;\r\n            });\r\n        },\r\n        [subtitleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let channel: VideoChannel | undefined = undefined;\r\n        let channelClosed = false;\r\n\r\n        async function init() {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.close();\r\n            }\r\n            videoRef.current = undefined;\r\n            clock.setTime(0);\r\n            clock.stop();\r\n            setOffset(0);\r\n            setPlaying(false);\r\n            setAudioTracks(undefined);\r\n            setSelectedAudioTrack(undefined);\r\n            setPlayMode(PlayMode.normal);\r\n\r\n            if (audioRef.current) {\r\n                audioRef.current.currentTime = 0;\r\n                audioRef.current.pause();\r\n            }\r\n\r\n            let subtitles: DisplaySubtitleModel[] | undefined;\r\n\r\n            if (subtitleFiles.length > 0) {\r\n                setLoadingSubtitles(true);\r\n\r\n                try {\r\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\r\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\r\n                    subtitles = nodes.map((s) => ({\r\n                        text: s.text,\r\n                        textImage: s.textImage,\r\n                        start: s.start,\r\n                        originalStart: s.start,\r\n                        end: s.end,\r\n                        originalEnd: s.end,\r\n                        displayTime: timeDurationDisplay(s.start, length),\r\n                        track: s.track,\r\n                    }));\r\n\r\n                    setSubtitles(subtitles);\r\n                    setLastJumpToTopTimestamp(Date.now());\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        onError(e.message);\r\n                    } else {\r\n                        onError(String(e));\r\n                    }\r\n                } finally {\r\n                    setLoadingSubtitles(false);\r\n                }\r\n            } else {\r\n                subtitles = undefined;\r\n            }\r\n\r\n            if (audioFileUrl) {\r\n                await mediaAdapter.onReady();\r\n                forceUpdate();\r\n            } else if (videoFileUrl || tab) {\r\n                if (channelClosed) {\r\n                    return;\r\n                }\r\n\r\n                if (videoFileUrl) {\r\n                    const channelId = uuidv4();\r\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\r\n                    setChannelId(channelId);\r\n                } else if (tab) {\r\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\r\n                    channel.init();\r\n                } else {\r\n                    // Not possible\r\n                    // But throw error so typescript recognizes channel as defined\r\n                    throw new Error('Unreachable code');\r\n                }\r\n\r\n                videoRef.current = channel;\r\n                let subscribed = false;\r\n\r\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\r\n                channel.onPopOutToggle(() => onVideoPopOut());\r\n                channel.onHideSubtitlePlayerToggle(() => {\r\n                    setHideSubtitlePlayer((hidden) => {\r\n                        channel?.hideSubtitlePlayerToggle(!hidden);\r\n                        return !hidden;\r\n                    });\r\n                });\r\n                channel.onAppBarToggle(() => {\r\n                    onAppBarToggle();\r\n                });\r\n                channel.onReady((paused) => {\r\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\r\n                    channel?.ready(lengthRef.current);\r\n\r\n                    if (subtitlesRef.current) {\r\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\r\n                        channel?.subtitles(\r\n                            subtitlesRef.current,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n\r\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\r\n                    channel?.miscSettings(settingsProvider.miscSettings);\r\n                    channel?.playMode(playModeRef.current!);\r\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\r\n\r\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\r\n                        setAudioTracks(channel?.audioTracks);\r\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\r\n                    } else {\r\n                        setAudioTracks(undefined);\r\n                        setSelectedAudioTrack(undefined);\r\n                    }\r\n\r\n                    if (videoRef.current) {\r\n                        clock.setTime(videoRef.current.currentTime * 1000);\r\n                    }\r\n\r\n                    if (paused) {\r\n                        clock.stop();\r\n                    } else {\r\n                        clock.start();\r\n                    }\r\n\r\n                    setPlaying(!paused);\r\n\r\n                    if (!subscribed) {\r\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\r\n                        channel?.onCopy(\r\n                            (\r\n                                subtitle,\r\n                                surroundingSubtitles,\r\n                                audio,\r\n                                image,\r\n                                url,\r\n                                postMineAction,\r\n                                fromVideo,\r\n                                preventDuplicate,\r\n                                id\r\n                            ) =>\r\n                                onCopy(\r\n                                    subtitle,\r\n                                    surroundingSubtitles,\r\n                                    audioFile,\r\n                                    videoFile,\r\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\r\n                                    clock.time(lengthRef.current),\r\n                                    channel?.selectedAudioTrack,\r\n                                    audio,\r\n                                    image,\r\n                                    url,\r\n                                    postMineAction,\r\n                                    fromVideo,\r\n                                    preventDuplicate,\r\n                                    id\r\n                                )\r\n                        );\r\n                        channel?.onPlayMode((playMode) => {\r\n                            setPlayMode(playMode);\r\n                            channel?.playMode(playMode);\r\n                        });\r\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await seek(currentTime * 1000, clock, forwardToMedia);\r\n\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n                        });\r\n                        channel?.onAudioTrackSelected(async (id) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await mediaAdapter.onReady();\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n\r\n                            setSelectedAudioTrack(id);\r\n                        });\r\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\r\n                        channel?.onToggleSubtitleTrackInList((track) =>\r\n                            setDisabledSubtitleTracks((tracks) => {\r\n                                const newTracks = { ...tracks };\r\n                                newTracks[track] = !tracks[track];\r\n                                return newTracks;\r\n                            })\r\n                        );\r\n\r\n                        subscribed = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        init().then(() => onLoaded());\r\n\r\n        return () => {\r\n            channel?.close();\r\n            channelClosed = true;\r\n        };\r\n    }, [\r\n        subtitleReader,\r\n        extension,\r\n        settingsProvider,\r\n        clock,\r\n        mediaAdapter,\r\n        seek,\r\n        onLoaded,\r\n        onError,\r\n        onUnloadVideo,\r\n        onCopy,\r\n        onAnkiDialogRequest,\r\n        onAppBarToggle,\r\n        onVideoPopOut,\r\n        subtitleFiles,\r\n        audioFile,\r\n        audioFileUrl,\r\n        videoFile,\r\n        videoFileUrl,\r\n        tab,\r\n        forceUpdate,\r\n        videoFrameRef,\r\n        applyOffset,\r\n    ]);\r\n\r\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(true);\r\n        clock.start();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.play();\r\n        }\r\n    }\r\n\r\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(false);\r\n        clock.stop();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.pause();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.ankiDialogRequest();\r\n        }\r\n    }, [ankiDialogRequestToVideo]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\r\n            }\r\n\r\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\r\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequested && playingRef.current) {\r\n            pause(clock, mediaAdapter, true);\r\n            setResumeOnFinishedAnkiDialogRequest(true);\r\n        }\r\n    }, [ankiDialogRequested, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (playMode !== PlayMode.condensed) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let seeking = false;\r\n        let expectedSeekTime = 1000;\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n\r\n            if (!length) {\r\n                return;\r\n            }\r\n\r\n            const progress = clock.progress(length);\r\n\r\n            let currentOrNextIndex = 0;\r\n            let currentIndex = -1;\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        currentIndex = i;\r\n                        currentOrNextIndex = i;\r\n                    } else {\r\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (currentIndex !== currentOrNextIndex) {\r\n                const nextSubtitle = subtitles[currentOrNextIndex];\r\n\r\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\r\n                    return;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.stop();\r\n                }\r\n\r\n                if (!seeking) {\r\n                    seeking = true;\r\n                    const t0 = Date.now();\r\n                    await seek(nextSubtitle.start, clock, true);\r\n                    expectedSeekTime = Date.now() - t0;\r\n                    seeking = false;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.start();\r\n                }\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [subtitles, playMode, clock, seek]);\r\n\r\n    const handleOnStartedShowingSubtitle = useCallback(() => {\r\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atStart) {\r\n            return;\r\n        }\r\n\r\n        pause(clock, mediaAdapter, true);\r\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\r\n\r\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\r\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atEnd) {\r\n            return;\r\n        }\r\n\r\n        pause(clock, mediaAdapter, true);\r\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\r\n\r\n    useEffect(() => {\r\n        if (videoPopOut && channelId && videoFileUrl) {\r\n            window.open(\r\n                process.env.PUBLIC_URL +\r\n                    '/?video=' +\r\n                    encodeURIComponent(videoFileUrl) +\r\n                    '&channel=' +\r\n                    channelId +\r\n                    '&popout=true',\r\n                'asbplayer-video-' + videoFileUrl,\r\n                'resizable,width=800,height=450'\r\n            );\r\n        }\r\n\r\n        setLastJumpToTopTimestamp(Date.now());\r\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\r\n\r\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handleSeek = useCallback(\r\n        async (progress: number) => {\r\n            if (!lengthRef.current) {\r\n                return;\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(progress * lengthRef.current, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                clock.start();\r\n            }\r\n        },\r\n        [clock, seek]\r\n    );\r\n\r\n    const handleSeekToSubtitle = useCallback(\r\n        async (time: number, shouldPlay: boolean) => {\r\n            if (!shouldPlay) {\r\n                pause(clock, mediaAdapter, true);\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(time, clock, true);\r\n\r\n            if (shouldPlay && !playingRef.current) {\r\n                // play method will start the clock again\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, seek, mediaAdapter]\r\n    );\r\n\r\n    const handleCopyFromSubtitlePlayer = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            postMineAction: PostMineAction,\r\n            preventDuplicate: boolean\r\n        ) => {\r\n            onCopy(\r\n                subtitle,\r\n                surroundingSubtitles,\r\n                audioFile,\r\n                videoFile,\r\n                subtitleFiles[subtitle.track],\r\n                clock.time(lengthRef.current),\r\n                selectedAudioTrack,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                postMineAction,\r\n                false,\r\n                preventDuplicate,\r\n                undefined\r\n            );\r\n        },\r\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\r\n    );\r\n\r\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        mousePositionRef.current.x = e.screenX;\r\n        mousePositionRef.current.y = e.screenY;\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        async (id: string) => {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.audioTrackSelected(id);\r\n            }\r\n\r\n            pause(clock, mediaAdapter, true);\r\n\r\n            await seek(0, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, mediaAdapter, seek]\r\n    );\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\r\n        },\r\n        [applyOffset]\r\n    );\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (audioRef.current instanceof HTMLMediaElement) {\r\n            audioRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\r\n\r\n    const handleToggleSubtitleTrack = useCallback(\r\n        (track: number) =>\r\n            setDisabledSubtitleTracks((tracks) => {\r\n                const newTracks = { ...tracks };\r\n                newTracks[track] = !tracks[track];\r\n                return newTracks;\r\n            }),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (tab) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n            const progress = clock.progress(length);\r\n\r\n            if (progress >= 1) {\r\n                pause(clock, mediaAdapter, true);\r\n                await seek(0, clock, true);\r\n                setLastJumpToTopTimestamp(Date.now());\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    pause(clock, mediaAdapter, true);\r\n                } else {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, clock, mediaAdapter, disableKeyEvents]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAutoPause(\r\n            (event) => {\r\n                if (tab) {\r\n                    return;\r\n                }\r\n\r\n                event.preventDefault();\r\n                const newPlayMode = playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\r\n                setPlayMode(newPlayMode);\r\n                onAutoPauseModeChangedViaBind(newPlayMode);\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n    }, [disableKeyEvents, settingsProvider, playMode, tab, onAutoPauseModeChangedViaBind]);\r\n\r\n    useEffect(() => {\r\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\r\n            const unbindCopy = KeyBindings.bindCopy(\r\n                (event, subtitle) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        clock.time(lengthRef.current),\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => disableKeyEvents,\r\n                () => {\r\n                    if (!lengthRef.current) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                }\r\n            );\r\n\r\n            const unbindAnkiExport = KeyBindings.bindAnkiExport(\r\n                (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        timestamp,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        PostMineAction.showAnkiDialog,\r\n                        false,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => false\r\n            );\r\n\r\n            return () => {\r\n                unbindCopy();\r\n                unbindAnkiExport();\r\n            };\r\n        }\r\n    }, [audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\r\n\r\n    useEffect(() => {\r\n        if (videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.appBarToggle(appBarHidden);\r\n        }\r\n    }, [appBarHidden]);\r\n\r\n    useEffect(() => {\r\n        if (!rewindSubtitle) {\r\n            return;\r\n        }\r\n\r\n        if (playingRef.current) {\r\n            clock.stop();\r\n        }\r\n\r\n        handleSeekToSubtitle(rewindSubtitle.start, false);\r\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\r\n\r\n    const length = lengthRef.current;\r\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\r\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\r\n\r\n    return (\r\n        <div onMouseMove={handleMouseMove} className={classes.root}>\r\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\r\n                {videoInWindow && (\r\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\r\n                        <iframe\r\n                            ref={videoFrameRef}\r\n                            className={classes.videoFrame}\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                '/?video=' +\r\n                                encodeURIComponent(videoFileUrl!) +\r\n                                '&channel=' +\r\n                                channelId +\r\n                                '&popout=false'\r\n                            }\r\n                            title=\"asbplayer\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\r\n                    <Grid\r\n                        item\r\n                        style={{\r\n                            flexGrow: videoInWindow ? 0 : 1,\r\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\r\n                        }}\r\n                    >\r\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\r\n                            <Controls\r\n                                mousePositionRef={mousePositionRef}\r\n                                playing={playing}\r\n                                clock={clock}\r\n                                length={length}\r\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\r\n                                audioTracks={audioTracks}\r\n                                selectedAudioTrack={selectedAudioTrack}\r\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\r\n                                selectedTab={tab}\r\n                                audioFile={audioFile?.name}\r\n                                videoFile={videoFile?.name}\r\n                                offsetEnabled={true}\r\n                                offset={offset}\r\n                                volumeEnabled={Boolean(audioFileUrl)}\r\n                                playModeEnabled={Boolean(videoFileUrl || audioFileUrl)}\r\n                                playMode={playMode}\r\n                                onPlay={handlePlay}\r\n                                onPause={handlePause}\r\n                                onSeek={handleSeek}\r\n                                onAudioTrackSelected={handleAudioTrackSelected}\r\n                                onTabSelected={onTabSelected}\r\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\r\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\r\n                                onOffsetChange={handleOffsetChange}\r\n                                onVolumeChange={handleVolumeChange}\r\n                                onPlayMode={handlePlayMode}\r\n                                disableKeyEvents={disableKeyEvents}\r\n                                settingsProvider={settingsProvider}\r\n                                showOnMouseMovement={true}\r\n                            />\r\n                        )}\r\n                        <SubtitlePlayer\r\n                            playing={playing}\r\n                            subtitles={subtitles}\r\n                            clock={clock}\r\n                            length={length}\r\n                            jumpToSubtitle={jumpToSubtitle}\r\n                            drawerOpen={drawerOpen}\r\n                            appBarHidden={appBarHidden}\r\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\r\n                            loading={loadingSubtitles}\r\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\r\n                            disableKeyEvents={disableKeyEvents}\r\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\r\n                            hidden={videoInWindow && hideSubtitlePlayer}\r\n                            disabledSubtitleTracks={disabledSubtitleTracks}\r\n                            onSeek={handleSeekToSubtitle}\r\n                            onCopy={handleCopyFromSubtitlePlayer}\r\n                            onOffsetChange={handleOffsetChange}\r\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\r\n                            onStartedShowing={handleOnStartedShowingSubtitle}\r\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\r\n                            settingsProvider={settingsProvider}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <audio ref={audioRef} src={audioFileUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onProceed: (fieldName: string) => void;\r\n    onCancel: () => void;\r\n    existingCustomFieldNames: string[];\r\n}\r\n\r\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\r\n    const [fieldName, setFieldName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setFieldName('');\r\n    }, [open]);\r\n\r\n    const fieldExists = [\r\n        ...existingCustomFieldNames,\r\n        'Sentence',\r\n        'Word',\r\n        'Definition',\r\n        'Source',\r\n        'Image',\r\n        'Audio',\r\n    ].includes(fieldName);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            disableEnforceFocus\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={onCancel}\r\n        >\r\n            <DialogTitle>New Custom Field</DialogTitle>\r\n            <DialogContent>\r\n                <form>\r\n                    <TextField\r\n                        error={fieldExists}\r\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label=\"Field Name\"\r\n                        value={fieldName}\r\n                        color=\"secondary\"\r\n                        onChange={(e) => setFieldName(e.target.value)}\r\n                    />\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onCancel()}>Cancel</Button>\r\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\r\n                    Create\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { computeStyles } from '../services/Util';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CustomFieldDialog from './CustomFieldDialog';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { Anki, AsbplayerSettings, AutoPausePreference } from '@project/common';\r\nimport { TagsTextField } from '@project/common/components';\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitleSetting: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitlePreview: {\r\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\r\n        backgroundSize: '20px 20px',\r\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        maxWidth: '100%',\r\n        padding: 10,\r\n    },\r\n    subtitlePreviewInput: {\r\n        border: 'none',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(0,0,0,0)',\r\n        '&:focus': {\r\n            outline: 'none',\r\n        },\r\n    },\r\n    addFieldButton: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'end',\r\n        alignItems: 'flex-end',\r\n    },\r\n}));\r\n\r\ninterface SelectableSettingProps {\r\n    label: string;\r\n    value: string;\r\n    selections?: string[];\r\n    removable?: boolean;\r\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\r\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\r\n    onRemoval?: () => void;\r\n}\r\n\r\nfunction SelectableSetting({\r\n    label,\r\n    value,\r\n    selections,\r\n    removable,\r\n    onChange,\r\n    onSelectionChange,\r\n    onRemoval,\r\n}: SelectableSettingProps) {\r\n    const classes = useSelectableSettingStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                label={label}\r\n                value={value}\r\n                onChange={onChange}\r\n                fullWidth\r\n                color=\"secondary\"\r\n                InputProps={{\r\n                    endAdornment: removable && (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton onClick={(e) => onRemoval?.()}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel></InputLabel>\r\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\r\n                    {selections &&\r\n                        selections.map((s) => (\r\n                            <MenuItem key={s} value={s}>\r\n                                {s}\r\n                            </MenuItem>\r\n                        ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    anki: Anki;\r\n    open: boolean;\r\n    settings: AsbplayerSettings;\r\n    onClose: (settings: AsbplayerSettings) => void;\r\n}\r\n\r\nexport default function SettingsDialog({ anki, open, settings, onClose }: Props) {\r\n    const classes = useStyles();\r\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\r\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\r\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\r\n    const [deck, setDeck] = useState<string>(settings.deck || '');\r\n    const [deckNames, setDeckNames] = useState<string[]>();\r\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\r\n    const [modelNames, setModelNames] = useState<string[]>();\r\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\r\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\r\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\r\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\r\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\r\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\r\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\r\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\r\n    const [tags, setTags] = useState<string[]>(settings.tags);\r\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\r\n    const [fieldNames, setFieldNames] = useState<string[]>();\r\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\r\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\r\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\r\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\r\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\r\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\r\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\r\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\r\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\r\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\r\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\r\n        settings.subtitleBackgroundOpacity\r\n    );\r\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\r\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\r\n        settings.imageBasedSubtitleScaleFactor\r\n    );\r\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\r\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\r\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\r\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\r\n\r\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setAnkiConnectUrl(e.target.value);\r\n        setAnkiConnectUrlChangeTimestamp(Date.now());\r\n    }, []);\r\n\r\n    const handleRetryAnkiConnectUrl = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\r\n        []\r\n    );\r\n    const handleDeckChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\r\n        []\r\n    );\r\n    const handleDeckSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\r\n        []\r\n    );\r\n    const handleNoteTypeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\r\n        []\r\n    );\r\n    const handleNoteTypeSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSentenceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSentenceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleDefinitionFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\r\n        []\r\n    );\r\n    const handleDefinitionFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\r\n        []\r\n    );\r\n    const handleAudioFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleImageFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\r\n        []\r\n    );\r\n    const handleImageFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleWordFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\r\n        []\r\n    );\r\n    const handleWordFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSourceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSourceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleUrlFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\r\n        []\r\n    );\r\n    const handleUrlFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioPaddingStart = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAudioPaddingEnd = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageWidth = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageHeight = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleSizeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineThicknessChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundOpacityChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleFontFamilyChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitlePreviewChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\r\n        []\r\n    );\r\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAddCustomField = useCallback((customFieldName: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = '';\r\n            return newCustomFields;\r\n        });\r\n        setCustomFieldDialogOpen(false);\r\n    }, []);\r\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = value;\r\n            return newCustomFields;\r\n        });\r\n    }, []);\r\n    const handleCustomFieldRemoval = useCallback(\r\n        (customFieldName: string) =>\r\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n                const newCustomFields: { [key: string]: string } = {};\r\n                Object.assign(newCustomFields, oldCustomFields);\r\n                delete newCustomFields[customFieldName];\r\n                return newCustomFields;\r\n            }),\r\n        []\r\n    );\r\n    const handleTagsChange = useCallback((newTags: string[]) => {\r\n        setTags(newTags);\r\n    }, []);\r\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\r\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\r\n            throw new Error(`Invalid theme type ${e.target.value}`);\r\n        }\r\n\r\n        setThemeType(e.target.value);\r\n    }, []);\r\n    const handleCopyToClipboardOnMine = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\r\n        []\r\n    );\r\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\r\n    }, []);\r\n    const subtitlePreviewStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleColor: subtitleColor,\r\n                subtitleSize: subtitleSize,\r\n                subtitleOutlineThickness: subtitleOutlineThickness,\r\n                subtitleOutlineColor: subtitleOutlineColor,\r\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\r\n                subtitleBackgroundColor: subtitleBackgroundColor,\r\n                subtitleFontFamily: subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleColor,\r\n            subtitleSize,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleBackgroundColor,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let canceled = false;\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                await anki.requestPermission(ankiConnectUrl);\r\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\r\n                setModelNames(await anki.modelNames(ankiConnectUrl));\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setDeckNames(undefined);\r\n                setModelNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            canceled = true;\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\r\n\r\n    useEffect(() => {\r\n        if (!noteType || ankiConnectUrlError) {\r\n            return undefined;\r\n        }\r\n\r\n        let canceled = false;\r\n\r\n        async function refreshFieldNames() {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setFieldNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }\r\n\r\n        refreshFieldNames();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        };\r\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        onClose({\r\n            ankiConnectUrl: ankiConnectUrl,\r\n            deck: deck,\r\n            noteType: noteType,\r\n            sentenceField: sentenceField,\r\n            definitionField: definitionField,\r\n            audioField: audioField,\r\n            imageField: imageField,\r\n            wordField: wordField,\r\n            sourceField: sourceField,\r\n            urlField: urlField,\r\n            tags: tags.filter((t) => t !== ''),\r\n            subtitleSize: Number(subtitleSize),\r\n            subtitleColor: subtitleColor,\r\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\r\n            subtitleOutlineColor: subtitleOutlineColor,\r\n            subtitleBackgroundColor: subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\r\n            subtitleFontFamily: subtitleFontFamily,\r\n            subtitlePreview: subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\r\n            customAnkiFields: customFields,\r\n            preferMp3: preferMp3,\r\n            themeType: themeType,\r\n            audioPaddingStart: audioPaddingStart,\r\n            audioPaddingEnd: audioPaddingEnd,\r\n            maxImageWidth: maxImageWidth,\r\n            maxImageHeight: maxImageHeight,\r\n            surroundingSubtitlesCountRadius: settings.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: settings.surroundingSubtitlesTimeRadius,\r\n            volume: settings.volume,\r\n            theaterMode: settings.theaterMode,\r\n            copyToClipboardOnMine: copyToClipboardOnMine,\r\n            autoPausePreference: autoPausePreference,\r\n        });\r\n    }, [\r\n        onClose,\r\n        ankiConnectUrl,\r\n        deck,\r\n        noteType,\r\n        sentenceField,\r\n        definitionField,\r\n        audioField,\r\n        imageField,\r\n        wordField,\r\n        sourceField,\r\n        urlField,\r\n        customFields,\r\n        tags,\r\n        preferMp3,\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        subtitlePreview,\r\n        imageBasedSubtitleScaleFactor,\r\n        themeType,\r\n        audioPaddingStart,\r\n        audioPaddingEnd,\r\n        maxImageWidth,\r\n        maxImageHeight,\r\n        settings.surroundingSubtitlesCountRadius,\r\n        settings.surroundingSubtitlesTimeRadius,\r\n        settings.volume,\r\n        settings.theaterMode,\r\n        copyToClipboardOnMine,\r\n        autoPausePreference,\r\n    ]);\r\n\r\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\r\n        return (\r\n            <SelectableSetting\r\n                key={customFieldName}\r\n                label={`${customFieldName} Field`}\r\n                value={customFields[customFieldName]}\r\n                selections={fieldNames!}\r\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\r\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\r\n                removable={true}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CustomFieldDialog\r\n                open={customFieldDialogOpen}\r\n                existingCustomFieldNames={Object.keys(customFields)}\r\n                onProceed={handleAddCustomField}\r\n                onCancel={() => setCustomFieldDialogOpen(false)}\r\n            />\r\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\r\n                <DialogTitle>Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"column\" spacing={3}>\r\n                        <Grid item>\r\n                            <FormLabel>Anki</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <TextField\r\n                                    label=\"Anki Connect URL\"\r\n                                    value={ankiConnectUrl}\r\n                                    error={Boolean(ankiConnectUrlError)}\r\n                                    helperText={ankiConnectUrlError}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAnkiConnectUrlChange}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <FormHelperText>\r\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\r\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\r\n                                    <Link\r\n                                        color=\"secondary\"\r\n                                        target=\"_blank\"\r\n                                        rel=\"noreferrer\"\r\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                                    >\r\n                                        video\r\n                                    </Link>\r\n                                    .\r\n                                </FormHelperText>\r\n                                <SelectableSetting\r\n                                    label=\"Deck\"\r\n                                    value={deck}\r\n                                    selections={deckNames}\r\n                                    onChange={handleDeckChange}\r\n                                    onSelectionChange={handleDeckSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Note Type\"\r\n                                    value={noteType}\r\n                                    selections={modelNames}\r\n                                    onChange={handleNoteTypeChange}\r\n                                    onSelectionChange={handleNoteTypeSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Sentence Field\"\r\n                                    value={sentenceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSentenceFieldChange}\r\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Definition Field\"\r\n                                    value={definitionField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleDefinitionFieldChange}\r\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Word Field\"\r\n                                    value={wordField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleWordFieldChange}\r\n                                    onSelectionChange={handleWordFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Audio Field\"\r\n                                    value={audioField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleAudioFieldChange}\r\n                                    onSelectionChange={handleAudioFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Image Field\"\r\n                                    value={imageField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleImageFieldChange}\r\n                                    onSelectionChange={handleImageFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Source Field\"\r\n                                    value={sourceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSourceFieldChange}\r\n                                    onSelectionChange={handleSourceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"URL Field\"\r\n                                    value={urlField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleUrlFieldChange}\r\n                                    onSelectionChange={handleUrlFieldSelectionChange}\r\n                                />\r\n                                {customFieldInputs}\r\n                                <Button\r\n                                    className={classes.addFieldButton}\r\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\r\n                                >\r\n                                    Add Custom Field\r\n                                </Button>\r\n                                <TagsTextField\r\n                                    label=\"Tags\"\r\n                                    helperText=\"Comma-separated list of strings\"\r\n                                    fullWidth\r\n                                    color=\"secondary\"\r\n                                    tags={tags}\r\n                                    onTagsChange={handleTagsChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Mining</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\r\n                                    label=\"Re-encode audio as mp3 (slower)\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={copyToClipboardOnMine}\r\n                                            onChange={handleCopyToClipboardOnMine}\r\n                                        />\r\n                                    }\r\n                                    label=\"Copy mined subtitles to clipboard\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding Start\"\r\n                                    fullWidth\r\n                                    value={audioPaddingStart}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingStart}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding End\"\r\n                                    fullWidth\r\n                                    value={audioPaddingEnd}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingEnd}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Width\"\r\n                                    fullWidth\r\n                                    value={maxImageWidth}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageWidth}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Height\"\r\n                                    fullWidth\r\n                                    value={maxImageHeight}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageHeight}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Auto-pause Preference</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\r\n                                            value={AutoPausePreference.atStart}\r\n                                            onChange={handleAutoPausePreferenceChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"At Subtitle Start\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\r\n                                            value={AutoPausePreference.atEnd}\r\n                                            onChange={handleAutoPausePreferenceChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"At Subtitle End\"\r\n                                />\r\n                                <FormHelperText>\r\n                                    Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\r\n                                    enabled.\r\n                                </FormHelperText>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\r\n                            <FormGroup>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Color\"\r\n                                        fullWidth\r\n                                        value={subtitleColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Size\"\r\n                                        fullWidth\r\n                                        value={subtitleSize}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleSizeChange}\r\n                                        inputProps={{\r\n                                            min: 1,\r\n                                            step: 1,\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Outline Color\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleOutlineColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Outline Thickness\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineThickness}\r\n                                        onChange={handleSubtitleOutlineThicknessChange}\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            step: 1,\r\n                                        }}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Background Color\"\r\n                                        fullWidth\r\n                                        value={subtitleBackgroundColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Background Opacity\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={subtitleBackgroundOpacity}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundOpacityChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        label=\"Subtitle Font Family\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        value={subtitleFontFamily}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleFontFamilyChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Image-based Subtitle Scale Factor\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={imageBasedSubtitleScaleFactor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitlePreview}>\r\n                                    <input\r\n                                        value={subtitlePreview}\r\n                                        className={classes.subtitlePreviewInput}\r\n                                        onChange={handleSubtitlePreviewChange}\r\n                                        style={subtitlePreviewStyles}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Theme</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'light'}\r\n                                            value=\"light\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Light\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'dark'}\r\n                                            value=\"dark\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Dark\"\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { AsbplayerSettings, AsbplayerSettingsProvider, AutoPausePreference } from '@project/common';\r\n\r\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\r\nconst defaultSubtitleSize = 36;\r\nconst defaultSubtitleColor = '#ffffff';\r\nconst defaultSubtitleOutlineThickness = 0;\r\nconst defaultSubtitleOutlineColor = '#000000';\r\nconst defaultSubtitleBackgroundColor = '#000000';\r\nconst defaultSubtitleBackgroundOpacity = 0.5;\r\nconst defaultSubtitleFontFamily = '';\r\nconst defaultSubtitlePreview = 'アあ安';\r\nconst defaultVolume = 100;\r\nconst defaultAudioPaddingStart = 0;\r\nconst defaultAudioPaddingEnd = 500;\r\nconst defaultMaxImageWidth = 0;\r\nconst defaultMaxImageHeight = 0;\r\nconst defaultSurroundingSubtitlesCountRadius = 1;\r\nconst defaultSurroundingSubtitlesTimeRadius = 5000;\r\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\r\n\r\nconst ankiConnectUrlKey = 'ankiConnectUrl';\r\nconst deckKey = 'deck';\r\nconst noteTypeKey = 'noteType';\r\nconst sentenceFieldKey = 'sentenceField';\r\nconst definitionFieldKey = 'definitionField';\r\nconst audioFieldKey = 'audioField';\r\nconst imageFieldKey = 'imageField';\r\nconst wordFieldKey = 'wordField';\r\nconst sourceFieldKey = 'sourceField';\r\nconst urlFieldKey = 'urlField';\r\nconst customAnkiFieldsKey = 'customAnkiFields';\r\nconst tagsKey = 'tags';\r\nconst subtitleSizeKey = 'subtitleSize';\r\nconst subtitleColorKey = 'subtitleColor';\r\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\r\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\r\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\r\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\r\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\r\nconst subtitlePreviewKey = 'subtitlePreview';\r\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\r\nconst audioPaddingStartKey = 'audioPaddingStart';\r\nconst audioPaddingEndKey = 'audioPaddingEnd';\r\nconst maxImageWidthKey = 'maxImageWidth';\r\nconst maxImageHeightKey = 'maxImageHeight';\r\nconst volumeKey = 'volume';\r\nconst theaterModeKey = 'theaterMode';\r\nconst preferMp3Key = 'preferMp3';\r\nconst themeTypeKey = 'themeType';\r\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\r\nconst autoPausePreferenceKey = 'autoPausePreference';\r\n\r\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\r\n    private _tags?: string[];\r\n\r\n    constructor() {\r\n        // Cache tags so that it can be used in useEffect dependencies\r\n        this._tags = this.tags;\r\n    }\r\n\r\n    get settings(): AsbplayerSettings {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            sourceField: this.sourceField,\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            subtitlePreview: this.subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n            preferMp3: this.preferMp3,\r\n            themeType: this.themeType,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n            volume: this.volume,\r\n            theaterMode: this.theaterMode,\r\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\r\n            autoPausePreference: this.autoPausePreference,\r\n        };\r\n    }\r\n\r\n    set settings(newSettings: AsbplayerSettings) {\r\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\r\n        this.deck = newSettings.deck;\r\n        this.noteType = newSettings.noteType;\r\n        this.sentenceField = newSettings.sentenceField;\r\n        this.definitionField = newSettings.definitionField;\r\n        this.audioField = newSettings.audioField;\r\n        this.imageField = newSettings.imageField;\r\n        this.wordField = newSettings.wordField;\r\n        this.sourceField = newSettings.sourceField;\r\n        this.urlField = newSettings.urlField;\r\n        this.tags = newSettings.tags;\r\n        this.subtitleSize = newSettings.subtitleSize;\r\n        this.subtitleColor = newSettings.subtitleColor;\r\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\r\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\r\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\r\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\r\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\r\n        this.subtitlePreview = newSettings.subtitlePreview;\r\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\r\n        this.customAnkiFields = newSettings.customAnkiFields;\r\n        this.preferMp3 = newSettings.preferMp3;\r\n        this.themeType = newSettings.themeType;\r\n        this.audioPaddingStart = newSettings.audioPaddingStart;\r\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\r\n        this.maxImageWidth = newSettings.maxImageWidth;\r\n        this.maxImageHeight = newSettings.maxImageHeight;\r\n        this.volume = newSettings.volume;\r\n        this.theaterMode = newSettings.theaterMode;\r\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\r\n        this.autoPausePreference = newSettings.autoPausePreference;\r\n    }\r\n\r\n    get subtitleSettings() {\r\n        return {\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n        };\r\n    }\r\n\r\n    get ankiSettings() {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            sourceField: this.sourceField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            preferMp3: this.preferMp3,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n        };\r\n    }\r\n\r\n    get miscSettings() {\r\n        return {\r\n            themeType: this.themeType,\r\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\r\n            autoPausePreference: this.autoPausePreference,\r\n        };\r\n    }\r\n\r\n    _getNumberItem(key: string, defaultValue: number) {\r\n        const value = localStorage.getItem(key);\r\n\r\n        if (value === null) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    _setOptionalItem(key: string, value?: string) {\r\n        if (typeof value === 'undefined') {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n\r\n    get ankiConnectUrl() {\r\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\r\n    }\r\n\r\n    set ankiConnectUrl(url) {\r\n        localStorage.setItem(ankiConnectUrlKey, url);\r\n    }\r\n\r\n    get deck() {\r\n        return localStorage.getItem(deckKey) ?? undefined;\r\n    }\r\n\r\n    set deck(deck) {\r\n        this._setOptionalItem(deckKey, deck);\r\n    }\r\n\r\n    get noteType() {\r\n        return localStorage.getItem(noteTypeKey) ?? undefined;\r\n    }\r\n\r\n    set noteType(noteType) {\r\n        this._setOptionalItem(noteTypeKey, noteType);\r\n    }\r\n\r\n    get sentenceField() {\r\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sentenceField(sentenceField) {\r\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\r\n    }\r\n\r\n    get definitionField() {\r\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\r\n    }\r\n\r\n    set definitionField(definitionField) {\r\n        this._setOptionalItem(definitionFieldKey, definitionField);\r\n    }\r\n\r\n    get audioField() {\r\n        return localStorage.getItem(audioFieldKey) ?? undefined;\r\n    }\r\n\r\n    set audioField(audioField) {\r\n        this._setOptionalItem(audioFieldKey, audioField);\r\n    }\r\n\r\n    get imageField() {\r\n        return localStorage.getItem(imageFieldKey) ?? undefined;\r\n    }\r\n\r\n    set imageField(imageField) {\r\n        this._setOptionalItem(imageFieldKey, imageField);\r\n    }\r\n\r\n    get wordField() {\r\n        return localStorage.getItem(wordFieldKey) ?? undefined;\r\n    }\r\n\r\n    set wordField(wordField) {\r\n        this._setOptionalItem(wordFieldKey, wordField);\r\n    }\r\n\r\n    get sourceField() {\r\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sourceField(sourceField) {\r\n        this._setOptionalItem(sourceFieldKey, sourceField);\r\n    }\r\n\r\n    get urlField() {\r\n        return localStorage.getItem(urlFieldKey) ?? undefined;\r\n    }\r\n\r\n    set urlField(urlField) {\r\n        this._setOptionalItem(urlFieldKey, urlField);\r\n    }\r\n\r\n    get customAnkiFields() {\r\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\r\n\r\n        if (ankiFieldsString) {\r\n            return JSON.parse(ankiFieldsString);\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    set customAnkiFields(customAnkiFields) {\r\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\r\n    }\r\n\r\n    get tags() {\r\n        if (typeof this._tags !== 'undefined') {\r\n            return this._tags;\r\n        }\r\n\r\n        const tagsString = localStorage.getItem(tagsKey);\r\n\r\n        if (tagsString) {\r\n            this._tags = JSON.parse(tagsString) as string[];\r\n            return this._tags;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    set tags(tags) {\r\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\r\n        this._tags = undefined;\r\n    }\r\n\r\n    get subtitleColor() {\r\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\r\n    }\r\n\r\n    set subtitleColor(subtitleColor) {\r\n        localStorage.setItem(subtitleColorKey, subtitleColor);\r\n    }\r\n\r\n    get subtitleSize() {\r\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\r\n    }\r\n\r\n    set subtitleSize(subtitleSize) {\r\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\r\n    }\r\n\r\n    get subtitleOutlineColor() {\r\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\r\n    }\r\n\r\n    set subtitleOutlineColor(subtitleOutlineColor) {\r\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\r\n    }\r\n\r\n    get subtitleOutlineThickness() {\r\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\r\n    }\r\n\r\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\r\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\r\n    }\r\n\r\n    get subtitleBackgroundColor() {\r\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\r\n    }\r\n\r\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\r\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\r\n    }\r\n\r\n    get subtitleBackgroundOpacity() {\r\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\r\n    }\r\n\r\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\r\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\r\n    }\r\n\r\n    get subtitleFontFamily() {\r\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\r\n    }\r\n\r\n    set subtitleFontFamily(subtitleFontFamily) {\r\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\r\n    }\r\n\r\n    get subtitlePreview() {\r\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\r\n    }\r\n\r\n    set subtitlePreview(subtitlePreview) {\r\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\r\n    }\r\n\r\n    get imageBasedSubtitleScaleFactor() {\r\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\r\n    }\r\n\r\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\r\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\r\n    }\r\n\r\n    get volume() {\r\n        return this._getNumberItem(volumeKey, defaultVolume);\r\n    }\r\n\r\n    set volume(volume) {\r\n        localStorage.setItem(volumeKey, String(volume));\r\n    }\r\n\r\n    get theaterMode() {\r\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\r\n    }\r\n\r\n    set theaterMode(theaterMode) {\r\n        localStorage.setItem(theaterModeKey, String(theaterMode));\r\n    }\r\n\r\n    get preferMp3() {\r\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\r\n    }\r\n\r\n    set preferMp3(preferMp3) {\r\n        localStorage.setItem(preferMp3Key, String(preferMp3));\r\n    }\r\n\r\n    get themeType() {\r\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\r\n\r\n        if (themeType === null) {\r\n            return 'dark';\r\n        }\r\n\r\n        return themeType;\r\n    }\r\n\r\n    set themeType(themeType: 'dark' | 'light') {\r\n        localStorage.setItem(themeTypeKey, themeType);\r\n    }\r\n\r\n    get audioPaddingStart() {\r\n        const value = localStorage.getItem(audioPaddingStartKey);\r\n\r\n        if (!value) {\r\n            return defaultAudioPaddingStart;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set audioPaddingStart(audioPaddingStart) {\r\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\r\n    }\r\n\r\n    get audioPaddingEnd() {\r\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\r\n    }\r\n\r\n    set audioPaddingEnd(audioPaddingEnd) {\r\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\r\n    }\r\n\r\n    get maxImageWidth() {\r\n        const value = localStorage.getItem(maxImageWidthKey);\r\n\r\n        if (!value) {\r\n            return defaultMaxImageWidth;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set maxImageWidth(maxImageWidth) {\r\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\r\n    }\r\n\r\n    get maxImageHeight() {\r\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\r\n    }\r\n\r\n    set maxImageHeight(maxImageHeight) {\r\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\r\n    }\r\n\r\n    get surroundingSubtitlesCountRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesCountRadius;\r\n    }\r\n\r\n    get surroundingSubtitlesTimeRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesTimeRadius;\r\n    }\r\n\r\n    get copyToClipboardOnMine() {\r\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\r\n    }\r\n\r\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\r\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\r\n    }\r\n\r\n    get autoPausePreference() {\r\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\r\n    }\r\n\r\n    set autoPausePreference(autoPausePreference) {\r\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\r\n    }\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    PlayMode,\r\n    PlayModeMessage,\r\n    PostMineAction,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\n\r\nexport default class PlayerChannel {\r\n    private channel?: BroadcastChannel;\r\n    private time: number;\r\n    private duration: number;\r\n    private readyCallbacks: ((duration: number) => void)[];\r\n    private playCallbacks: (() => void)[];\r\n    private pauseCallbacks: (() => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\r\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\r\n    private closeCallbacks: (() => void)[];\r\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\r\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private ankiDialogRequestCallbacks: (() => void)[];\r\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\r\n\r\n    constructor(channel: string) {\r\n        this.channel = new BroadcastChannel(channel);\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.closeCallbacks = [];\r\n        this.readyCallbacks = [];\r\n        this.subtitlesCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.finishedAnkiDialogRequestCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.channel.onmessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'init':\r\n                    // ignore, this is for the chrome extension\r\n                    break;\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyToVideoMessage;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.duration);\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'close':\r\n                    for (let callback of that.closeCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'subtitles':\r\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\r\n\r\n                    for (let callback of that.subtitlesCallbacks) {\r\n                        callback(subtitlesMessage.value);\r\n                    }\r\n                    break;\r\n                case 'subtitleSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'playMode':\r\n                    const playModeMessage = event.data as PlayModeMessage;\r\n\r\n                    for (let callback of that.playModeCallbacks) {\r\n                        callback(playModeMessage.playMode);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\r\n\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback(hideSubtitlePlayerToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\r\n\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback(appBarToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'finishedAnkiDialogRequest':\r\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\r\n\r\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\r\n                        callback(finishedAnkiDialogRequestMessage.resume);\r\n                    }\r\n                    break;\r\n                case 'ankiSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'miscSettings':\r\n                    // ignore\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\r\n    }\r\n\r\n    onPlay(callback: () => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: () => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onClose(callback: () => void) {\r\n        this.closeCallbacks.push(callback);\r\n    }\r\n\r\n    onReady(callback: (duration: number) => void) {\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\r\n        this.subtitlesCallbacks.push(callback);\r\n    }\r\n\r\n    onPlayMode(callback: (playMode: PlayMode) => void) {\r\n        this.playModeCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: (hidden: boolean) => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: () => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\r\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    ready(\r\n        duration: number,\r\n        paused: boolean,\r\n        audioTracks: AudioTrackModel[] | undefined,\r\n        selectedAudioTrack: string | undefined\r\n    ) {\r\n        const message: ReadyFromVideoMessage = {\r\n            command: 'ready',\r\n            duration: duration,\r\n            paused: paused,\r\n            currentTime: 0,\r\n            audioTracks: audioTracks,\r\n            selectedAudioTrack: selectedAudioTrack,\r\n            playbackRate: 1,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    readyState(readyState: number) {\r\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    play() {\r\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    pause() {\r\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    offset(offset: number) {\r\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    popOutToggle() {\r\n        this.channel?.postMessage({ command: 'popOutToggle' });\r\n    }\r\n\r\n    copy(\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        postMineAction: PostMineAction,\r\n        preventDuplicate?: boolean\r\n    ) {\r\n        const message: CopyMessage = {\r\n            command: 'copy',\r\n            subtitle: subtitle,\r\n            surroundingSubtitles: surroundingSubtitles,\r\n            preventDuplicate: preventDuplicate,\r\n            postMineAction: postMineAction,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    playMode(playMode: PlayMode) {\r\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\r\n    }\r\n\r\n    hideSubtitlePlayerToggle() {\r\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\r\n    }\r\n\r\n    appBarToggle() {\r\n        this.channel?.postMessage({ command: 'appBarToggle' });\r\n    }\r\n\r\n    ankiDialogRequest(forwardToVideo: boolean) {\r\n        const message: AnkiDialogRequestFromVideoMessage = {\r\n            command: 'ankiDialogRequest',\r\n            forwardToVideo: forwardToVideo,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    toggleSubtitleTrackInList(track: number) {\r\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\r\n            command: 'toggleSubtitleTrackInList',\r\n            track: track,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        if (this.channel) {\r\n            this.channel.postMessage({ command: 'exit' });\r\n            this.channel.close();\r\n            this.channel = undefined;\r\n            this.playCallbacks = [];\r\n            this.pauseCallbacks = [];\r\n            this.currentTimeCallbacks = [];\r\n            this.audioTrackSelectedCallbacks = [];\r\n            this.closeCallbacks = [];\r\n            this.readyCallbacks = [];\r\n            this.subtitlesCallbacks = [];\r\n            this.playModeCallbacks = [];\r\n            this.hideSubtitlePlayerToggleCallbacks = [];\r\n            this.appBarToggleCallbacks = [];\r\n            this.ankiDialogRequestCallbacks = [];\r\n            this.finishedAnkiDialogRequestCallbacks = [];\r\n        }\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { arrayEquals, computeStyles } from '../services/Util';\r\nimport {\r\n    KeyBindings,\r\n    surroundingSubtitles,\r\n    mockSurroundingSubtitles,\r\n    humanReadableTime,\r\n    SubtitleModel,\r\n    AudioTrackModel,\r\n    PostMineAction,\r\n    PlayMode,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport Alert from './Alert';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport PlayerChannel from '../services/PlayerChannel';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\n\r\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\r\n    readonly audioTracks: any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        backgroundColor: 'black',\r\n        height: '100vh',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    video: {\r\n        margin: 'auto',\r\n    },\r\n    cursorHidden: {\r\n        cursor: 'none',\r\n    },\r\n    subtitleContainer: {\r\n        position: 'absolute',\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        bottom: 100,\r\n        textAlign: 'center',\r\n        whiteSpace: 'pre-wrap',\r\n        lineHeight: 'normal',\r\n    },\r\n});\r\n\r\nfunction notifyReady(\r\n    element: ExperimentalHTMLVideoElement,\r\n    playerChannel: PlayerChannel,\r\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\r\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\r\n) {\r\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\r\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\r\n\r\n        window.resizeTo(\r\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\r\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\r\n        );\r\n    }\r\n\r\n    let tracks: AudioTrackModel[] | undefined;\r\n    let selectedTrack: string | undefined;\r\n\r\n    if (element.audioTracks) {\r\n        tracks = [];\r\n\r\n        for (let t of element.audioTracks) {\r\n            tracks.push({\r\n                id: t.id,\r\n                label: t.label,\r\n                language: t.language,\r\n            });\r\n\r\n            if (t.enabled) {\r\n                selectedTrack = t.id;\r\n            }\r\n        }\r\n    } else {\r\n        tracks = undefined;\r\n        selectedTrack = undefined;\r\n    }\r\n\r\n    setAudioTracks(tracks);\r\n    setSelectedAudioTrack(selectedTrack);\r\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\r\n}\r\n\r\nfunction errorMessage(element: HTMLVideoElement) {\r\n    let error;\r\n    switch (element.error?.code) {\r\n        case 1:\r\n            error = 'Aborted';\r\n            break;\r\n        case 2:\r\n            error = 'Network error';\r\n            break;\r\n        case 3:\r\n            error = 'Decoding error';\r\n            break;\r\n        case 4:\r\n            error = 'Source not supported';\r\n            break;\r\n        default:\r\n            error = 'Unknown error';\r\n            break;\r\n    }\r\n\r\n    return error + ': ' + (element.error?.message || '<details missing>');\r\n}\r\n\r\nfunction useFullscreen() {\r\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\r\n\r\n    useEffect(() => {\r\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\r\n        document.addEventListener('fullscreenchange', listener);\r\n\r\n        return () => document.removeEventListener('fullscreenchange', listener);\r\n    }, []);\r\n\r\n    return fullscreen;\r\n}\r\n\r\ninterface Props {\r\n    settingsProvider: SettingsProvider;\r\n    videoFile: string;\r\n    channel: string;\r\n    popOut: boolean;\r\n    onError: (error: string) => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n}\r\n\r\ninterface IndexedSubtitleModel extends SubtitleModel {\r\n    index: number;\r\n}\r\n\r\nexport default function VideoPlayer(props: Props) {\r\n    const classes = useStyles();\r\n    const { settingsProvider, videoFile, channel, popOut, onError, onAutoPauseModeChangedViaBind } = props;\r\n    const poppingInRef = useRef<boolean>();\r\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\r\n    const [windowWidth, windowHeight] = useWindowSize(true);\r\n    if (videoRef.current) {\r\n        videoRef.current.width = windowWidth;\r\n        videoRef.current.height = windowHeight;\r\n    }\r\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const fullscreen = useFullscreen();\r\n    const fullscreenRef = useRef<boolean>();\r\n    fullscreenRef.current = fullscreen;\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [length, setLength] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\r\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\r\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\r\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\r\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(settingsProvider.theaterMode);\r\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\r\n    showSubtitlesRef.current = showSubtitles;\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const [showCursor, setShowCursor] = useState<boolean>(false);\r\n    const lastMouseMovementTimestamp = useRef<number>(0);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\r\n        useState<boolean>(false);\r\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\r\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\r\n\r\n    const videoRefCallback = useCallback(\r\n        (element: HTMLVideoElement) => {\r\n            if (element) {\r\n                const videoElement = element as ExperimentalHTMLVideoElement;\r\n                videoRef.current = videoElement;\r\n\r\n                if (videoElement.readyState === 4) {\r\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                } else {\r\n                    videoElement.onloadeddata = (event) => {\r\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                    };\r\n                }\r\n\r\n                videoElement.oncanplay = (event) => {\r\n                    playerChannel.readyState(4);\r\n\r\n                    if (playingRef.current) {\r\n                        clock.start();\r\n                    }\r\n                };\r\n\r\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\r\n\r\n                videoElement.onerror = (event) => onError(errorMessage(element));\r\n            }\r\n        },\r\n        [clock, playerChannel, onError]\r\n    );\r\n\r\n    function selectAudioTrack(id: string) {\r\n        const audioTracks = videoRef.current?.audioTracks;\r\n\r\n        if (!audioTracks) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        for (const t of audioTracks) {\r\n            if (t.id === id) {\r\n                t.enabled = true;\r\n            } else {\r\n                t.enabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        playerChannel.onReady((duration) => setLength(duration));\r\n\r\n        playerChannel.onPlay(async () => {\r\n            await videoRef.current?.play();\r\n            clock.start();\r\n            setPlaying(true);\r\n        });\r\n\r\n        playerChannel.onPause(() => {\r\n            videoRef.current?.pause();\r\n            clock.stop();\r\n            setPlaying(false);\r\n        });\r\n\r\n        playerChannel.onCurrentTime((currentTime) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime = currentTime;\r\n            }\r\n\r\n            if (videoRef.current?.readyState === 4) {\r\n                playerChannel.readyState(4);\r\n            }\r\n\r\n            clock.stop();\r\n            clock.setTime(currentTime * 1000);\r\n        });\r\n\r\n        playerChannel.onAudioTrackSelected((id) => {\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.audioTrackSelected(id);\r\n        });\r\n\r\n        playerChannel.onClose(() => {\r\n            playerChannel.close();\r\n            window.close();\r\n        });\r\n\r\n        playerChannel.onSubtitles((subtitles) => {\r\n            setSubtitles(subtitles);\r\n\r\n            if (subtitles && subtitles.length > 0) {\r\n                const s = subtitles[0];\r\n                const offset = s.start - s.originalStart;\r\n                setOffset(offset);\r\n            }\r\n        });\r\n\r\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\r\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\r\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\r\n        playerChannel.onAnkiDialogRequest(() => {\r\n            if (fullscreenRef.current && !popOut) {\r\n                document.exitFullscreen();\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\r\n            }\r\n        });\r\n\r\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\r\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\r\n                if (resume) {\r\n                    try {\r\n                        await containerRef.current?.requestFullscreen();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\r\n            }\r\n        });\r\n\r\n        window.onbeforeunload = (e) => {\r\n            if (!poppingInRef.current) {\r\n                playerChannel.close();\r\n            }\r\n        };\r\n\r\n        return () => playerChannel.close();\r\n    }, [clock, playerChannel, popOut]);\r\n\r\n    const handlePlay = useCallback(() => {\r\n        if (videoRef.current) {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel]);\r\n\r\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            const time = progress * length;\r\n            playerChannel.currentTime = time / 1000;\r\n        },\r\n        [length, clock, playerChannel]\r\n    );\r\n\r\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\r\n        lastMouseMovementTimestamp.current = Date.now();\r\n\r\n        if (!containerRef.current) {\r\n            return;\r\n        }\r\n\r\n        var bounds = containerRef.current.getBoundingClientRect();\r\n        mousePositionRef.current.x = e.clientX - bounds.left;\r\n        mousePositionRef.current.y = e.clientY - bounds.top;\r\n    }\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n                playerChannel.pause();\r\n            }\r\n\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.currentTime = 0;\r\n            playerChannel.audioTrackSelected(id);\r\n        },\r\n        [playerChannel, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            const now = clock.time(length);\r\n            let showSubtitles = [];\r\n\r\n            for (let i = 0; i < subtitles.length; ++i) {\r\n                const s = subtitles[i];\r\n\r\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\r\n                    showSubtitles.push({ ...s, index: i });\r\n                }\r\n\r\n                if (now < s.start) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\r\n\r\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\r\n                setShowSubtitles(showSubtitles);\r\n            }\r\n        }, 50);\r\n\r\n        return () => clearTimeout(interval);\r\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            setOffset(offset);\r\n            setSubtitles((subtitles) =>\r\n                subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    track: s.track,\r\n                }))\r\n            );\r\n            playerChannel.offset(offset);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                const timestamp = clock.time(length);\r\n\r\n                if (forward) {\r\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\r\n                } else {\r\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\r\n                }\r\n            },\r\n            () => !videoRef.current\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, length, clock]);\r\n\r\n    const calculateSurroundingSubtitles = useCallback(\r\n        (index: number) => {\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy<IndexedSubtitleModel>(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                const noSubtitles = !subtitles || subtitles.length === 0;\r\n\r\n                playerChannel.copy(\r\n                    subtitle,\r\n                    noSubtitles\r\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\r\n                        : calculateSurroundingSubtitles(subtitle.index),\r\n                    PostMineAction.none\r\n                );\r\n\r\n                if (fullscreen) {\r\n                    setAlert(\r\n                        subtitle.text === ''\r\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\r\n                            : `Copied: \"${subtitle.text}\"`\r\n                    );\r\n                    setAlertOpen(true);\r\n                }\r\n            },\r\n            () => false,\r\n            () => {\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                        index: 0,\r\n                    };\r\n                }\r\n\r\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                return showSubtitlesRef.current[0];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitles(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setSubtitlesEnabled((enabled) => !enabled);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInVideo(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setDisabledSubtitleTracks((tracks) => {\r\n                    const newTracks = { ...tracks };\r\n                    newTracks[track] = !tracks[track];\r\n                    return newTracks;\r\n                });\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                playerChannel.toggleSubtitleTrackInList(track);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles, clock, length]);\r\n\r\n    const extractSubtitles = useCallback(\r\n        (\r\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\r\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\r\n        ) => {\r\n            if (!subtitles || subtitles.length === 0) {\r\n                const timestamp = clock.time(length);\r\n                const end = Math.min(timestamp + 5000, length);\r\n                const subtitle = {\r\n                    text: '',\r\n                    start: timestamp,\r\n                    originalStart: timestamp,\r\n                    end: end,\r\n                    originalEnd: end,\r\n                    track: 0,\r\n                };\r\n\r\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\r\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\r\n                const currentSubtitle = showSubtitlesRef.current[0];\r\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\r\n            }\r\n        },\r\n        [subtitles, calculateSurroundingSubtitles, length, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                extractSubtitles(\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\r\n                );\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, extractSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindUpdateLastCard(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                extractSubtitles(\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\r\n                );\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, extractSubtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    playerChannel.pause();\r\n                } else {\r\n                    playerChannel.play();\r\n                }\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, playerChannel]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAutoPause(\r\n            (event) => {\r\n                event.preventDefault();\r\n                const newPlayMode =\r\n                    playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\r\n                playerChannel.playMode(newPlayMode);\r\n                onAutoPauseModeChangedViaBind(newPlayMode);\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, playMode, onAutoPauseModeChangedViaBind]);\r\n\r\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\r\n\r\n    const handleFullscreenToggle = useCallback(() => {\r\n        if (fullscreen) {\r\n            document.exitFullscreen();\r\n        } else {\r\n            containerRef.current?.requestFullscreen();\r\n        }\r\n    }, [fullscreen]);\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePopOutToggle = useCallback(() => {\r\n        playerChannel.popOutToggle();\r\n        if (popOut) {\r\n            poppingInRef.current = true;\r\n            window.close();\r\n        }\r\n    }, [playerChannel, popOut]);\r\n\r\n    const handlePlayMode = useCallback(\r\n        (playMode: PlayMode) => {\r\n            playerChannel.playMode(playMode);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    const handleClose = useCallback(() => {\r\n        playerChannel.close();\r\n        window.close();\r\n    }, [playerChannel]);\r\n\r\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\r\n        playerChannel.hideSubtitlePlayerToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleTheaterModeToggle = useCallback(() => {\r\n        playerChannel.appBarToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (playing) {\r\n            playerChannel.pause();\r\n        } else {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel, playing]);\r\n\r\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\r\n\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const {\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        imageBasedSubtitleScaleFactor,\r\n    } = settingsProvider.subtitleSettings;\r\n    const subtitleStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleSize,\r\n                subtitleColor,\r\n                subtitleOutlineThickness,\r\n                subtitleOutlineColor,\r\n                subtitleBackgroundColor,\r\n                subtitleBackgroundOpacity,\r\n                subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleSize,\r\n            subtitleColor,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\r\n                if (showCursor) {\r\n                    setShowCursor(false);\r\n                }\r\n            } else if (!showCursor) {\r\n                setShowCursor(true);\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [showCursor]);\r\n\r\n    return (\r\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\r\n            <video\r\n                preload=\"auto\"\r\n                controls={false}\r\n                onClick={handleClick}\r\n                onDoubleClick={handleDoubleClick}\r\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\r\n                ref={videoRefCallback}\r\n                src={videoFile}\r\n            />\r\n            {subtitlesEnabled && (\r\n                <div className={classes.subtitleContainer}>\r\n                    {showSubtitles.map((subtitle, index) => {\r\n                        let content;\r\n\r\n                        if (subtitle.textImage) {\r\n                            content = (\r\n                                <SubtitleTextImage\r\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\r\n                                    subtitle={subtitle}\r\n                                    scale={imageBasedSubtitleScaleFactor}\r\n                                />\r\n                            );\r\n                        } else {\r\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\r\n                        }\r\n\r\n                        if (index < showSubtitles.length - 1) {\r\n                            return (\r\n                                <React.Fragment key={subtitle.index}>\r\n                                    {content}\r\n                                    <br />\r\n                                </React.Fragment>\r\n                            );\r\n                        }\r\n\r\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\r\n                    })}\r\n                </div>\r\n            )}\r\n            {fullscreen && (\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\r\n                    {alert}\r\n                </Alert>\r\n            )}\r\n            <Controls\r\n                mousePositionRef={mousePositionRef}\r\n                playing={playing}\r\n                clock={clock}\r\n                length={length}\r\n                audioTracks={audioTracks}\r\n                selectedAudioTrack={selectedAudioTrack}\r\n                subtitlesToggle={subtitles && subtitles.length > 0}\r\n                subtitlesEnabled={subtitlesEnabled}\r\n                offsetEnabled={true}\r\n                offset={offset}\r\n                fullscreenEnabled={true}\r\n                fullscreen={fullscreen}\r\n                closeEnabled={!popOut}\r\n                popOut={popOut}\r\n                volumeEnabled={true}\r\n                popOutEnabled={!isMobile}\r\n                playModeEnabled={true}\r\n                playMode={playMode}\r\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\r\n                subtitlePlayerHidden={subtitlePlayerHidden}\r\n                onPlay={handlePlay}\r\n                onPause={handlePause}\r\n                onSeek={handleSeek}\r\n                onAudioTrackSelected={handleAudioTrackSelected}\r\n                onSubtitlesToggle={handleSubtitlesToggle}\r\n                onFullscreenToggle={handleFullscreenToggle}\r\n                onVolumeChange={handleVolumeChange}\r\n                onOffsetChange={handleOffsetChange}\r\n                onPopOutToggle={handlePopOutToggle}\r\n                onPlayMode={handlePlayMode}\r\n                onClose={handleClose}\r\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\r\n                settingsProvider={settingsProvider}\r\n                showOnMouseMovement={false}\r\n                theaterModeToggleEnabled={!popOut}\r\n                theaterModeEnabled={appBarHidden}\r\n                onTheaterModeToggle={handleTheaterModeToggle}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\r\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { red } from '@material-ui/core/colors';\r\nimport {\r\n    Anki,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiDialogSliderContext,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n    SubtitleSettingsToVideoMessage,\r\n    AnkiSettingsToVideoMessage,\r\n    MiscSettingsToVideoMessage,\r\n    LegacyPlayerSyncMessage,\r\n    PlayerSyncMessage,\r\n    AudioModel,\r\n    ImageModel,\r\n    AsbplayerSettings,\r\n    PostMineAction,\r\n    PlayMode,\r\n} from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport clsx from 'clsx';\r\nimport Alert from './Alert';\r\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DragOverlay from './DragOverlay';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\nimport Bar from './Bar';\r\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\r\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\r\nimport LandingPage from './LandingPage';\r\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\r\nimport SettingsDialog from './SettingsDialog';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport { Color } from '@material-ui/lab';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst latestExtensionVersion = '0.19.0';\r\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\r\n\r\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginRight: 0,\r\n    },\r\n    contentShift: ({ drawerWidth }) => ({\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: drawerWidth,\r\n    }),\r\n}));\r\n\r\nfunction extractSources(files: FileList | File[]): MediaSources {\r\n    let subtitleFiles = [];\r\n    let audioFile = undefined;\r\n    let videoFile = undefined;\r\n\r\n    for (let i = 0; i < files.length; ++i) {\r\n        const f = files[i];\r\n        const extensionStartIndex = f.name.lastIndexOf('.');\r\n\r\n        if (extensionStartIndex === -1) {\r\n            throw new Error('Unable to determine extension of ' + f.name);\r\n        }\r\n\r\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\r\n        switch (extension) {\r\n            case 'ass':\r\n            case 'srt':\r\n            case 'vtt':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'sup':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'mkv':\r\n            case 'mp4':\r\n            case 'avi':\r\n                if (videoFile) {\r\n                    throw new Error('Cannot open two video files simultaneously');\r\n                }\r\n                videoFile = f;\r\n                break;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'aac':\r\n            case 'flac':\r\n            case 'ogg':\r\n            case 'wav':\r\n            case 'opus':\r\n                if (audioFile) {\r\n                    throw new Error('Cannot open two audio files simultaneously');\r\n                }\r\n                audioFile = f;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported extension ' + extension);\r\n        }\r\n    }\r\n\r\n    if (videoFile && audioFile) {\r\n        throw new Error('Cannot load both an audio and video file simultaneously');\r\n    }\r\n\r\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\r\n}\r\n\r\nfunction audioClipFromItem(\r\n    item: CopyHistoryItem,\r\n    sliderContext: AnkiDialogSliderContext | undefined,\r\n    paddingStart: number,\r\n    paddingEnd: number\r\n) {\r\n    if (item.audio) {\r\n        const start = item.audio.start ?? item.start;\r\n        const end = item.audio.end ?? item.end;\r\n\r\n        return AudioClip.fromBase64(\r\n            item.subtitleFile!.name,\r\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\r\n            end + (item.audio.paddingEnd ?? 0),\r\n            item.audio.base64,\r\n            item.audio.extension\r\n        );\r\n    }\r\n\r\n    if (item.audioFile || item.videoFile) {\r\n        let start;\r\n        let end;\r\n\r\n        if (sliderContext) {\r\n            start = sliderContext.subtitleStart;\r\n            end = sliderContext.subtitleEnd;\r\n        } else {\r\n            start = item.start;\r\n            end = item.end;\r\n        }\r\n\r\n        return AudioClip.fromFile(\r\n            (item.audioFile || item.videoFile)!,\r\n            Math.max(0, start - paddingStart),\r\n            end + paddingEnd,\r\n            item.audioTrack\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\r\n    if (item.image) {\r\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\r\n    }\r\n\r\n    if (item.videoFile) {\r\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\r\n\r\n    if (!source) {\r\n        return undefined;\r\n    }\r\n\r\n    return `${source} (${humanReadableTime(item.start)})`;\r\n}\r\n\r\nfunction itemSliderContext(item: CopyHistoryItem) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        subtitleStart: item.start,\r\n        subtitleEnd: item.end,\r\n        subtitles: item.surroundingSubtitles || [\r\n            { start: item.start, end: item.end, text: item.text, track: item.track },\r\n        ],\r\n    };\r\n}\r\n\r\nfunction revokeUrls(sources: MediaSources) {\r\n    if (sources.audioFileUrl) {\r\n        URL.revokeObjectURL(sources.audioFileUrl);\r\n    }\r\n\r\n    if (sources.videoFileUrl) {\r\n        URL.revokeObjectURL(sources.videoFileUrl);\r\n    }\r\n}\r\n\r\ninterface NavigateToVideoProps {\r\n    searchParams: URLSearchParams;\r\n}\r\n\r\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')!;\r\n\r\n    return (\r\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\r\n    );\r\n}\r\n\r\ninterface RenderVideoProps {\r\n    searchParams: URLSearchParams;\r\n    settingsProvider: SettingsProvider;\r\n    onError: (error: string) => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n}\r\n\r\nfunction RenderVideo({ searchParams, settingsProvider, onError, onAutoPauseModeChangedViaBind }: RenderVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')! === 'true';\r\n\r\n    return (\r\n        <VideoPlayer\r\n            settingsProvider={settingsProvider}\r\n            videoFile={videoFile}\r\n            popOut={popOut}\r\n            channel={channel}\r\n            onError={onError}\r\n            onAutoPauseModeChangedViaBind={onAutoPauseModeChangedViaBind}\r\n        />\r\n    );\r\n}\r\n\r\ninterface ContentProps {\r\n    drawerOpen: boolean;\r\n    drawerWidth: number;\r\n    children: React.ReactNode[];\r\n}\r\n\r\nfunction Content(props: ContentProps) {\r\n    const classes = useContentStyles(props);\r\n\r\n    return (\r\n        <main\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: props.drawerOpen,\r\n            })}\r\n        >\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\r\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\r\n    const theme = useMemo<Theme>(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    primary: {\r\n                        main: '#49007a',\r\n                    },\r\n                    secondary: {\r\n                        main: '#ff1f62',\r\n                    },\r\n                    error: {\r\n                        main: red.A400,\r\n                    },\r\n                    type: settingsProvider.themeType,\r\n                },\r\n            }),\r\n        [settingsProvider.themeType]\r\n    );\r\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\r\n    const location = useLocation();\r\n    const [searchParams] = useSearchParams();\r\n\r\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\r\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(), []);\r\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\r\n    const [width] = useWindowSize(!inVideoPlayer);\r\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\r\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\r\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\r\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\r\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\r\n    copiedSubtitlesRef.current = copiedSubtitles;\r\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\r\n    const [theaterMode, setTheaterMode] = useState<boolean>(settingsProvider.theaterMode);\r\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\r\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\r\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\r\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [dragging, setDragging] = useState<boolean>(false);\r\n    const dragEnterRef = useRef<Element | null>(null);\r\n    const [fileName, setFileName] = useState<string>();\r\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\r\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\r\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\r\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\r\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\r\n        [ankiDialogItem]\r\n    );\r\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            audioClipFromItem(\r\n                ankiDialogItem,\r\n                ankiDialogItemSliderContext,\r\n                settingsProvider.audioPaddingStart,\r\n                settingsProvider.audioPaddingEnd\r\n            ),\r\n        [\r\n            ankiDialogItem,\r\n            ankiDialogItemSliderContext,\r\n            settingsProvider.audioPaddingStart,\r\n            settingsProvider.audioPaddingEnd,\r\n        ]\r\n    );\r\n    const ankiDialogImage = useMemo<Image | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\r\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\r\n    );\r\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\r\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\r\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\r\n        timestamp: 0,\r\n        resume: false,\r\n    });\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\r\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\r\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\r\n    const [image, setImage] = useState<Image>();\r\n    const [tab, setTab] = useState<VideoTabModel>();\r\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const ankiDialogRequestedRef = useRef<boolean>(false);\r\n    ankiDialogRequestedRef.current = ankiDialogRequested;\r\n    const { subtitleFiles } = sources;\r\n\r\n    const handleError = useCallback((message: string) => {\r\n        setAlertSeverity('error');\r\n        setAlert(message);\r\n        setAlertOpen(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean, ankiDialogItem?: CopyHistoryItem) => {\r\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n        setAnkiDialogRequested(true);\r\n\r\n        if (forwardToVideo) {\r\n            setAnkiDialogRequestToVideo(Date.now());\r\n        }\r\n    }, []);\r\n\r\n    const handleAnkiDialogProceed = useCallback(\r\n        async (\r\n            text: string,\r\n            definition: string,\r\n            audioClip: AudioClip | undefined,\r\n            image: Image | undefined,\r\n            word: string,\r\n            source: string,\r\n            url: string,\r\n            customFieldValues: { [key: string]: string },\r\n            tags: string[],\r\n            mode: AnkiExportMode\r\n        ) => {\r\n            setAnkiDialogDisabled(true);\r\n\r\n            try {\r\n                const result = await anki.export(\r\n                    text,\r\n                    definition,\r\n                    audioClip,\r\n                    image,\r\n                    word,\r\n                    source,\r\n                    url,\r\n                    customFieldValues,\r\n                    tags,\r\n                    mode\r\n                );\r\n\r\n                if (mode !== 'gui') {\r\n                    if (mode === 'default') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Exported card: ' + result);\r\n                        setAlertOpen(true);\r\n                    } else if (mode === 'updateLast') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Updated card: ' + result);\r\n                        setAlertOpen(true);\r\n                    }\r\n\r\n                    setAnkiDialogOpen(false);\r\n\r\n                    // We need the ref to avoid causing a state change that would re-init Player\r\n                    // It's a future task to make the Player init hook depend on less state\r\n                    if (ankiDialogRequestedRef.current) {\r\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n                        setAnkiDialogRequested(false);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            } finally {\r\n                setAnkiDialogDisabled(false);\r\n                setDisableKeyEvents(false);\r\n            }\r\n        },\r\n        [anki, handleError]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audioFile: File | undefined,\r\n            videoFile: File | undefined,\r\n            subtitleFile: File | undefined,\r\n            mediaTimestamp: number | undefined,\r\n            audioTrack: string | undefined,\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            postMineAction: PostMineAction | undefined,\r\n            fromVideo: boolean | undefined,\r\n            preventDuplicate: boolean | undefined,\r\n            id: string | undefined\r\n        ) => {\r\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\r\n                navigator.clipboard.writeText(subtitle.text);\r\n            }\r\n\r\n            const newCopiedSubtitle = {\r\n                ...subtitle,\r\n                surroundingSubtitles: surroundingSubtitles,\r\n                timestamp: Date.now(),\r\n                id: id || uuidv4(),\r\n                name: fileName!,\r\n                subtitleFile: subtitleFile,\r\n                audioFile: audioFile,\r\n                videoFile: videoFile,\r\n                mediaTimestamp: mediaTimestamp,\r\n                audioTrack: audioTrack,\r\n                audio: audio,\r\n                image: image,\r\n                url: url,\r\n            };\r\n\r\n            setCopiedSubtitles((copiedSubtitles) => {\r\n                if (preventDuplicate && copiedSubtitles.length > 0) {\r\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\r\n\r\n                    if (\r\n                        subtitle.start === last.start &&\r\n                        subtitle.end === last.end &&\r\n                        subtitle.text === last.text &&\r\n                        subtitleFile?.name === last.subtitleFile?.name\r\n                    ) {\r\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\r\n                            const newCopiedSubtitles = [...copiedSubtitles];\r\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\r\n                            return newCopiedSubtitles;\r\n                        }\r\n\r\n                        return copiedSubtitles;\r\n                    }\r\n                }\r\n\r\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\r\n                return [...copiedSubtitles, newCopiedSubtitle];\r\n            });\r\n\r\n            switch (postMineAction ?? PostMineAction.none) {\r\n                case PostMineAction.none:\r\n                    break;\r\n                case PostMineAction.showAnkiDialog:\r\n                    handleAnkiDialogRequest(fromVideo, newCopiedSubtitle);\r\n                    break;\r\n                case PostMineAction.updateLastCard:\r\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\r\n                    setAnkiDialogRequested(true);\r\n                    handleAnkiDialogProceed(\r\n                        subtitle.text,\r\n                        '',\r\n                        audioClipFromItem(\r\n                            newCopiedSubtitle,\r\n                            undefined,\r\n                            settingsProvider.audioPaddingStart,\r\n                            settingsProvider.audioPaddingEnd\r\n                        ),\r\n                        imageFromItem(\r\n                            newCopiedSubtitle,\r\n                            settingsProvider.maxImageWidth,\r\n                            settingsProvider.maxImageHeight\r\n                        ),\r\n                        '',\r\n                        itemSourceString(newCopiedSubtitle) ?? '',\r\n                        '',\r\n                        {},\r\n                        settingsProvider.tags,\r\n                        'updateLast'\r\n                    );\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown post mine action: ' + postMineAction);\r\n            }\r\n\r\n            if (subtitle) {\r\n                setAlertSeverity('success');\r\n                setAlert(\r\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\r\n                );\r\n                setAlertOpen(true);\r\n            }\r\n        },\r\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\r\n    );\r\n\r\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\r\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\r\n    const handleAppBarToggle = useCallback(() => {\r\n        settingsProvider.theaterMode = !settingsProvider.theaterMode;\r\n        setTheaterMode(settingsProvider.theaterMode);\r\n    }, [settingsProvider]);\r\n    const handleVideoPopOut = useCallback(() => {\r\n        setVideoPopOut((videoPopOut) => !videoPopOut);\r\n    }, []);\r\n    const handleOpenSettings = useCallback(() => {\r\n        setDisableKeyEvents(true);\r\n        setSettingsDialogOpen(true);\r\n    }, []);\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\r\n    const handleCloseSettings = useCallback(\r\n        (newSettings: AsbplayerSettings) => {\r\n            settingsProvider.settings = newSettings;\r\n            setSettingsDialogOpen(false);\r\n\r\n            // ATM only the Anki dialog may appear under the settings dialog,\r\n            // so it's the only one we need to check to re-enable key events\r\n            setDisableKeyEvents(ankiDialogOpen);\r\n\r\n            const subtitleSettingsMessage: SubtitleSettingsToVideoMessage = {\r\n                command: 'subtitleSettings',\r\n                value: settingsProvider.subtitleSettings,\r\n            };\r\n            const ankiSettingsMessage: AnkiSettingsToVideoMessage = {\r\n                command: 'ankiSettings',\r\n                value: settingsProvider.ankiSettings,\r\n            };\r\n            const miscSettingsMessage: MiscSettingsToVideoMessage = {\r\n                command: 'miscSettings',\r\n                value: settingsProvider.miscSettings,\r\n            };\r\n            extension.publishMessage(subtitleSettingsMessage);\r\n            extension.publishMessage(ankiSettingsMessage);\r\n            extension.publishMessage(miscSettingsMessage);\r\n        },\r\n        [extension, settingsProvider, ankiDialogOpen]\r\n    );\r\n\r\n    const handleDeleteCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            const newCopiedSubtitles = [];\r\n\r\n            for (let subtitle of copiedSubtitles) {\r\n                if (item.id !== subtitle.id) {\r\n                    newCopiedSubtitles.push(subtitle);\r\n                }\r\n            }\r\n\r\n            setCopiedSubtitles(newCopiedSubtitles);\r\n        },\r\n        [copiedSubtitles]\r\n    );\r\n\r\n    const handleUnloadAudio = useCallback(\r\n        (audioFileUrl: string) => {\r\n            if (audioFileUrl !== sources.audioFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(audioFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: previous.videoFile,\r\n                    videoFileUrl: previous.videoFileUrl,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleUnloadVideo = useCallback(\r\n        (videoFileUrl: string) => {\r\n            if (videoFileUrl !== sources.videoFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(videoFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: previous.audioFile,\r\n                    audioFileUrl: previous.audioFileUrl,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleClipAudio = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                const clip = await audioClipFromItem(\r\n                    item,\r\n                    undefined,\r\n                    settingsProvider.audioPaddingStart,\r\n                    settingsProvider.audioPaddingEnd\r\n                );\r\n\r\n                if (settingsProvider.preferMp3) {\r\n                    clip!.toMp3().download();\r\n                } else {\r\n                    clip!.download();\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleDownloadImage = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                (await imageFromItem(\r\n                    item,\r\n                    settingsProvider.maxImageWidth,\r\n                    settingsProvider.maxImageHeight\r\n                ))!.download();\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleSelectCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\r\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\r\n                return;\r\n            }\r\n\r\n            setJumpToSubtitle({\r\n                text: item.text,\r\n                start: item.start,\r\n                end: item.end,\r\n                originalStart: item.originalStart,\r\n                originalEnd: item.originalEnd,\r\n                track: item.track,\r\n            });\r\n        },\r\n        [subtitleFiles, handleError]\r\n    );\r\n\r\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogCancel = useCallback(() => {\r\n        setAnkiDialogOpen(false);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(false);\r\n\r\n        if (ankiDialogRequested) {\r\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n            setAnkiDialogRequested(false);\r\n        }\r\n    }, [ankiDialogRequested]);\r\n\r\n    const handleAnkiDialogRewind = useCallback(() => {\r\n        if (!ankiDialogItem) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\r\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\r\n            return;\r\n        }\r\n\r\n        const subtitle = {\r\n            text: ankiDialogItem.text,\r\n            start: ankiDialogItem.start,\r\n            end: ankiDialogItem.end,\r\n            originalStart: ankiDialogItem.originalStart,\r\n            originalEnd: ankiDialogItem.originalEnd,\r\n            track: ankiDialogItem.track,\r\n        };\r\n        setRewindSubtitle(subtitle);\r\n        setJumpToSubtitle(subtitle);\r\n\r\n        handleAnkiDialogCancel();\r\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\r\n\r\n    const handleViewImage = useCallback((image: Image) => {\r\n        setImage(image);\r\n        setImageDialogOpen(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        function onTabs(tabs: VideoTabModel[]) {\r\n            if (tabs.length !== availableTabs.length) {\r\n                setAvailableTabs(tabs);\r\n            } else {\r\n                let update = false;\r\n\r\n                for (let i = 0; i < availableTabs.length; ++i) {\r\n                    const t1 = availableTabs[i];\r\n                    const t2 = tabs[i];\r\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\r\n                        update = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (update) {\r\n                    setAvailableTabs(tabs);\r\n                }\r\n            }\r\n\r\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\r\n\r\n            if (selectedTabMissing) {\r\n                setTab(undefined);\r\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\r\n            }\r\n        }\r\n\r\n        extension.subscribeTabs(onTabs);\r\n\r\n        return () => extension.unsubscribeTabs(onTabs);\r\n    }, [availableTabs, tab, extension, handleError]);\r\n\r\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\r\n\r\n    const handleFiles = useCallback(\r\n        (files: FileList | File[]) => {\r\n            try {\r\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\r\n\r\n                setSources((previous) => {\r\n                    setLoading(true);\r\n\r\n                    let videoFileUrl = undefined;\r\n                    let audioFileUrl = undefined;\r\n\r\n                    if (videoFile || audioFile) {\r\n                        revokeUrls(previous);\r\n\r\n                        if (videoFile) {\r\n                            videoFileUrl = URL.createObjectURL(videoFile);\r\n                        } else if (audioFile) {\r\n                            audioFileUrl = URL.createObjectURL(audioFile);\r\n                        }\r\n\r\n                        setTab(undefined);\r\n                    } else {\r\n                        videoFile = previous.videoFile;\r\n                        videoFileUrl = previous.videoFileUrl;\r\n                        audioFile = previous.audioFile;\r\n                        audioFileUrl = previous.audioFileUrl;\r\n                    }\r\n\r\n                    const sources = {\r\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\r\n                        audioFile: audioFile,\r\n                        audioFileUrl: audioFileUrl,\r\n                        videoFile: videoFile,\r\n                        videoFileUrl: videoFileUrl,\r\n                    };\r\n\r\n                    return sources;\r\n                });\r\n\r\n                if (subtitleFiles.length > 0) {\r\n                    const subtitleFileName = subtitleFiles[0].name;\r\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError]\r\n    );\r\n\r\n    const handleDirectory = useCallback(\r\n        async (items: DataTransferItemList) => {\r\n            if (items.length !== 1) {\r\n                handleError('Cannot load more than one directory at a time');\r\n                return;\r\n            }\r\n\r\n            const fileSystemEntry = items[0].webkitGetAsEntry();\r\n\r\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\r\n                handleError('Failed to load directory');\r\n                return;\r\n            }\r\n\r\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\r\n            \r\n            try {\r\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\r\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\r\n                );\r\n\r\n                if (entries.find((e) => e.isDirectory)) {\r\n                    handleError('Cannot load a directory with subdirectories');\r\n                    return;\r\n                }\r\n\r\n                const filePromises = entries.map(\r\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\r\n                );\r\n                const files: File[] = [];\r\n\r\n                for (const f of filePromises) {\r\n                    files.push(await f);\r\n                }\r\n\r\n                handleFiles(files);\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, handleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (inVideoPlayer) {\r\n            return undefined;\r\n        }\r\n\r\n        async function onMessage(message: ExtensionMessage) {\r\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\r\n                const tabs = extension.tabs.filter((t) => {\r\n                    if (t.id !== message.tabId) {\r\n                        return false;\r\n                    }\r\n\r\n                    return !message.src || t.src === message.src;\r\n                });\r\n\r\n                if (tabs.length === 0) {\r\n                    if (message.src) {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' +\r\n                                message.tabId +\r\n                                ' with src ' +\r\n                                message.src +\r\n                                ' was not found'\r\n                        );\r\n                    } else {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\r\n                        );\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const tab = tabs[0];\r\n                let subtitleFiles: File[];\r\n\r\n                if (message.data.command === 'sync') {\r\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\r\n                    subtitleFiles = [\r\n                        new File(\r\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\r\n                            syncMessage.subtitles.name\r\n                        ),\r\n                    ];\r\n                } else if (message.data.command === 'syncv2') {\r\n                    const syncMessage = message.data as PlayerSyncMessage;\r\n                    subtitleFiles = await Promise.all(\r\n                        syncMessage.subtitles.map(\r\n                            async (s) =>\r\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\r\n                        )\r\n                    );\r\n                } else {\r\n                    console.error('Unknown message ' + message.data.command);\r\n                    return;\r\n                }\r\n\r\n                const subtitleFileName = subtitleFiles[0].name;\r\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                setSources({\r\n                    subtitleFiles: subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                });\r\n                setTab(tab);\r\n            }\r\n        }\r\n\r\n        extension.subscribe(onMessage);\r\n        extension.startHeartbeat();\r\n        return () => extension.unsubscribe(onMessage);\r\n    }, [extension, inVideoPlayer]);\r\n\r\n    const handleAutoPauseModeChangedViaBind = useCallback((playMode: PlayMode) => {\r\n        switch (playMode) {\r\n            case PlayMode.autoPause:\r\n                setAlert('Auto-pause: On');\r\n                setAlertSeverity('info');\r\n                setAlertOpen(true);\r\n                break;\r\n            case PlayMode.normal:\r\n                setAlert('Auto-pause: Off');\r\n                setAlertSeverity('info');\r\n                setAlertOpen(true);\r\n        }\r\n    }, []);\r\n\r\n    const handleDrop = useCallback(\r\n        (e: React.DragEvent) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n\r\n            if (inVideoPlayer) {\r\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\r\n                return;\r\n            }\r\n\r\n            setDragging(false);\r\n            dragEnterRef.current = null;\r\n\r\n            function allDirectories(items: DataTransferItemList) {\r\n                for (let i = 0; i < items.length; ++i) {\r\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\r\n                handleDirectory(e.dataTransfer.items);\r\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n                handleFiles(e.dataTransfer.files);\r\n            }\r\n        },\r\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\r\n    );\r\n\r\n    const handleFileInputChange = useCallback(() => {\r\n        const files = fileInputRef.current?.files;\r\n\r\n        if (files && files.length > 0) {\r\n            handleFiles(files);\r\n        }\r\n    }, [handleFiles]);\r\n\r\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\r\n\r\n    const handleDragOver = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n        },\r\n        [ankiDialogOpen]\r\n    );\r\n\r\n    const handleDragEnter = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!inVideoPlayer) {\r\n                dragEnterRef.current = e.target as Element;\r\n                setDragging(true);\r\n            }\r\n        },\r\n        [inVideoPlayer, ankiDialogOpen]\r\n    );\r\n\r\n    const handleDragLeave = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            e.nativeEvent.preventDefault();\r\n            e.nativeEvent.stopPropagation();\r\n\r\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\r\n                setDragging(false);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\r\n\r\n    if (location.pathname === '/' && searchParams.get('video')) {\r\n        return <NavigateToVideo searchParams={searchParams} />;\r\n    }\r\n\r\n    const nothingLoaded =\r\n        (loading && !videoFrameRef.current) ||\r\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\r\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <div\r\n                onDrop={handleDrop}\r\n                onDragOver={handleDragOver}\r\n                onDragEnter={handleDragEnter}\r\n                onDragLeave={handleDragLeave}\r\n            >\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\r\n                    {alert}\r\n                </Alert>\r\n                <Routes>\r\n                    <Route\r\n                        path=\"/video\"\r\n                        element={\r\n                            <RenderVideo\r\n                                searchParams={searchParams}\r\n                                settingsProvider={settingsProvider}\r\n                                onError={handleError}\r\n                                onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\r\n                            />\r\n                        }\r\n                    />\r\n                    <Route\r\n                        path=\"/\"\r\n                        element={\r\n                            <div>\r\n                                <CopyHistory\r\n                                    items={copiedSubtitles}\r\n                                    open={copyHistoryOpen}\r\n                                    drawerWidth={drawerWidth}\r\n                                    onClose={handleCloseCopyHistory}\r\n                                    onDelete={handleDeleteCopyHistoryItem}\r\n                                    onClipAudio={handleClipAudio}\r\n                                    onDownloadImage={handleDownloadImage}\r\n                                    onSelect={handleSelectCopyHistoryItem}\r\n                                    onAnki={handleAnki}\r\n                                />\r\n                                <AnkiDialog\r\n                                    open={ankiDialogOpen}\r\n                                    disabled={ankiDialogDisabled}\r\n                                    text={ankiDialogItem?.text}\r\n                                    audioClip={ankiDialogAudioClip}\r\n                                    image={ankiDialogImage}\r\n                                    source={itemSourceString(ankiDialogItem)}\r\n                                    url={ankiDialogItem?.url}\r\n                                    sliderContext={ankiDialogItemSliderContext}\r\n                                    customFields={settingsProvider.customAnkiFields}\r\n                                    anki={anki}\r\n                                    settingsProvider={settingsProvider}\r\n                                    onCancel={handleAnkiDialogCancel}\r\n                                    onRewind={handleAnkiDialogRewind}\r\n                                    onProceed={handleAnkiDialogProceed}\r\n                                    onViewImage={handleViewImage}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                />\r\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\r\n                                <SettingsDialog\r\n                                    anki={anki}\r\n                                    open={settingsDialogOpen}\r\n                                    onClose={handleCloseSettings}\r\n                                    settings={settingsProvider.settings}\r\n                                />\r\n                                <Bar\r\n                                    title={fileName || 'asbplayer'}\r\n                                    drawerWidth={drawerWidth}\r\n                                    drawerOpen={copyHistoryOpen}\r\n                                    hidden={appBarHidden}\r\n                                    onOpenCopyHistory={handleOpenCopyHistory}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                    onFileSelector={handleFileSelector}\r\n                                />\r\n                                <input\r\n                                    ref={fileInputRef}\r\n                                    onChange={handleFileInputChange}\r\n                                    type=\"file\"\r\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\r\n                                    multiple\r\n                                    hidden\r\n                                />\r\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\r\n                                    {nothingLoaded && (\r\n                                        <LandingPage\r\n                                            latestExtensionVersion={latestExtensionVersion}\r\n                                            extensionUrl={extensionUrl}\r\n                                            extension={extension}\r\n                                            loading={loading}\r\n                                            dragging={dragging}\r\n                                            appBarHidden={appBarHidden}\r\n                                            onFileSelector={handleFileSelector}\r\n                                        />\r\n                                    )}\r\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\r\n                                    <Player\r\n                                        subtitleReader={subtitleReader}\r\n                                        settingsProvider={settingsProvider}\r\n                                        onCopy={handleCopy}\r\n                                        onError={handleError}\r\n                                        onUnloadAudio={handleUnloadAudio}\r\n                                        onUnloadVideo={handleUnloadVideo}\r\n                                        onLoaded={handleSourcesLoaded}\r\n                                        onTabSelected={handleTabSelected}\r\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\r\n                                        onAppBarToggle={handleAppBarToggle}\r\n                                        onVideoPopOut={handleVideoPopOut}\r\n                                        onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\r\n                                        tab={tab}\r\n                                        availableTabs={availableTabs}\r\n                                        sources={sources}\r\n                                        jumpToSubtitle={jumpToSubtitle}\r\n                                        rewindSubtitle={rewindSubtitle}\r\n                                        videoFrameRef={videoFrameRef}\r\n                                        extension={extension}\r\n                                        drawerOpen={copyHistoryOpen}\r\n                                        appBarHidden={appBarHidden}\r\n                                        videoPopOut={videoPopOut}\r\n                                        disableKeyEvents={disableKeyEvents}\r\n                                        ankiDialogRequested={ankiDialogRequested}\r\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\r\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\r\n                                    />\r\n                                </Content>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Routes>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import '@fontsource/roboto';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\ncreateRoot(document.querySelector('#root')!).render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}